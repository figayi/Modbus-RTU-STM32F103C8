
ModbusMaster.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006610  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000574  08006720  08006720  00016720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c94  08006c94  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08006c94  08006c94  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006c94  08006c94  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c94  08006c94  00016c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c98  08006c98  00016c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006c9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000039c  20000070  08006d0c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000040c  08006d0c  0002040c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000110e0  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002649  00000000  00000000  00031179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f48  00000000  00000000  000337c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e60  00000000  00000000  00034710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d30  00000000  00000000  00035570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001066b  00000000  00000000  0004e2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009120d  00000000  00000000  0005e90b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000efb18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046c8  00000000  00000000  000efb6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08006708 	.word	0x08006708

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08006708 	.word	0x08006708

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_dmul>:
 8000160:	b570      	push	{r4, r5, r6, lr}
 8000162:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000166:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800016a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800016e:	bf1d      	ittte	ne
 8000170:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000174:	ea94 0f0c 	teqne	r4, ip
 8000178:	ea95 0f0c 	teqne	r5, ip
 800017c:	f000 f8de 	bleq	800033c <__aeabi_dmul+0x1dc>
 8000180:	442c      	add	r4, r5
 8000182:	ea81 0603 	eor.w	r6, r1, r3
 8000186:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800018a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800018e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000192:	bf18      	it	ne
 8000194:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000198:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800019c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001a0:	d038      	beq.n	8000214 <__aeabi_dmul+0xb4>
 80001a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001a6:	f04f 0500 	mov.w	r5, #0
 80001aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001b6:	f04f 0600 	mov.w	r6, #0
 80001ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001be:	f09c 0f00 	teq	ip, #0
 80001c2:	bf18      	it	ne
 80001c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001d4:	d204      	bcs.n	80001e0 <__aeabi_dmul+0x80>
 80001d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001da:	416d      	adcs	r5, r5
 80001dc:	eb46 0606 	adc.w	r6, r6, r6
 80001e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001f8:	bf88      	it	hi
 80001fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001fe:	d81e      	bhi.n	800023e <__aeabi_dmul+0xde>
 8000200:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000204:	bf08      	it	eq
 8000206:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800020a:	f150 0000 	adcs.w	r0, r0, #0
 800020e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000212:	bd70      	pop	{r4, r5, r6, pc}
 8000214:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000218:	ea46 0101 	orr.w	r1, r6, r1
 800021c:	ea40 0002 	orr.w	r0, r0, r2
 8000220:	ea81 0103 	eor.w	r1, r1, r3
 8000224:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000228:	bfc2      	ittt	gt
 800022a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800022e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000232:	bd70      	popgt	{r4, r5, r6, pc}
 8000234:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000238:	f04f 0e00 	mov.w	lr, #0
 800023c:	3c01      	subs	r4, #1
 800023e:	f300 80ab 	bgt.w	8000398 <__aeabi_dmul+0x238>
 8000242:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000246:	bfde      	ittt	le
 8000248:	2000      	movle	r0, #0
 800024a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800024e:	bd70      	pople	{r4, r5, r6, pc}
 8000250:	f1c4 0400 	rsb	r4, r4, #0
 8000254:	3c20      	subs	r4, #32
 8000256:	da35      	bge.n	80002c4 <__aeabi_dmul+0x164>
 8000258:	340c      	adds	r4, #12
 800025a:	dc1b      	bgt.n	8000294 <__aeabi_dmul+0x134>
 800025c:	f104 0414 	add.w	r4, r4, #20
 8000260:	f1c4 0520 	rsb	r5, r4, #32
 8000264:	fa00 f305 	lsl.w	r3, r0, r5
 8000268:	fa20 f004 	lsr.w	r0, r0, r4
 800026c:	fa01 f205 	lsl.w	r2, r1, r5
 8000270:	ea40 0002 	orr.w	r0, r0, r2
 8000274:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000278:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800027c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000280:	fa21 f604 	lsr.w	r6, r1, r4
 8000284:	eb42 0106 	adc.w	r1, r2, r6
 8000288:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800028c:	bf08      	it	eq
 800028e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f1c4 040c 	rsb	r4, r4, #12
 8000298:	f1c4 0520 	rsb	r5, r4, #32
 800029c:	fa00 f304 	lsl.w	r3, r0, r4
 80002a0:	fa20 f005 	lsr.w	r0, r0, r5
 80002a4:	fa01 f204 	lsl.w	r2, r1, r4
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002bc:	bf08      	it	eq
 80002be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f1c4 0520 	rsb	r5, r4, #32
 80002c8:	fa00 f205 	lsl.w	r2, r0, r5
 80002cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002d0:	fa20 f304 	lsr.w	r3, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea43 0302 	orr.w	r3, r3, r2
 80002dc:	fa21 f004 	lsr.w	r0, r1, r4
 80002e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	fa21 f204 	lsr.w	r2, r1, r4
 80002e8:	ea20 0002 	bic.w	r0, r0, r2
 80002ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f094 0f00 	teq	r4, #0
 8000300:	d10f      	bne.n	8000322 <__aeabi_dmul+0x1c2>
 8000302:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000306:	0040      	lsls	r0, r0, #1
 8000308:	eb41 0101 	adc.w	r1, r1, r1
 800030c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000310:	bf08      	it	eq
 8000312:	3c01      	subeq	r4, #1
 8000314:	d0f7      	beq.n	8000306 <__aeabi_dmul+0x1a6>
 8000316:	ea41 0106 	orr.w	r1, r1, r6
 800031a:	f095 0f00 	teq	r5, #0
 800031e:	bf18      	it	ne
 8000320:	4770      	bxne	lr
 8000322:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000326:	0052      	lsls	r2, r2, #1
 8000328:	eb43 0303 	adc.w	r3, r3, r3
 800032c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000330:	bf08      	it	eq
 8000332:	3d01      	subeq	r5, #1
 8000334:	d0f7      	beq.n	8000326 <__aeabi_dmul+0x1c6>
 8000336:	ea43 0306 	orr.w	r3, r3, r6
 800033a:	4770      	bx	lr
 800033c:	ea94 0f0c 	teq	r4, ip
 8000340:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000344:	bf18      	it	ne
 8000346:	ea95 0f0c 	teqne	r5, ip
 800034a:	d00c      	beq.n	8000366 <__aeabi_dmul+0x206>
 800034c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000350:	bf18      	it	ne
 8000352:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000356:	d1d1      	bne.n	80002fc <__aeabi_dmul+0x19c>
 8000358:	ea81 0103 	eor.w	r1, r1, r3
 800035c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000360:	f04f 0000 	mov.w	r0, #0
 8000364:	bd70      	pop	{r4, r5, r6, pc}
 8000366:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800036a:	bf06      	itte	eq
 800036c:	4610      	moveq	r0, r2
 800036e:	4619      	moveq	r1, r3
 8000370:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000374:	d019      	beq.n	80003aa <__aeabi_dmul+0x24a>
 8000376:	ea94 0f0c 	teq	r4, ip
 800037a:	d102      	bne.n	8000382 <__aeabi_dmul+0x222>
 800037c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000380:	d113      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000382:	ea95 0f0c 	teq	r5, ip
 8000386:	d105      	bne.n	8000394 <__aeabi_dmul+0x234>
 8000388:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800038c:	bf1c      	itt	ne
 800038e:	4610      	movne	r0, r2
 8000390:	4619      	movne	r1, r3
 8000392:	d10a      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000394:	ea81 0103 	eor.w	r1, r1, r3
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd70      	pop	{r4, r5, r6, pc}
 80003aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003b2:	bd70      	pop	{r4, r5, r6, pc}

080003b4 <__aeabi_drsub>:
 80003b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b8:	e002      	b.n	80003c0 <__adddf3>
 80003ba:	bf00      	nop

080003bc <__aeabi_dsub>:
 80003bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003c0 <__adddf3>:
 80003c0:	b530      	push	{r4, r5, lr}
 80003c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ca:	ea94 0f05 	teq	r4, r5
 80003ce:	bf08      	it	eq
 80003d0:	ea90 0f02 	teqeq	r0, r2
 80003d4:	bf1f      	itttt	ne
 80003d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e6:	f000 80e2 	beq.w	80005ae <__adddf3+0x1ee>
 80003ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003f2:	bfb8      	it	lt
 80003f4:	426d      	neglt	r5, r5
 80003f6:	dd0c      	ble.n	8000412 <__adddf3+0x52>
 80003f8:	442c      	add	r4, r5
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	ea82 0000 	eor.w	r0, r2, r0
 8000406:	ea83 0101 	eor.w	r1, r3, r1
 800040a:	ea80 0202 	eor.w	r2, r0, r2
 800040e:	ea81 0303 	eor.w	r3, r1, r3
 8000412:	2d36      	cmp	r5, #54	; 0x36
 8000414:	bf88      	it	hi
 8000416:	bd30      	pophi	{r4, r5, pc}
 8000418:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800041c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000420:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000424:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x70>
 800042a:	4240      	negs	r0, r0
 800042c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000430:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000434:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000438:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800043c:	d002      	beq.n	8000444 <__adddf3+0x84>
 800043e:	4252      	negs	r2, r2
 8000440:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000444:	ea94 0f05 	teq	r4, r5
 8000448:	f000 80a7 	beq.w	800059a <__adddf3+0x1da>
 800044c:	f1a4 0401 	sub.w	r4, r4, #1
 8000450:	f1d5 0e20 	rsbs	lr, r5, #32
 8000454:	db0d      	blt.n	8000472 <__adddf3+0xb2>
 8000456:	fa02 fc0e 	lsl.w	ip, r2, lr
 800045a:	fa22 f205 	lsr.w	r2, r2, r5
 800045e:	1880      	adds	r0, r0, r2
 8000460:	f141 0100 	adc.w	r1, r1, #0
 8000464:	fa03 f20e 	lsl.w	r2, r3, lr
 8000468:	1880      	adds	r0, r0, r2
 800046a:	fa43 f305 	asr.w	r3, r3, r5
 800046e:	4159      	adcs	r1, r3
 8000470:	e00e      	b.n	8000490 <__adddf3+0xd0>
 8000472:	f1a5 0520 	sub.w	r5, r5, #32
 8000476:	f10e 0e20 	add.w	lr, lr, #32
 800047a:	2a01      	cmp	r2, #1
 800047c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000480:	bf28      	it	cs
 8000482:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000486:	fa43 f305 	asr.w	r3, r3, r5
 800048a:	18c0      	adds	r0, r0, r3
 800048c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	d507      	bpl.n	80004a6 <__adddf3+0xe6>
 8000496:	f04f 0e00 	mov.w	lr, #0
 800049a:	f1dc 0c00 	rsbs	ip, ip, #0
 800049e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004aa:	d31b      	bcc.n	80004e4 <__adddf3+0x124>
 80004ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004b0:	d30c      	bcc.n	80004cc <__adddf3+0x10c>
 80004b2:	0849      	lsrs	r1, r1, #1
 80004b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004bc:	f104 0401 	add.w	r4, r4, #1
 80004c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c8:	f080 809a 	bcs.w	8000600 <__adddf3+0x240>
 80004cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004d0:	bf08      	it	eq
 80004d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d6:	f150 0000 	adcs.w	r0, r0, #0
 80004da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004de:	ea41 0105 	orr.w	r1, r1, r5
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e8:	4140      	adcs	r0, r0
 80004ea:	eb41 0101 	adc.w	r1, r1, r1
 80004ee:	3c01      	subs	r4, #1
 80004f0:	bf28      	it	cs
 80004f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f6:	d2e9      	bcs.n	80004cc <__adddf3+0x10c>
 80004f8:	f091 0f00 	teq	r1, #0
 80004fc:	bf04      	itt	eq
 80004fe:	4601      	moveq	r1, r0
 8000500:	2000      	moveq	r0, #0
 8000502:	fab1 f381 	clz	r3, r1
 8000506:	bf08      	it	eq
 8000508:	3320      	addeq	r3, #32
 800050a:	f1a3 030b 	sub.w	r3, r3, #11
 800050e:	f1b3 0220 	subs.w	r2, r3, #32
 8000512:	da0c      	bge.n	800052e <__adddf3+0x16e>
 8000514:	320c      	adds	r2, #12
 8000516:	dd08      	ble.n	800052a <__adddf3+0x16a>
 8000518:	f102 0c14 	add.w	ip, r2, #20
 800051c:	f1c2 020c 	rsb	r2, r2, #12
 8000520:	fa01 f00c 	lsl.w	r0, r1, ip
 8000524:	fa21 f102 	lsr.w	r1, r1, r2
 8000528:	e00c      	b.n	8000544 <__adddf3+0x184>
 800052a:	f102 0214 	add.w	r2, r2, #20
 800052e:	bfd8      	it	le
 8000530:	f1c2 0c20 	rsble	ip, r2, #32
 8000534:	fa01 f102 	lsl.w	r1, r1, r2
 8000538:	fa20 fc0c 	lsr.w	ip, r0, ip
 800053c:	bfdc      	itt	le
 800053e:	ea41 010c 	orrle.w	r1, r1, ip
 8000542:	4090      	lslle	r0, r2
 8000544:	1ae4      	subs	r4, r4, r3
 8000546:	bfa2      	ittt	ge
 8000548:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800054c:	4329      	orrge	r1, r5
 800054e:	bd30      	popge	{r4, r5, pc}
 8000550:	ea6f 0404 	mvn.w	r4, r4
 8000554:	3c1f      	subs	r4, #31
 8000556:	da1c      	bge.n	8000592 <__adddf3+0x1d2>
 8000558:	340c      	adds	r4, #12
 800055a:	dc0e      	bgt.n	800057a <__adddf3+0x1ba>
 800055c:	f104 0414 	add.w	r4, r4, #20
 8000560:	f1c4 0220 	rsb	r2, r4, #32
 8000564:	fa20 f004 	lsr.w	r0, r0, r4
 8000568:	fa01 f302 	lsl.w	r3, r1, r2
 800056c:	ea40 0003 	orr.w	r0, r0, r3
 8000570:	fa21 f304 	lsr.w	r3, r1, r4
 8000574:	ea45 0103 	orr.w	r1, r5, r3
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	f1c4 040c 	rsb	r4, r4, #12
 800057e:	f1c4 0220 	rsb	r2, r4, #32
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 f304 	lsl.w	r3, r1, r4
 800058a:	ea40 0003 	orr.w	r0, r0, r3
 800058e:	4629      	mov	r1, r5
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	fa21 f004 	lsr.w	r0, r1, r4
 8000596:	4629      	mov	r1, r5
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	f094 0f00 	teq	r4, #0
 800059e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005a2:	bf06      	itte	eq
 80005a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a8:	3401      	addeq	r4, #1
 80005aa:	3d01      	subne	r5, #1
 80005ac:	e74e      	b.n	800044c <__adddf3+0x8c>
 80005ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005b2:	bf18      	it	ne
 80005b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b8:	d029      	beq.n	800060e <__adddf3+0x24e>
 80005ba:	ea94 0f05 	teq	r4, r5
 80005be:	bf08      	it	eq
 80005c0:	ea90 0f02 	teqeq	r0, r2
 80005c4:	d005      	beq.n	80005d2 <__adddf3+0x212>
 80005c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ca:	bf04      	itt	eq
 80005cc:	4619      	moveq	r1, r3
 80005ce:	4610      	moveq	r0, r2
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	ea91 0f03 	teq	r1, r3
 80005d6:	bf1e      	ittt	ne
 80005d8:	2100      	movne	r1, #0
 80005da:	2000      	movne	r0, #0
 80005dc:	bd30      	popne	{r4, r5, pc}
 80005de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005e2:	d105      	bne.n	80005f0 <__adddf3+0x230>
 80005e4:	0040      	lsls	r0, r0, #1
 80005e6:	4149      	adcs	r1, r1
 80005e8:	bf28      	it	cs
 80005ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd30      	pop	{r4, r5, pc}
 80005f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f4:	bf3c      	itt	cc
 80005f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005fa:	bd30      	popcc	{r4, r5, pc}
 80005fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000600:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000604:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000608:	f04f 0000 	mov.w	r0, #0
 800060c:	bd30      	pop	{r4, r5, pc}
 800060e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000612:	bf1a      	itte	ne
 8000614:	4619      	movne	r1, r3
 8000616:	4610      	movne	r0, r2
 8000618:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800061c:	bf1c      	itt	ne
 800061e:	460b      	movne	r3, r1
 8000620:	4602      	movne	r2, r0
 8000622:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000626:	bf06      	itte	eq
 8000628:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800062c:	ea91 0f03 	teqeq	r1, r3
 8000630:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	bf00      	nop

08000638 <__aeabi_ui2d>:
 8000638:	f090 0f00 	teq	r0, #0
 800063c:	bf04      	itt	eq
 800063e:	2100      	moveq	r1, #0
 8000640:	4770      	bxeq	lr
 8000642:	b530      	push	{r4, r5, lr}
 8000644:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000648:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064c:	f04f 0500 	mov.w	r5, #0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e750      	b.n	80004f8 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_i2d>:
 8000658:	f090 0f00 	teq	r0, #0
 800065c:	bf04      	itt	eq
 800065e:	2100      	moveq	r1, #0
 8000660:	4770      	bxeq	lr
 8000662:	b530      	push	{r4, r5, lr}
 8000664:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000668:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800066c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000670:	bf48      	it	mi
 8000672:	4240      	negmi	r0, r0
 8000674:	f04f 0100 	mov.w	r1, #0
 8000678:	e73e      	b.n	80004f8 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_f2d>:
 800067c:	0042      	lsls	r2, r0, #1
 800067e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000682:	ea4f 0131 	mov.w	r1, r1, rrx
 8000686:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800068a:	bf1f      	itttt	ne
 800068c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000690:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000694:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000698:	4770      	bxne	lr
 800069a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069e:	bf08      	it	eq
 80006a0:	4770      	bxeq	lr
 80006a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a6:	bf04      	itt	eq
 80006a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006ac:	4770      	bxeq	lr
 80006ae:	b530      	push	{r4, r5, lr}
 80006b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	e71c      	b.n	80004f8 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_ul2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f04f 0500 	mov.w	r5, #0
 80006ce:	e00a      	b.n	80006e6 <__aeabi_l2d+0x16>

080006d0 <__aeabi_l2d>:
 80006d0:	ea50 0201 	orrs.w	r2, r0, r1
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	b530      	push	{r4, r5, lr}
 80006da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006de:	d502      	bpl.n	80006e6 <__aeabi_l2d+0x16>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006f2:	f43f aed8 	beq.w	80004a6 <__adddf3+0xe6>
 80006f6:	f04f 0203 	mov.w	r2, #3
 80006fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fe:	bf18      	it	ne
 8000700:	3203      	addne	r2, #3
 8000702:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000706:	bf18      	it	ne
 8000708:	3203      	addne	r2, #3
 800070a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070e:	f1c2 0320 	rsb	r3, r2, #32
 8000712:	fa00 fc03 	lsl.w	ip, r0, r3
 8000716:	fa20 f002 	lsr.w	r0, r0, r2
 800071a:	fa01 fe03 	lsl.w	lr, r1, r3
 800071e:	ea40 000e 	orr.w	r0, r0, lr
 8000722:	fa21 f102 	lsr.w	r1, r1, r2
 8000726:	4414      	add	r4, r2
 8000728:	e6bd      	b.n	80004a6 <__adddf3+0xe6>
 800072a:	bf00      	nop

0800072c <__aeabi_d2f>:
 800072c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000730:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000734:	bf24      	itt	cs
 8000736:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800073a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800073e:	d90d      	bls.n	800075c <__aeabi_d2f+0x30>
 8000740:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000744:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000748:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800074c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000750:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000754:	bf08      	it	eq
 8000756:	f020 0001 	biceq.w	r0, r0, #1
 800075a:	4770      	bx	lr
 800075c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000760:	d121      	bne.n	80007a6 <__aeabi_d2f+0x7a>
 8000762:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000766:	bfbc      	itt	lt
 8000768:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800076c:	4770      	bxlt	lr
 800076e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000772:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000776:	f1c2 0218 	rsb	r2, r2, #24
 800077a:	f1c2 0c20 	rsb	ip, r2, #32
 800077e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000782:	fa20 f002 	lsr.w	r0, r0, r2
 8000786:	bf18      	it	ne
 8000788:	f040 0001 	orrne.w	r0, r0, #1
 800078c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000790:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000794:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000798:	ea40 000c 	orr.w	r0, r0, ip
 800079c:	fa23 f302 	lsr.w	r3, r3, r2
 80007a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80007a4:	e7cc      	b.n	8000740 <__aeabi_d2f+0x14>
 80007a6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80007aa:	d107      	bne.n	80007bc <__aeabi_d2f+0x90>
 80007ac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007b0:	bf1e      	ittt	ne
 80007b2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007b6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007ba:	4770      	bxne	lr
 80007bc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80007c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop

080007cc <__aeabi_frsub>:
 80007cc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80007d0:	e002      	b.n	80007d8 <__addsf3>
 80007d2:	bf00      	nop

080007d4 <__aeabi_fsub>:
 80007d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080007d8 <__addsf3>:
 80007d8:	0042      	lsls	r2, r0, #1
 80007da:	bf1f      	itttt	ne
 80007dc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80007e0:	ea92 0f03 	teqne	r2, r3
 80007e4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80007e8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80007ec:	d06a      	beq.n	80008c4 <__addsf3+0xec>
 80007ee:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80007f2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80007f6:	bfc1      	itttt	gt
 80007f8:	18d2      	addgt	r2, r2, r3
 80007fa:	4041      	eorgt	r1, r0
 80007fc:	4048      	eorgt	r0, r1
 80007fe:	4041      	eorgt	r1, r0
 8000800:	bfb8      	it	lt
 8000802:	425b      	neglt	r3, r3
 8000804:	2b19      	cmp	r3, #25
 8000806:	bf88      	it	hi
 8000808:	4770      	bxhi	lr
 800080a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800080e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000812:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000816:	bf18      	it	ne
 8000818:	4240      	negne	r0, r0
 800081a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800081e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000822:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000826:	bf18      	it	ne
 8000828:	4249      	negne	r1, r1
 800082a:	ea92 0f03 	teq	r2, r3
 800082e:	d03f      	beq.n	80008b0 <__addsf3+0xd8>
 8000830:	f1a2 0201 	sub.w	r2, r2, #1
 8000834:	fa41 fc03 	asr.w	ip, r1, r3
 8000838:	eb10 000c 	adds.w	r0, r0, ip
 800083c:	f1c3 0320 	rsb	r3, r3, #32
 8000840:	fa01 f103 	lsl.w	r1, r1, r3
 8000844:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000848:	d502      	bpl.n	8000850 <__addsf3+0x78>
 800084a:	4249      	negs	r1, r1
 800084c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000850:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000854:	d313      	bcc.n	800087e <__addsf3+0xa6>
 8000856:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800085a:	d306      	bcc.n	800086a <__addsf3+0x92>
 800085c:	0840      	lsrs	r0, r0, #1
 800085e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000862:	f102 0201 	add.w	r2, r2, #1
 8000866:	2afe      	cmp	r2, #254	; 0xfe
 8000868:	d251      	bcs.n	800090e <__addsf3+0x136>
 800086a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800086e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000872:	bf08      	it	eq
 8000874:	f020 0001 	biceq.w	r0, r0, #1
 8000878:	ea40 0003 	orr.w	r0, r0, r3
 800087c:	4770      	bx	lr
 800087e:	0049      	lsls	r1, r1, #1
 8000880:	eb40 0000 	adc.w	r0, r0, r0
 8000884:	3a01      	subs	r2, #1
 8000886:	bf28      	it	cs
 8000888:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800088c:	d2ed      	bcs.n	800086a <__addsf3+0x92>
 800088e:	fab0 fc80 	clz	ip, r0
 8000892:	f1ac 0c08 	sub.w	ip, ip, #8
 8000896:	ebb2 020c 	subs.w	r2, r2, ip
 800089a:	fa00 f00c 	lsl.w	r0, r0, ip
 800089e:	bfaa      	itet	ge
 80008a0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80008a4:	4252      	neglt	r2, r2
 80008a6:	4318      	orrge	r0, r3
 80008a8:	bfbc      	itt	lt
 80008aa:	40d0      	lsrlt	r0, r2
 80008ac:	4318      	orrlt	r0, r3
 80008ae:	4770      	bx	lr
 80008b0:	f092 0f00 	teq	r2, #0
 80008b4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80008b8:	bf06      	itte	eq
 80008ba:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80008be:	3201      	addeq	r2, #1
 80008c0:	3b01      	subne	r3, #1
 80008c2:	e7b5      	b.n	8000830 <__addsf3+0x58>
 80008c4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80008c8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80008cc:	bf18      	it	ne
 80008ce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80008d2:	d021      	beq.n	8000918 <__addsf3+0x140>
 80008d4:	ea92 0f03 	teq	r2, r3
 80008d8:	d004      	beq.n	80008e4 <__addsf3+0x10c>
 80008da:	f092 0f00 	teq	r2, #0
 80008de:	bf08      	it	eq
 80008e0:	4608      	moveq	r0, r1
 80008e2:	4770      	bx	lr
 80008e4:	ea90 0f01 	teq	r0, r1
 80008e8:	bf1c      	itt	ne
 80008ea:	2000      	movne	r0, #0
 80008ec:	4770      	bxne	lr
 80008ee:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80008f2:	d104      	bne.n	80008fe <__addsf3+0x126>
 80008f4:	0040      	lsls	r0, r0, #1
 80008f6:	bf28      	it	cs
 80008f8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80008fc:	4770      	bx	lr
 80008fe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000902:	bf3c      	itt	cc
 8000904:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000908:	4770      	bxcc	lr
 800090a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800090e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000912:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000916:	4770      	bx	lr
 8000918:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800091c:	bf16      	itet	ne
 800091e:	4608      	movne	r0, r1
 8000920:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000924:	4601      	movne	r1, r0
 8000926:	0242      	lsls	r2, r0, #9
 8000928:	bf06      	itte	eq
 800092a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800092e:	ea90 0f01 	teqeq	r0, r1
 8000932:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000936:	4770      	bx	lr

08000938 <__aeabi_ui2f>:
 8000938:	f04f 0300 	mov.w	r3, #0
 800093c:	e004      	b.n	8000948 <__aeabi_i2f+0x8>
 800093e:	bf00      	nop

08000940 <__aeabi_i2f>:
 8000940:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000944:	bf48      	it	mi
 8000946:	4240      	negmi	r0, r0
 8000948:	ea5f 0c00 	movs.w	ip, r0
 800094c:	bf08      	it	eq
 800094e:	4770      	bxeq	lr
 8000950:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000954:	4601      	mov	r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	e01c      	b.n	8000996 <__aeabi_l2f+0x2a>

0800095c <__aeabi_ul2f>:
 800095c:	ea50 0201 	orrs.w	r2, r0, r1
 8000960:	bf08      	it	eq
 8000962:	4770      	bxeq	lr
 8000964:	f04f 0300 	mov.w	r3, #0
 8000968:	e00a      	b.n	8000980 <__aeabi_l2f+0x14>
 800096a:	bf00      	nop

0800096c <__aeabi_l2f>:
 800096c:	ea50 0201 	orrs.w	r2, r0, r1
 8000970:	bf08      	it	eq
 8000972:	4770      	bxeq	lr
 8000974:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000978:	d502      	bpl.n	8000980 <__aeabi_l2f+0x14>
 800097a:	4240      	negs	r0, r0
 800097c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000980:	ea5f 0c01 	movs.w	ip, r1
 8000984:	bf02      	ittt	eq
 8000986:	4684      	moveq	ip, r0
 8000988:	4601      	moveq	r1, r0
 800098a:	2000      	moveq	r0, #0
 800098c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000990:	bf08      	it	eq
 8000992:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000996:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800099a:	fabc f28c 	clz	r2, ip
 800099e:	3a08      	subs	r2, #8
 80009a0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80009a4:	db10      	blt.n	80009c8 <__aeabi_l2f+0x5c>
 80009a6:	fa01 fc02 	lsl.w	ip, r1, r2
 80009aa:	4463      	add	r3, ip
 80009ac:	fa00 fc02 	lsl.w	ip, r0, r2
 80009b0:	f1c2 0220 	rsb	r2, r2, #32
 80009b4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80009b8:	fa20 f202 	lsr.w	r2, r0, r2
 80009bc:	eb43 0002 	adc.w	r0, r3, r2
 80009c0:	bf08      	it	eq
 80009c2:	f020 0001 	biceq.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	f102 0220 	add.w	r2, r2, #32
 80009cc:	fa01 fc02 	lsl.w	ip, r1, r2
 80009d0:	f1c2 0220 	rsb	r2, r2, #32
 80009d4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80009d8:	fa21 f202 	lsr.w	r2, r1, r2
 80009dc:	eb43 0002 	adc.w	r0, r3, r2
 80009e0:	bf08      	it	eq
 80009e2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80009e6:	4770      	bx	lr

080009e8 <__aeabi_fmul>:
 80009e8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009ec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009f0:	bf1e      	ittt	ne
 80009f2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009f6:	ea92 0f0c 	teqne	r2, ip
 80009fa:	ea93 0f0c 	teqne	r3, ip
 80009fe:	d06f      	beq.n	8000ae0 <__aeabi_fmul+0xf8>
 8000a00:	441a      	add	r2, r3
 8000a02:	ea80 0c01 	eor.w	ip, r0, r1
 8000a06:	0240      	lsls	r0, r0, #9
 8000a08:	bf18      	it	ne
 8000a0a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000a0e:	d01e      	beq.n	8000a4e <__aeabi_fmul+0x66>
 8000a10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000a14:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000a18:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000a1c:	fba0 3101 	umull	r3, r1, r0, r1
 8000a20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a24:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000a28:	bf3e      	ittt	cc
 8000a2a:	0049      	lslcc	r1, r1, #1
 8000a2c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000a30:	005b      	lslcc	r3, r3, #1
 8000a32:	ea40 0001 	orr.w	r0, r0, r1
 8000a36:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000a3a:	2afd      	cmp	r2, #253	; 0xfd
 8000a3c:	d81d      	bhi.n	8000a7a <__aeabi_fmul+0x92>
 8000a3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000a42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a46:	bf08      	it	eq
 8000a48:	f020 0001 	biceq.w	r0, r0, #1
 8000a4c:	4770      	bx	lr
 8000a4e:	f090 0f00 	teq	r0, #0
 8000a52:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a56:	bf08      	it	eq
 8000a58:	0249      	lsleq	r1, r1, #9
 8000a5a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a5e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000a62:	3a7f      	subs	r2, #127	; 0x7f
 8000a64:	bfc2      	ittt	gt
 8000a66:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a6a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a6e:	4770      	bxgt	lr
 8000a70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a74:	f04f 0300 	mov.w	r3, #0
 8000a78:	3a01      	subs	r2, #1
 8000a7a:	dc5d      	bgt.n	8000b38 <__aeabi_fmul+0x150>
 8000a7c:	f112 0f19 	cmn.w	r2, #25
 8000a80:	bfdc      	itt	le
 8000a82:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000a86:	4770      	bxle	lr
 8000a88:	f1c2 0200 	rsb	r2, r2, #0
 8000a8c:	0041      	lsls	r1, r0, #1
 8000a8e:	fa21 f102 	lsr.w	r1, r1, r2
 8000a92:	f1c2 0220 	rsb	r2, r2, #32
 8000a96:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a9a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000a9e:	f140 0000 	adc.w	r0, r0, #0
 8000aa2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000aa6:	bf08      	it	eq
 8000aa8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000aac:	4770      	bx	lr
 8000aae:	f092 0f00 	teq	r2, #0
 8000ab2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ab6:	bf02      	ittt	eq
 8000ab8:	0040      	lsleq	r0, r0, #1
 8000aba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000abe:	3a01      	subeq	r2, #1
 8000ac0:	d0f9      	beq.n	8000ab6 <__aeabi_fmul+0xce>
 8000ac2:	ea40 000c 	orr.w	r0, r0, ip
 8000ac6:	f093 0f00 	teq	r3, #0
 8000aca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ace:	bf02      	ittt	eq
 8000ad0:	0049      	lsleq	r1, r1, #1
 8000ad2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ad6:	3b01      	subeq	r3, #1
 8000ad8:	d0f9      	beq.n	8000ace <__aeabi_fmul+0xe6>
 8000ada:	ea41 010c 	orr.w	r1, r1, ip
 8000ade:	e78f      	b.n	8000a00 <__aeabi_fmul+0x18>
 8000ae0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ae4:	ea92 0f0c 	teq	r2, ip
 8000ae8:	bf18      	it	ne
 8000aea:	ea93 0f0c 	teqne	r3, ip
 8000aee:	d00a      	beq.n	8000b06 <__aeabi_fmul+0x11e>
 8000af0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000af4:	bf18      	it	ne
 8000af6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000afa:	d1d8      	bne.n	8000aae <__aeabi_fmul+0xc6>
 8000afc:	ea80 0001 	eor.w	r0, r0, r1
 8000b00:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000b04:	4770      	bx	lr
 8000b06:	f090 0f00 	teq	r0, #0
 8000b0a:	bf17      	itett	ne
 8000b0c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000b10:	4608      	moveq	r0, r1
 8000b12:	f091 0f00 	teqne	r1, #0
 8000b16:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000b1a:	d014      	beq.n	8000b46 <__aeabi_fmul+0x15e>
 8000b1c:	ea92 0f0c 	teq	r2, ip
 8000b20:	d101      	bne.n	8000b26 <__aeabi_fmul+0x13e>
 8000b22:	0242      	lsls	r2, r0, #9
 8000b24:	d10f      	bne.n	8000b46 <__aeabi_fmul+0x15e>
 8000b26:	ea93 0f0c 	teq	r3, ip
 8000b2a:	d103      	bne.n	8000b34 <__aeabi_fmul+0x14c>
 8000b2c:	024b      	lsls	r3, r1, #9
 8000b2e:	bf18      	it	ne
 8000b30:	4608      	movne	r0, r1
 8000b32:	d108      	bne.n	8000b46 <__aeabi_fmul+0x15e>
 8000b34:	ea80 0001 	eor.w	r0, r0, r1
 8000b38:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000b3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b44:	4770      	bx	lr
 8000b46:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b4a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_fdiv>:
 8000b50:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b54:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b58:	bf1e      	ittt	ne
 8000b5a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b5e:	ea92 0f0c 	teqne	r2, ip
 8000b62:	ea93 0f0c 	teqne	r3, ip
 8000b66:	d069      	beq.n	8000c3c <__aeabi_fdiv+0xec>
 8000b68:	eba2 0203 	sub.w	r2, r2, r3
 8000b6c:	ea80 0c01 	eor.w	ip, r0, r1
 8000b70:	0249      	lsls	r1, r1, #9
 8000b72:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000b76:	d037      	beq.n	8000be8 <__aeabi_fdiv+0x98>
 8000b78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b7c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000b80:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000b84:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b88:	428b      	cmp	r3, r1
 8000b8a:	bf38      	it	cc
 8000b8c:	005b      	lslcc	r3, r3, #1
 8000b8e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000b92:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000b96:	428b      	cmp	r3, r1
 8000b98:	bf24      	itt	cs
 8000b9a:	1a5b      	subcs	r3, r3, r1
 8000b9c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ba0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ba4:	bf24      	itt	cs
 8000ba6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000baa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000bae:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000bb2:	bf24      	itt	cs
 8000bb4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000bb8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000bbc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000bc0:	bf24      	itt	cs
 8000bc2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000bc6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000bca:	011b      	lsls	r3, r3, #4
 8000bcc:	bf18      	it	ne
 8000bce:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000bd2:	d1e0      	bne.n	8000b96 <__aeabi_fdiv+0x46>
 8000bd4:	2afd      	cmp	r2, #253	; 0xfd
 8000bd6:	f63f af50 	bhi.w	8000a7a <__aeabi_fmul+0x92>
 8000bda:	428b      	cmp	r3, r1
 8000bdc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bec:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bf0:	327f      	adds	r2, #127	; 0x7f
 8000bf2:	bfc2      	ittt	gt
 8000bf4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000bf8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bfc:	4770      	bxgt	lr
 8000bfe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c02:	f04f 0300 	mov.w	r3, #0
 8000c06:	3a01      	subs	r2, #1
 8000c08:	e737      	b.n	8000a7a <__aeabi_fmul+0x92>
 8000c0a:	f092 0f00 	teq	r2, #0
 8000c0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c12:	bf02      	ittt	eq
 8000c14:	0040      	lsleq	r0, r0, #1
 8000c16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c1a:	3a01      	subeq	r2, #1
 8000c1c:	d0f9      	beq.n	8000c12 <__aeabi_fdiv+0xc2>
 8000c1e:	ea40 000c 	orr.w	r0, r0, ip
 8000c22:	f093 0f00 	teq	r3, #0
 8000c26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c2a:	bf02      	ittt	eq
 8000c2c:	0049      	lsleq	r1, r1, #1
 8000c2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c32:	3b01      	subeq	r3, #1
 8000c34:	d0f9      	beq.n	8000c2a <__aeabi_fdiv+0xda>
 8000c36:	ea41 010c 	orr.w	r1, r1, ip
 8000c3a:	e795      	b.n	8000b68 <__aeabi_fdiv+0x18>
 8000c3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c40:	ea92 0f0c 	teq	r2, ip
 8000c44:	d108      	bne.n	8000c58 <__aeabi_fdiv+0x108>
 8000c46:	0242      	lsls	r2, r0, #9
 8000c48:	f47f af7d 	bne.w	8000b46 <__aeabi_fmul+0x15e>
 8000c4c:	ea93 0f0c 	teq	r3, ip
 8000c50:	f47f af70 	bne.w	8000b34 <__aeabi_fmul+0x14c>
 8000c54:	4608      	mov	r0, r1
 8000c56:	e776      	b.n	8000b46 <__aeabi_fmul+0x15e>
 8000c58:	ea93 0f0c 	teq	r3, ip
 8000c5c:	d104      	bne.n	8000c68 <__aeabi_fdiv+0x118>
 8000c5e:	024b      	lsls	r3, r1, #9
 8000c60:	f43f af4c 	beq.w	8000afc <__aeabi_fmul+0x114>
 8000c64:	4608      	mov	r0, r1
 8000c66:	e76e      	b.n	8000b46 <__aeabi_fmul+0x15e>
 8000c68:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c6c:	bf18      	it	ne
 8000c6e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c72:	d1ca      	bne.n	8000c0a <__aeabi_fdiv+0xba>
 8000c74:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000c78:	f47f af5c 	bne.w	8000b34 <__aeabi_fmul+0x14c>
 8000c7c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000c80:	f47f af3c 	bne.w	8000afc <__aeabi_fmul+0x114>
 8000c84:	e75f      	b.n	8000b46 <__aeabi_fmul+0x15e>
 8000c86:	bf00      	nop

08000c88 <__gesf2>:
 8000c88:	f04f 3cff 	mov.w	ip, #4294967295
 8000c8c:	e006      	b.n	8000c9c <__cmpsf2+0x4>
 8000c8e:	bf00      	nop

08000c90 <__lesf2>:
 8000c90:	f04f 0c01 	mov.w	ip, #1
 8000c94:	e002      	b.n	8000c9c <__cmpsf2+0x4>
 8000c96:	bf00      	nop

08000c98 <__cmpsf2>:
 8000c98:	f04f 0c01 	mov.w	ip, #1
 8000c9c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ca0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ca4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ca8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cac:	bf18      	it	ne
 8000cae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb2:	d011      	beq.n	8000cd8 <__cmpsf2+0x40>
 8000cb4:	b001      	add	sp, #4
 8000cb6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000cba:	bf18      	it	ne
 8000cbc:	ea90 0f01 	teqne	r0, r1
 8000cc0:	bf58      	it	pl
 8000cc2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000cc6:	bf88      	it	hi
 8000cc8:	17c8      	asrhi	r0, r1, #31
 8000cca:	bf38      	it	cc
 8000ccc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000cd0:	bf18      	it	ne
 8000cd2:	f040 0001 	orrne.w	r0, r0, #1
 8000cd6:	4770      	bx	lr
 8000cd8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cdc:	d102      	bne.n	8000ce4 <__cmpsf2+0x4c>
 8000cde:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ce2:	d105      	bne.n	8000cf0 <__cmpsf2+0x58>
 8000ce4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ce8:	d1e4      	bne.n	8000cb4 <__cmpsf2+0x1c>
 8000cea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000cee:	d0e1      	beq.n	8000cb4 <__cmpsf2+0x1c>
 8000cf0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_cfrcmple>:
 8000cf8:	4684      	mov	ip, r0
 8000cfa:	4608      	mov	r0, r1
 8000cfc:	4661      	mov	r1, ip
 8000cfe:	e7ff      	b.n	8000d00 <__aeabi_cfcmpeq>

08000d00 <__aeabi_cfcmpeq>:
 8000d00:	b50f      	push	{r0, r1, r2, r3, lr}
 8000d02:	f7ff ffc9 	bl	8000c98 <__cmpsf2>
 8000d06:	2800      	cmp	r0, #0
 8000d08:	bf48      	it	mi
 8000d0a:	f110 0f00 	cmnmi.w	r0, #0
 8000d0e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000d10 <__aeabi_fcmpeq>:
 8000d10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d14:	f7ff fff4 	bl	8000d00 <__aeabi_cfcmpeq>
 8000d18:	bf0c      	ite	eq
 8000d1a:	2001      	moveq	r0, #1
 8000d1c:	2000      	movne	r0, #0
 8000d1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d22:	bf00      	nop

08000d24 <__aeabi_fcmplt>:
 8000d24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d28:	f7ff ffea 	bl	8000d00 <__aeabi_cfcmpeq>
 8000d2c:	bf34      	ite	cc
 8000d2e:	2001      	movcc	r0, #1
 8000d30:	2000      	movcs	r0, #0
 8000d32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d36:	bf00      	nop

08000d38 <__aeabi_fcmple>:
 8000d38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d3c:	f7ff ffe0 	bl	8000d00 <__aeabi_cfcmpeq>
 8000d40:	bf94      	ite	ls
 8000d42:	2001      	movls	r0, #1
 8000d44:	2000      	movhi	r0, #0
 8000d46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d4a:	bf00      	nop

08000d4c <__aeabi_fcmpge>:
 8000d4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d50:	f7ff ffd2 	bl	8000cf8 <__aeabi_cfrcmple>
 8000d54:	bf94      	ite	ls
 8000d56:	2001      	movls	r0, #1
 8000d58:	2000      	movhi	r0, #0
 8000d5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d5e:	bf00      	nop

08000d60 <__aeabi_fcmpgt>:
 8000d60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d64:	f7ff ffc8 	bl	8000cf8 <__aeabi_cfrcmple>
 8000d68:	bf34      	ite	cc
 8000d6a:	2001      	movcc	r0, #1
 8000d6c:	2000      	movcs	r0, #0
 8000d6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d72:	bf00      	nop

08000d74 <__aeabi_f2uiz>:
 8000d74:	0042      	lsls	r2, r0, #1
 8000d76:	d20e      	bcs.n	8000d96 <__aeabi_f2uiz+0x22>
 8000d78:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d7c:	d30b      	bcc.n	8000d96 <__aeabi_f2uiz+0x22>
 8000d7e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d82:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d86:	d409      	bmi.n	8000d9c <__aeabi_f2uiz+0x28>
 8000d88:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d90:	fa23 f002 	lsr.w	r0, r3, r2
 8000d94:	4770      	bx	lr
 8000d96:	f04f 0000 	mov.w	r0, #0
 8000d9a:	4770      	bx	lr
 8000d9c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000da0:	d101      	bne.n	8000da6 <__aeabi_f2uiz+0x32>
 8000da2:	0242      	lsls	r2, r0, #9
 8000da4:	d102      	bne.n	8000dac <__aeabi_f2uiz+0x38>
 8000da6:	f04f 30ff 	mov.w	r0, #4294967295
 8000daa:	4770      	bx	lr
 8000dac:	f04f 0000 	mov.w	r0, #0
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop

08000db4 <printMsg>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void printMsg( char *msg,...)
{
 8000db4:	b40f      	push	{r0, r1, r2, r3}
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b09c      	sub	sp, #112	; 0x70
 8000dba:	af00      	add	r7, sp, #0
	char buffer[100];

	va_list args;
	va_start(args, msg);
 8000dbc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000dc0:	607b      	str	r3, [r7, #4]
	vsprintf(buffer, msg, args);
 8000dc2:	f107 0308 	add.w	r3, r7, #8
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f005 f93c 	bl	8006048 <vsiprintf>

	for(int j=0; j<strlen(buffer); j++)
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000dd4:	e010      	b.n	8000df8 <printMsg+0x44>
	{
		USART1->DR = buffer[j];
 8000dd6:	f107 0208 	add.w	r2, r7, #8
 8000dda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ddc:	4413      	add	r3, r2
 8000dde:	781a      	ldrb	r2, [r3, #0]
 8000de0:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <printMsg+0x68>)
 8000de2:	605a      	str	r2, [r3, #4]
		while(!(USART1->SR & USART_SR_TXE));
 8000de4:	bf00      	nop
 8000de6:	4b0d      	ldr	r3, [pc, #52]	; (8000e1c <printMsg+0x68>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d0f9      	beq.n	8000de6 <printMsg+0x32>
	for(int j=0; j<strlen(buffer); j++)
 8000df2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000df4:	3301      	adds	r3, #1
 8000df6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000df8:	f107 0308 	add.w	r3, r7, #8
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff f9a7 	bl	8000150 <strlen>
 8000e02:	4602      	mov	r2, r0
 8000e04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e06:	429a      	cmp	r2, r3
 8000e08:	d8e5      	bhi.n	8000dd6 <printMsg+0x22>
	}
}
 8000e0a:	bf00      	nop
 8000e0c:	bf00      	nop
 8000e0e:	3770      	adds	r7, #112	; 0x70
 8000e10:	46bd      	mov	sp, r7
 8000e12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e16:	b004      	add	sp, #16
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	40013800 	.word	0x40013800

08000e20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b090      	sub	sp, #64	; 0x40
 8000e24:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e26:	f000 fe0b 	bl	8001a40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e2a:	f000 f8ff 	bl	800102c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e2e:	f000 fac7 	bl	80013c0 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000e32:	f000 f9d5 	bl	80011e0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000e36:	f000 fa21 	bl	800127c <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000e3a:	f000 fa6d 	bl	8001318 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000e3e:	f000 f945 	bl	80010cc <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000e42:	f000 fa93 	bl	800136c <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000e46:	f000 f97f 	bl	8001148 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  InitMBMaster(&MBMaster, &huart3, &htim4, &htim3, &htim2, 8, 9600, UART_WORDLENGTH_9B, UART_STOPBITS_1, UART_PARITY_EVEN,
 8000e4a:	2310      	movs	r3, #16
 8000e4c:	9309      	str	r3, [sp, #36]	; 0x24
 8000e4e:	4b68      	ldr	r3, [pc, #416]	; (8000ff0 <main+0x1d0>)
 8000e50:	9308      	str	r3, [sp, #32]
 8000e52:	2308      	movs	r3, #8
 8000e54:	9307      	str	r3, [sp, #28]
 8000e56:	4b66      	ldr	r3, [pc, #408]	; (8000ff0 <main+0x1d0>)
 8000e58:	9306      	str	r3, [sp, #24]
 8000e5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e5e:	9305      	str	r3, [sp, #20]
 8000e60:	2300      	movs	r3, #0
 8000e62:	9304      	str	r3, [sp, #16]
 8000e64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e68:	9303      	str	r3, [sp, #12]
 8000e6a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000e6e:	9302      	str	r3, [sp, #8]
 8000e70:	2308      	movs	r3, #8
 8000e72:	9301      	str	r3, [sp, #4]
 8000e74:	4b5f      	ldr	r3, [pc, #380]	; (8000ff4 <main+0x1d4>)
 8000e76:	9300      	str	r3, [sp, #0]
 8000e78:	4b5f      	ldr	r3, [pc, #380]	; (8000ff8 <main+0x1d8>)
 8000e7a:	4a60      	ldr	r2, [pc, #384]	; (8000ffc <main+0x1dc>)
 8000e7c:	4960      	ldr	r1, [pc, #384]	; (8001000 <main+0x1e0>)
 8000e7e:	4861      	ldr	r0, [pc, #388]	; (8001004 <main+0x1e4>)
 8000e80:	f004 f858 	bl	8004f34 <InitMBMaster>
		  RE_Pin_GPIO_Port, RE_Pin_Pin, DE_Pin_GPIO_Port, DE_Pin_Pin);

  HAL_ADCEx_Calibration_Start(&hadc1);
 8000e84:	4860      	ldr	r0, [pc, #384]	; (8001008 <main+0x1e8>)
 8000e86:	f001 fa8d 	bl	80023a4 <HAL_ADCEx_Calibration_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(HAL_GPIO_ReadPin(WriteEnable_GPIO_Port, WriteEnable_Pin))
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	4858      	ldr	r0, [pc, #352]	; (8000ff0 <main+0x1d0>)
 8000e8e:	f001 ff65 	bl	8002d5c <HAL_GPIO_ReadPin>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d03c      	beq.n	8000f12 <main+0xf2>
	  {
		  // Write coils
		  uint8_t coils[3]={1,1,1};
 8000e98:	4a5c      	ldr	r2, [pc, #368]	; (800100c <main+0x1ec>)
 8000e9a:	f107 030c 	add.w	r3, r7, #12
 8000e9e:	6812      	ldr	r2, [r2, #0]
 8000ea0:	4611      	mov	r1, r2
 8000ea2:	8019      	strh	r1, [r3, #0]
 8000ea4:	3302      	adds	r3, #2
 8000ea6:	0c12      	lsrs	r2, r2, #16
 8000ea8:	701a      	strb	r2, [r3, #0]

		  coils[0] = HAL_GPIO_ReadPin(DI1_GPIO_Port, DI1_Pin);
 8000eaa:	2120      	movs	r1, #32
 8000eac:	4850      	ldr	r0, [pc, #320]	; (8000ff0 <main+0x1d0>)
 8000eae:	f001 ff55 	bl	8002d5c <HAL_GPIO_ReadPin>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	733b      	strb	r3, [r7, #12]
		  coils[1] = HAL_GPIO_ReadPin(DI2_GPIO_Port, DI2_Pin);
 8000eb6:	2140      	movs	r1, #64	; 0x40
 8000eb8:	484d      	ldr	r0, [pc, #308]	; (8000ff0 <main+0x1d0>)
 8000eba:	f001 ff4f 	bl	8002d5c <HAL_GPIO_ReadPin>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	737b      	strb	r3, [r7, #13]
		  coils[2] = HAL_GPIO_ReadPin(DI3_GPIO_Port, DI3_Pin);
 8000ec2:	2180      	movs	r1, #128	; 0x80
 8000ec4:	484a      	ldr	r0, [pc, #296]	; (8000ff0 <main+0x1d0>)
 8000ec6:	f001 ff49 	bl	8002d5c <HAL_GPIO_ReadPin>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	73bb      	strb	r3, [r7, #14]

		  //WriteCoils(&MBMaster, 1, 2, coils);

		  // Write registers
		  HAL_ADC_Start(&hadc1);
 8000ece:	484e      	ldr	r0, [pc, #312]	; (8001008 <main+0x1e8>)
 8000ed0:	f000 ff14 	bl	8001cfc <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 200);
 8000ed4:	21c8      	movs	r1, #200	; 0xc8
 8000ed6:	484c      	ldr	r0, [pc, #304]	; (8001008 <main+0x1e8>)
 8000ed8:	f000 ffbe 	bl	8001e58 <HAL_ADC_PollForConversion>

		  uint16_t regsToWrite[1] = { (uint16_t)HAL_ADC_GetValue(&hadc1) * (65535/4095)};
 8000edc:	484a      	ldr	r0, [pc, #296]	; (8001008 <main+0x1e8>)
 8000ede:	f001 f8c1 	bl	8002064 <HAL_ADC_GetValue>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	011b      	lsls	r3, r3, #4
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	813b      	strh	r3, [r7, #8]


		  if(WriteRegisters(&MBMaster, 1, 2, regsToWrite))
 8000eec:	f107 0308 	add.w	r3, r7, #8
 8000ef0:	2202      	movs	r2, #2
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	4843      	ldr	r0, [pc, #268]	; (8001004 <main+0x1e4>)
 8000ef6:	f004 fe03 	bl	8005b00 <WriteRegisters>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d004      	beq.n	8000f0a <main+0xea>
		  {
			  printMsg("PWM Ton:%d\n", regsToWrite[0]);
 8000f00:	893b      	ldrh	r3, [r7, #8]
 8000f02:	4619      	mov	r1, r3
 8000f04:	4842      	ldr	r0, [pc, #264]	; (8001010 <main+0x1f0>)
 8000f06:	f7ff ff55 	bl	8000db4 <printMsg>
		  }

		  HAL_Delay(500);
 8000f0a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f0e:	f000 fdf9 	bl	8001b04 <HAL_Delay>
	  else
	  {

	  }

	  if(HAL_GPIO_ReadPin(ReadEnable_GPIO_Port, ReadEnable_Pin))
 8000f12:	2180      	movs	r1, #128	; 0x80
 8000f14:	483f      	ldr	r0, [pc, #252]	; (8001014 <main+0x1f4>)
 8000f16:	f001 ff21 	bl	8002d5c <HAL_GPIO_ReadPin>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d0b4      	beq.n	8000e8a <main+0x6a>
	  {
			// Read coils
			uint8_t* coils = ReadCoils(&MBMaster, 1, 0, 2);
 8000f20:	2302      	movs	r3, #2
 8000f22:	2200      	movs	r2, #0
 8000f24:	2101      	movs	r1, #1
 8000f26:	4837      	ldr	r0, [pc, #220]	; (8001004 <main+0x1e4>)
 8000f28:	f004 fb66 	bl	80055f8 <ReadCoils>
 8000f2c:	6178      	str	r0, [r7, #20]

			// DI1
			if((*coils) == 1)
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d105      	bne.n	8000f42 <main+0x122>
				HAL_GPIO_WritePin(DO1_GPIO_Port, DO1_Pin, GPIO_PIN_RESET);
 8000f36:	2200      	movs	r2, #0
 8000f38:	2108      	movs	r1, #8
 8000f3a:	4836      	ldr	r0, [pc, #216]	; (8001014 <main+0x1f4>)
 8000f3c:	f001 ff25 	bl	8002d8a <HAL_GPIO_WritePin>
 8000f40:	e004      	b.n	8000f4c <main+0x12c>
			else
				HAL_GPIO_WritePin(DO1_GPIO_Port, DO1_Pin, GPIO_PIN_SET);
 8000f42:	2201      	movs	r2, #1
 8000f44:	2108      	movs	r1, #8
 8000f46:	4833      	ldr	r0, [pc, #204]	; (8001014 <main+0x1f4>)
 8000f48:	f001 ff1f 	bl	8002d8a <HAL_GPIO_WritePin>

			// DI2
			if(*(coils + 1) == 1)
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d105      	bne.n	8000f62 <main+0x142>
				HAL_GPIO_WritePin(DO2_GPIO_Port, DO2_Pin, GPIO_PIN_RESET);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2110      	movs	r1, #16
 8000f5a:	482e      	ldr	r0, [pc, #184]	; (8001014 <main+0x1f4>)
 8000f5c:	f001 ff15 	bl	8002d8a <HAL_GPIO_WritePin>
 8000f60:	e004      	b.n	8000f6c <main+0x14c>
			else
				HAL_GPIO_WritePin(DO2_GPIO_Port, DO2_Pin, GPIO_PIN_SET);
 8000f62:	2201      	movs	r2, #1
 8000f64:	2110      	movs	r1, #16
 8000f66:	482b      	ldr	r0, [pc, #172]	; (8001014 <main+0x1f4>)
 8000f68:	f001 ff0f 	bl	8002d8a <HAL_GPIO_WritePin>

			printMsg("-------------------------------------\n");
 8000f6c:	482a      	ldr	r0, [pc, #168]	; (8001018 <main+0x1f8>)
 8000f6e:	f7ff ff21 	bl	8000db4 <printMsg>
			printMsg("->DI1 (switch 1):%d\n", *coils);
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	4619      	mov	r1, r3
 8000f78:	4828      	ldr	r0, [pc, #160]	; (800101c <main+0x1fc>)
 8000f7a:	f7ff ff1b 	bl	8000db4 <printMsg>
			printMsg("->DI2 (switch 2):%d\n", *(coils+1));
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	3301      	adds	r3, #1
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	4619      	mov	r1, r3
 8000f86:	4826      	ldr	r0, [pc, #152]	; (8001020 <main+0x200>)
 8000f88:	f7ff ff14 	bl	8000db4 <printMsg>

			free(coils);
 8000f8c:	6978      	ldr	r0, [r7, #20]
 8000f8e:	f004 ff71 	bl	8005e74 <free>

			HAL_Delay(500);
 8000f92:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f96:	f000 fdb5 	bl	8001b04 <HAL_Delay>

			// Read registers

			uint16_t registers[4];

			ReadRegisters(&MBMaster, 1, 0, 2, registers);
 8000f9a:	463b      	mov	r3, r7
 8000f9c:	9300      	str	r3, [sp, #0]
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	4817      	ldr	r0, [pc, #92]	; (8001004 <main+0x1e4>)
 8000fa6:	f004 fc9f 	bl	80058e8 <ReadRegisters>

			uint16_t ambTemp = BytesToReg(registers[1], registers[0]);
 8000faa:	887b      	ldrh	r3, [r7, #2]
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	883a      	ldrh	r2, [r7, #0]
 8000fb0:	b2d2      	uxtb	r2, r2
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f004 f971 	bl	800529c <BytesToReg>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	827b      	strh	r3, [r7, #18]
			uint16_t procTemp = BytesToReg(registers[3], registers[2]);
 8000fbe:	88fb      	ldrh	r3, [r7, #6]
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	88ba      	ldrh	r2, [r7, #4]
 8000fc4:	b2d2      	uxtb	r2, r2
 8000fc6:	4611      	mov	r1, r2
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f004 f967 	bl	800529c <BytesToReg>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	823b      	strh	r3, [r7, #16]

			printMsg("->Ambient temperature:%d Celcius\n", ambTemp);
 8000fd2:	8a7b      	ldrh	r3, [r7, #18]
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4813      	ldr	r0, [pc, #76]	; (8001024 <main+0x204>)
 8000fd8:	f7ff feec 	bl	8000db4 <printMsg>
			printMsg("->STM32 temperature:%d Celcius\n", procTemp);
 8000fdc:	8a3b      	ldrh	r3, [r7, #16]
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4811      	ldr	r0, [pc, #68]	; (8001028 <main+0x208>)
 8000fe2:	f7ff fee7 	bl	8000db4 <printMsg>
			HAL_Delay(500);
 8000fe6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fea:	f000 fd8b 	bl	8001b04 <HAL_Delay>
	  if(HAL_GPIO_ReadPin(WriteEnable_GPIO_Port, WriteEnable_Pin))
 8000fee:	e74c      	b.n	8000e8a <main+0x6a>
 8000ff0:	40010c00 	.word	0x40010c00
 8000ff4:	200003b0 	.word	0x200003b0
 8000ff8:	20000128 	.word	0x20000128
 8000ffc:	2000009c 	.word	0x2000009c
 8001000:	200000e4 	.word	0x200000e4
 8001004:	200001a0 	.word	0x200001a0
 8001008:	20000170 	.word	0x20000170
 800100c:	080067c8 	.word	0x080067c8
 8001010:	08006720 	.word	0x08006720
 8001014:	40010800 	.word	0x40010800
 8001018:	0800672c 	.word	0x0800672c
 800101c:	08006754 	.word	0x08006754
 8001020:	0800676c 	.word	0x0800676c
 8001024:	08006784 	.word	0x08006784
 8001028:	080067a8 	.word	0x080067a8

0800102c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b094      	sub	sp, #80	; 0x50
 8001030:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001032:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001036:	2228      	movs	r2, #40	; 0x28
 8001038:	2100      	movs	r1, #0
 800103a:	4618      	mov	r0, r3
 800103c:	f004 ff30 	bl	8005ea0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800105c:	2302      	movs	r3, #2
 800105e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001060:	2301      	movs	r3, #1
 8001062:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001064:	2310      	movs	r3, #16
 8001066:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001068:	2300      	movs	r3, #0
 800106a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800106c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001070:	4618      	mov	r0, r3
 8001072:	f001 febb 	bl	8002dec <HAL_RCC_OscConfig>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800107c:	f000 fa56 	bl	800152c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001080:	230f      	movs	r3, #15
 8001082:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001084:	2300      	movs	r3, #0
 8001086:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001088:	2300      	movs	r3, #0
 800108a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800108c:	2300      	movs	r3, #0
 800108e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001090:	2300      	movs	r3, #0
 8001092:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	2100      	movs	r1, #0
 800109a:	4618      	mov	r0, r3
 800109c:	f002 f926 	bl	80032ec <HAL_RCC_ClockConfig>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80010a6:	f000 fa41 	bl	800152c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010aa:	2302      	movs	r3, #2
 80010ac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	4618      	mov	r0, r3
 80010b6:	f002 fab3 	bl	8003620 <HAL_RCCEx_PeriphCLKConfig>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80010c0:	f000 fa34 	bl	800152c <Error_Handler>
  }
}
 80010c4:	bf00      	nop
 80010c6:	3750      	adds	r7, #80	; 0x50
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80010dc:	4b18      	ldr	r3, [pc, #96]	; (8001140 <MX_ADC1_Init+0x74>)
 80010de:	4a19      	ldr	r2, [pc, #100]	; (8001144 <MX_ADC1_Init+0x78>)
 80010e0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010e2:	4b17      	ldr	r3, [pc, #92]	; (8001140 <MX_ADC1_Init+0x74>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010e8:	4b15      	ldr	r3, [pc, #84]	; (8001140 <MX_ADC1_Init+0x74>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010ee:	4b14      	ldr	r3, [pc, #80]	; (8001140 <MX_ADC1_Init+0x74>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010f4:	4b12      	ldr	r3, [pc, #72]	; (8001140 <MX_ADC1_Init+0x74>)
 80010f6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80010fa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010fc:	4b10      	ldr	r3, [pc, #64]	; (8001140 <MX_ADC1_Init+0x74>)
 80010fe:	2200      	movs	r2, #0
 8001100:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001102:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <MX_ADC1_Init+0x74>)
 8001104:	2201      	movs	r2, #1
 8001106:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001108:	480d      	ldr	r0, [pc, #52]	; (8001140 <MX_ADC1_Init+0x74>)
 800110a:	f000 fd1f 	bl	8001b4c <HAL_ADC_Init>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001114:	f000 fa0a 	bl	800152c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001118:	2309      	movs	r3, #9
 800111a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800111c:	2301      	movs	r3, #1
 800111e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001120:	2300      	movs	r3, #0
 8001122:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001124:	1d3b      	adds	r3, r7, #4
 8001126:	4619      	mov	r1, r3
 8001128:	4805      	ldr	r0, [pc, #20]	; (8001140 <MX_ADC1_Init+0x74>)
 800112a:	f000 ffa7 	bl	800207c <HAL_ADC_ConfigChannel>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001134:	f000 f9fa 	bl	800152c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001138:	bf00      	nop
 800113a:	3710      	adds	r7, #16
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20000170 	.word	0x20000170
 8001144:	40012400 	.word	0x40012400

08001148 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800114e:	f107 0308 	add.w	r3, r7, #8
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]
 800115a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800115c:	463b      	mov	r3, r7
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001164:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <MX_TIM2_Init+0x94>)
 8001166:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800116a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800116c:	4b1b      	ldr	r3, [pc, #108]	; (80011dc <MX_TIM2_Init+0x94>)
 800116e:	2200      	movs	r2, #0
 8001170:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001172:	4b1a      	ldr	r3, [pc, #104]	; (80011dc <MX_TIM2_Init+0x94>)
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001178:	4b18      	ldr	r3, [pc, #96]	; (80011dc <MX_TIM2_Init+0x94>)
 800117a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800117e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001180:	4b16      	ldr	r3, [pc, #88]	; (80011dc <MX_TIM2_Init+0x94>)
 8001182:	2200      	movs	r2, #0
 8001184:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001186:	4b15      	ldr	r3, [pc, #84]	; (80011dc <MX_TIM2_Init+0x94>)
 8001188:	2200      	movs	r2, #0
 800118a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800118c:	4813      	ldr	r0, [pc, #76]	; (80011dc <MX_TIM2_Init+0x94>)
 800118e:	f002 fbc1 	bl	8003914 <HAL_TIM_Base_Init>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001198:	f000 f9c8 	bl	800152c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800119c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011a2:	f107 0308 	add.w	r3, r7, #8
 80011a6:	4619      	mov	r1, r3
 80011a8:	480c      	ldr	r0, [pc, #48]	; (80011dc <MX_TIM2_Init+0x94>)
 80011aa:	f002 fddf 	bl	8003d6c <HAL_TIM_ConfigClockSource>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80011b4:	f000 f9ba 	bl	800152c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011b8:	2300      	movs	r3, #0
 80011ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011bc:	2300      	movs	r3, #0
 80011be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011c0:	463b      	mov	r3, r7
 80011c2:	4619      	mov	r1, r3
 80011c4:	4805      	ldr	r0, [pc, #20]	; (80011dc <MX_TIM2_Init+0x94>)
 80011c6:	f002 ffbf 	bl	8004148 <HAL_TIMEx_MasterConfigSynchronization>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80011d0:	f000 f9ac 	bl	800152c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011d4:	bf00      	nop
 80011d6:	3718      	adds	r7, #24
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	200003b0 	.word	0x200003b0

080011e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011e6:	f107 0308 	add.w	r3, r7, #8
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]
 80011f0:	609a      	str	r2, [r3, #8]
 80011f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f4:	463b      	mov	r3, r7
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011fc:	4b1d      	ldr	r3, [pc, #116]	; (8001274 <MX_TIM3_Init+0x94>)
 80011fe:	4a1e      	ldr	r2, [pc, #120]	; (8001278 <MX_TIM3_Init+0x98>)
 8001200:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001202:	4b1c      	ldr	r3, [pc, #112]	; (8001274 <MX_TIM3_Init+0x94>)
 8001204:	2200      	movs	r2, #0
 8001206:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001208:	4b1a      	ldr	r3, [pc, #104]	; (8001274 <MX_TIM3_Init+0x94>)
 800120a:	2200      	movs	r2, #0
 800120c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800120e:	4b19      	ldr	r3, [pc, #100]	; (8001274 <MX_TIM3_Init+0x94>)
 8001210:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001214:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001216:	4b17      	ldr	r3, [pc, #92]	; (8001274 <MX_TIM3_Init+0x94>)
 8001218:	2200      	movs	r2, #0
 800121a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800121c:	4b15      	ldr	r3, [pc, #84]	; (8001274 <MX_TIM3_Init+0x94>)
 800121e:	2200      	movs	r2, #0
 8001220:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001222:	4814      	ldr	r0, [pc, #80]	; (8001274 <MX_TIM3_Init+0x94>)
 8001224:	f002 fb76 	bl	8003914 <HAL_TIM_Base_Init>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800122e:	f000 f97d 	bl	800152c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001232:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001236:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001238:	f107 0308 	add.w	r3, r7, #8
 800123c:	4619      	mov	r1, r3
 800123e:	480d      	ldr	r0, [pc, #52]	; (8001274 <MX_TIM3_Init+0x94>)
 8001240:	f002 fd94 	bl	8003d6c <HAL_TIM_ConfigClockSource>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800124a:	f000 f96f 	bl	800152c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800124e:	2300      	movs	r3, #0
 8001250:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001252:	2300      	movs	r3, #0
 8001254:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001256:	463b      	mov	r3, r7
 8001258:	4619      	mov	r1, r3
 800125a:	4806      	ldr	r0, [pc, #24]	; (8001274 <MX_TIM3_Init+0x94>)
 800125c:	f002 ff74 	bl	8004148 <HAL_TIMEx_MasterConfigSynchronization>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001266:	f000 f961 	bl	800152c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800126a:	bf00      	nop
 800126c:	3718      	adds	r7, #24
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000128 	.word	0x20000128
 8001278:	40000400 	.word	0x40000400

0800127c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001282:	f107 0308 	add.w	r3, r7, #8
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001290:	463b      	mov	r3, r7
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001298:	4b1d      	ldr	r3, [pc, #116]	; (8001310 <MX_TIM4_Init+0x94>)
 800129a:	4a1e      	ldr	r2, [pc, #120]	; (8001314 <MX_TIM4_Init+0x98>)
 800129c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800129e:	4b1c      	ldr	r3, [pc, #112]	; (8001310 <MX_TIM4_Init+0x94>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a4:	4b1a      	ldr	r3, [pc, #104]	; (8001310 <MX_TIM4_Init+0x94>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80012aa:	4b19      	ldr	r3, [pc, #100]	; (8001310 <MX_TIM4_Init+0x94>)
 80012ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012b0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b2:	4b17      	ldr	r3, [pc, #92]	; (8001310 <MX_TIM4_Init+0x94>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b8:	4b15      	ldr	r3, [pc, #84]	; (8001310 <MX_TIM4_Init+0x94>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80012be:	4814      	ldr	r0, [pc, #80]	; (8001310 <MX_TIM4_Init+0x94>)
 80012c0:	f002 fb28 	bl	8003914 <HAL_TIM_Base_Init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80012ca:	f000 f92f 	bl	800152c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80012d4:	f107 0308 	add.w	r3, r7, #8
 80012d8:	4619      	mov	r1, r3
 80012da:	480d      	ldr	r0, [pc, #52]	; (8001310 <MX_TIM4_Init+0x94>)
 80012dc:	f002 fd46 	bl	8003d6c <HAL_TIM_ConfigClockSource>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80012e6:	f000 f921 	bl	800152c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ea:	2300      	movs	r3, #0
 80012ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ee:	2300      	movs	r3, #0
 80012f0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012f2:	463b      	mov	r3, r7
 80012f4:	4619      	mov	r1, r3
 80012f6:	4806      	ldr	r0, [pc, #24]	; (8001310 <MX_TIM4_Init+0x94>)
 80012f8:	f002 ff26 	bl	8004148 <HAL_TIMEx_MasterConfigSynchronization>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001302:	f000 f913 	bl	800152c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001306:	bf00      	nop
 8001308:	3718      	adds	r7, #24
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	2000009c 	.word	0x2000009c
 8001314:	40000800 	.word	0x40000800

08001318 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800131c:	4b11      	ldr	r3, [pc, #68]	; (8001364 <MX_USART1_UART_Init+0x4c>)
 800131e:	4a12      	ldr	r2, [pc, #72]	; (8001368 <MX_USART1_UART_Init+0x50>)
 8001320:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001322:	4b10      	ldr	r3, [pc, #64]	; (8001364 <MX_USART1_UART_Init+0x4c>)
 8001324:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001328:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800132a:	4b0e      	ldr	r3, [pc, #56]	; (8001364 <MX_USART1_UART_Init+0x4c>)
 800132c:	2200      	movs	r2, #0
 800132e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001330:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <MX_USART1_UART_Init+0x4c>)
 8001332:	2200      	movs	r2, #0
 8001334:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001336:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <MX_USART1_UART_Init+0x4c>)
 8001338:	2200      	movs	r2, #0
 800133a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800133c:	4b09      	ldr	r3, [pc, #36]	; (8001364 <MX_USART1_UART_Init+0x4c>)
 800133e:	220c      	movs	r2, #12
 8001340:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001342:	4b08      	ldr	r3, [pc, #32]	; (8001364 <MX_USART1_UART_Init+0x4c>)
 8001344:	2200      	movs	r2, #0
 8001346:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001348:	4b06      	ldr	r3, [pc, #24]	; (8001364 <MX_USART1_UART_Init+0x4c>)
 800134a:	2200      	movs	r2, #0
 800134c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800134e:	4805      	ldr	r0, [pc, #20]	; (8001364 <MX_USART1_UART_Init+0x4c>)
 8001350:	f002 ff6a 	bl	8004228 <HAL_UART_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800135a:	f000 f8e7 	bl	800152c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	2000036c 	.word	0x2000036c
 8001368:	40013800 	.word	0x40013800

0800136c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001370:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <MX_USART3_UART_Init+0x4c>)
 8001372:	4a12      	ldr	r2, [pc, #72]	; (80013bc <MX_USART3_UART_Init+0x50>)
 8001374:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001376:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <MX_USART3_UART_Init+0x4c>)
 8001378:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800137c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800137e:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <MX_USART3_UART_Init+0x4c>)
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001384:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <MX_USART3_UART_Init+0x4c>)
 8001386:	2200      	movs	r2, #0
 8001388:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800138a:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <MX_USART3_UART_Init+0x4c>)
 800138c:	2200      	movs	r2, #0
 800138e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001390:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <MX_USART3_UART_Init+0x4c>)
 8001392:	220c      	movs	r2, #12
 8001394:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001396:	4b08      	ldr	r3, [pc, #32]	; (80013b8 <MX_USART3_UART_Init+0x4c>)
 8001398:	2200      	movs	r2, #0
 800139a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800139c:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <MX_USART3_UART_Init+0x4c>)
 800139e:	2200      	movs	r2, #0
 80013a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013a2:	4805      	ldr	r0, [pc, #20]	; (80013b8 <MX_USART3_UART_Init+0x4c>)
 80013a4:	f002 ff40 	bl	8004228 <HAL_UART_Init>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80013ae:	f000 f8bd 	bl	800152c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	200000e4 	.word	0x200000e4
 80013bc:	40004800 	.word	0x40004800

080013c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c6:	f107 0308 	add.w	r3, r7, #8
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
 80013d2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d4:	4b37      	ldr	r3, [pc, #220]	; (80014b4 <MX_GPIO_Init+0xf4>)
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	4a36      	ldr	r2, [pc, #216]	; (80014b4 <MX_GPIO_Init+0xf4>)
 80013da:	f043 0304 	orr.w	r3, r3, #4
 80013de:	6193      	str	r3, [r2, #24]
 80013e0:	4b34      	ldr	r3, [pc, #208]	; (80014b4 <MX_GPIO_Init+0xf4>)
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	f003 0304 	and.w	r3, r3, #4
 80013e8:	607b      	str	r3, [r7, #4]
 80013ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ec:	4b31      	ldr	r3, [pc, #196]	; (80014b4 <MX_GPIO_Init+0xf4>)
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	4a30      	ldr	r2, [pc, #192]	; (80014b4 <MX_GPIO_Init+0xf4>)
 80013f2:	f043 0308 	orr.w	r3, r3, #8
 80013f6:	6193      	str	r3, [r2, #24]
 80013f8:	4b2e      	ldr	r3, [pc, #184]	; (80014b4 <MX_GPIO_Init+0xf4>)
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	f003 0308 	and.w	r3, r3, #8
 8001400:	603b      	str	r3, [r7, #0]
 8001402:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DO1_Pin|DO2_Pin, GPIO_PIN_RESET);
 8001404:	2200      	movs	r2, #0
 8001406:	2118      	movs	r1, #24
 8001408:	482b      	ldr	r0, [pc, #172]	; (80014b8 <MX_GPIO_Init+0xf8>)
 800140a:	f001 fcbe 	bl	8002d8a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RE_Pin_Pin|DE_Pin_Pin|DI2_Pin, GPIO_PIN_RESET);
 800140e:	2200      	movs	r2, #0
 8001410:	2158      	movs	r1, #88	; 0x58
 8001412:	482a      	ldr	r0, [pc, #168]	; (80014bc <MX_GPIO_Init+0xfc>)
 8001414:	f001 fcb9 	bl	8002d8a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DO1_Pin DO2_Pin */
  GPIO_InitStruct.Pin = DO1_Pin|DO2_Pin;
 8001418:	2318      	movs	r3, #24
 800141a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141c:	2301      	movs	r3, #1
 800141e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001424:	2302      	movs	r3, #2
 8001426:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001428:	f107 0308 	add.w	r3, r7, #8
 800142c:	4619      	mov	r1, r3
 800142e:	4822      	ldr	r0, [pc, #136]	; (80014b8 <MX_GPIO_Init+0xf8>)
 8001430:	f001 fa54 	bl	80028dc <HAL_GPIO_Init>

  /*Configure GPIO pin : ReadEnable_Pin */
  GPIO_InitStruct.Pin = ReadEnable_Pin;
 8001434:	2380      	movs	r3, #128	; 0x80
 8001436:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001438:	2300      	movs	r3, #0
 800143a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ReadEnable_GPIO_Port, &GPIO_InitStruct);
 8001440:	f107 0308 	add.w	r3, r7, #8
 8001444:	4619      	mov	r1, r3
 8001446:	481c      	ldr	r0, [pc, #112]	; (80014b8 <MX_GPIO_Init+0xf8>)
 8001448:	f001 fa48 	bl	80028dc <HAL_GPIO_Init>

  /*Configure GPIO pins : WriteEnable_Pin DI1_Pin DI3_Pin */
  GPIO_InitStruct.Pin = WriteEnable_Pin|DI1_Pin|DI3_Pin;
 800144c:	23a1      	movs	r3, #161	; 0xa1
 800144e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001450:	2300      	movs	r3, #0
 8001452:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001458:	f107 0308 	add.w	r3, r7, #8
 800145c:	4619      	mov	r1, r3
 800145e:	4817      	ldr	r0, [pc, #92]	; (80014bc <MX_GPIO_Init+0xfc>)
 8001460:	f001 fa3c 	bl	80028dc <HAL_GPIO_Init>

  /*Configure GPIO pin : SENT_Pin */
  GPIO_InitStruct.Pin = SENT_Pin;
 8001464:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001468:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800146a:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <MX_GPIO_Init+0x100>)
 800146c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800146e:	2302      	movs	r3, #2
 8001470:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SENT_GPIO_Port, &GPIO_InitStruct);
 8001472:	f107 0308 	add.w	r3, r7, #8
 8001476:	4619      	mov	r1, r3
 8001478:	480f      	ldr	r0, [pc, #60]	; (80014b8 <MX_GPIO_Init+0xf8>)
 800147a:	f001 fa2f 	bl	80028dc <HAL_GPIO_Init>

  /*Configure GPIO pins : RE_Pin_Pin DE_Pin_Pin DI2_Pin */
  GPIO_InitStruct.Pin = RE_Pin_Pin|DE_Pin_Pin|DI2_Pin;
 800147e:	2358      	movs	r3, #88	; 0x58
 8001480:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001482:	2301      	movs	r3, #1
 8001484:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148a:	2302      	movs	r3, #2
 800148c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800148e:	f107 0308 	add.w	r3, r7, #8
 8001492:	4619      	mov	r1, r3
 8001494:	4809      	ldr	r0, [pc, #36]	; (80014bc <MX_GPIO_Init+0xfc>)
 8001496:	f001 fa21 	bl	80028dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 800149a:	2200      	movs	r2, #0
 800149c:	2103      	movs	r1, #3
 800149e:	2028      	movs	r0, #40	; 0x28
 80014a0:	f001 f927 	bl	80026f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014a4:	2028      	movs	r0, #40	; 0x28
 80014a6:	f001 f940 	bl	800272a <HAL_NVIC_EnableIRQ>

}
 80014aa:	bf00      	nop
 80014ac:	3718      	adds	r7, #24
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40021000 	.word	0x40021000
 80014b8:	40010800 	.word	0x40010800
 80014bc:	40010c00 	.word	0x40010c00
 80014c0:	10110000 	.word	0x10110000

080014c4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	MBMaster_HAL_UART_RxCpltCallback(huart, &MBMaster);
 80014cc:	4903      	ldr	r1, [pc, #12]	; (80014dc <HAL_UART_RxCpltCallback+0x18>)
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f003 fdae 	bl	8005030 <MBMaster_HAL_UART_RxCpltCallback>
}
 80014d4:	bf00      	nop
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	200001a0 	.word	0x200001a0

080014e0 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	MBUnit_HAL_UART_ErrorCallback(huart, &MBMaster);
 80014e8:	4903      	ldr	r1, [pc, #12]	; (80014f8 <HAL_UART_ErrorCallback+0x18>)
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f003 fe15 	bl	800511a <MBUnit_HAL_UART_ErrorCallback>
}
 80014f0:	bf00      	nop
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	200001a0 	.word	0x200001a0

080014fc <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
	MBMaster_HAL_TIM_PeriodElapsedCallback(htim, &MBMaster);
 8001504:	4903      	ldr	r1, [pc, #12]	; (8001514 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f003 fe33 	bl	8005172 <MBMaster_HAL_TIM_PeriodElapsedCallback>
}
 800150c:	bf00      	nop
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	200001a0 	.word	0x200001a0

08001518 <HAL_GPIO_EXTI_Callback>:
	MBUnit_HAL_TIM_ErrorCallback(htim, &MBMaster);
}


void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	80fb      	strh	r3, [r7, #6]


}
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	bc80      	pop	{r7}
 800152a:	4770      	bx	lr

0800152c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001530:	b672      	cpsid	i
}
 8001532:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001534:	e7fe      	b.n	8001534 <Error_Handler+0x8>
	...

08001538 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800153e:	4b15      	ldr	r3, [pc, #84]	; (8001594 <HAL_MspInit+0x5c>)
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	4a14      	ldr	r2, [pc, #80]	; (8001594 <HAL_MspInit+0x5c>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	6193      	str	r3, [r2, #24]
 800154a:	4b12      	ldr	r3, [pc, #72]	; (8001594 <HAL_MspInit+0x5c>)
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001556:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <HAL_MspInit+0x5c>)
 8001558:	69db      	ldr	r3, [r3, #28]
 800155a:	4a0e      	ldr	r2, [pc, #56]	; (8001594 <HAL_MspInit+0x5c>)
 800155c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001560:	61d3      	str	r3, [r2, #28]
 8001562:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <HAL_MspInit+0x5c>)
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156a:	607b      	str	r3, [r7, #4]
 800156c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800156e:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <HAL_MspInit+0x60>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	4a04      	ldr	r2, [pc, #16]	; (8001598 <HAL_MspInit+0x60>)
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800158a:	bf00      	nop
 800158c:	3714      	adds	r7, #20
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr
 8001594:	40021000 	.word	0x40021000
 8001598:	40010000 	.word	0x40010000

0800159c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b088      	sub	sp, #32
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a4:	f107 0310 	add.w	r3, r7, #16
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a14      	ldr	r2, [pc, #80]	; (8001608 <HAL_ADC_MspInit+0x6c>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d121      	bne.n	8001600 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015bc:	4b13      	ldr	r3, [pc, #76]	; (800160c <HAL_ADC_MspInit+0x70>)
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	4a12      	ldr	r2, [pc, #72]	; (800160c <HAL_ADC_MspInit+0x70>)
 80015c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015c6:	6193      	str	r3, [r2, #24]
 80015c8:	4b10      	ldr	r3, [pc, #64]	; (800160c <HAL_ADC_MspInit+0x70>)
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d4:	4b0d      	ldr	r3, [pc, #52]	; (800160c <HAL_ADC_MspInit+0x70>)
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	4a0c      	ldr	r2, [pc, #48]	; (800160c <HAL_ADC_MspInit+0x70>)
 80015da:	f043 0308 	orr.w	r3, r3, #8
 80015de:	6193      	str	r3, [r2, #24]
 80015e0:	4b0a      	ldr	r3, [pc, #40]	; (800160c <HAL_ADC_MspInit+0x70>)
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	f003 0308 	and.w	r3, r3, #8
 80015e8:	60bb      	str	r3, [r7, #8]
 80015ea:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = PotMtr_Pin;
 80015ec:	2302      	movs	r3, #2
 80015ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015f0:	2303      	movs	r3, #3
 80015f2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(PotMtr_GPIO_Port, &GPIO_InitStruct);
 80015f4:	f107 0310 	add.w	r3, r7, #16
 80015f8:	4619      	mov	r1, r3
 80015fa:	4805      	ldr	r0, [pc, #20]	; (8001610 <HAL_ADC_MspInit+0x74>)
 80015fc:	f001 f96e 	bl	80028dc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001600:	bf00      	nop
 8001602:	3720      	adds	r7, #32
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40012400 	.word	0x40012400
 800160c:	40021000 	.word	0x40021000
 8001610:	40010c00 	.word	0x40010c00

08001614 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001624:	d114      	bne.n	8001650 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001626:	4b26      	ldr	r3, [pc, #152]	; (80016c0 <HAL_TIM_Base_MspInit+0xac>)
 8001628:	69db      	ldr	r3, [r3, #28]
 800162a:	4a25      	ldr	r2, [pc, #148]	; (80016c0 <HAL_TIM_Base_MspInit+0xac>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	61d3      	str	r3, [r2, #28]
 8001632:	4b23      	ldr	r3, [pc, #140]	; (80016c0 <HAL_TIM_Base_MspInit+0xac>)
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	617b      	str	r3, [r7, #20]
 800163c:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800163e:	2200      	movs	r2, #0
 8001640:	2100      	movs	r1, #0
 8001642:	201c      	movs	r0, #28
 8001644:	f001 f855 	bl	80026f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001648:	201c      	movs	r0, #28
 800164a:	f001 f86e 	bl	800272a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800164e:	e032      	b.n	80016b6 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a1b      	ldr	r2, [pc, #108]	; (80016c4 <HAL_TIM_Base_MspInit+0xb0>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d114      	bne.n	8001684 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800165a:	4b19      	ldr	r3, [pc, #100]	; (80016c0 <HAL_TIM_Base_MspInit+0xac>)
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	4a18      	ldr	r2, [pc, #96]	; (80016c0 <HAL_TIM_Base_MspInit+0xac>)
 8001660:	f043 0302 	orr.w	r3, r3, #2
 8001664:	61d3      	str	r3, [r2, #28]
 8001666:	4b16      	ldr	r3, [pc, #88]	; (80016c0 <HAL_TIM_Base_MspInit+0xac>)
 8001668:	69db      	ldr	r3, [r3, #28]
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	613b      	str	r3, [r7, #16]
 8001670:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8001672:	2200      	movs	r2, #0
 8001674:	2102      	movs	r1, #2
 8001676:	201d      	movs	r0, #29
 8001678:	f001 f83b 	bl	80026f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800167c:	201d      	movs	r0, #29
 800167e:	f001 f854 	bl	800272a <HAL_NVIC_EnableIRQ>
}
 8001682:	e018      	b.n	80016b6 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM4)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a0f      	ldr	r2, [pc, #60]	; (80016c8 <HAL_TIM_Base_MspInit+0xb4>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d113      	bne.n	80016b6 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800168e:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <HAL_TIM_Base_MspInit+0xac>)
 8001690:	69db      	ldr	r3, [r3, #28]
 8001692:	4a0b      	ldr	r2, [pc, #44]	; (80016c0 <HAL_TIM_Base_MspInit+0xac>)
 8001694:	f043 0304 	orr.w	r3, r3, #4
 8001698:	61d3      	str	r3, [r2, #28]
 800169a:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <HAL_TIM_Base_MspInit+0xac>)
 800169c:	69db      	ldr	r3, [r3, #28]
 800169e:	f003 0304 	and.w	r3, r3, #4
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 80016a6:	2200      	movs	r2, #0
 80016a8:	2101      	movs	r1, #1
 80016aa:	201e      	movs	r0, #30
 80016ac:	f001 f821 	bl	80026f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80016b0:	201e      	movs	r0, #30
 80016b2:	f001 f83a 	bl	800272a <HAL_NVIC_EnableIRQ>
}
 80016b6:	bf00      	nop
 80016b8:	3718      	adds	r7, #24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40021000 	.word	0x40021000
 80016c4:	40000400 	.word	0x40000400
 80016c8:	40000800 	.word	0x40000800

080016cc <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016dc:	d109      	bne.n	80016f2 <HAL_TIM_Base_MspDeInit+0x26>
  {
  /* USER CODE BEGIN TIM2_MspDeInit 0 */

  /* USER CODE END TIM2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM2_CLK_DISABLE();
 80016de:	4b15      	ldr	r3, [pc, #84]	; (8001734 <HAL_TIM_Base_MspDeInit+0x68>)
 80016e0:	69db      	ldr	r3, [r3, #28]
 80016e2:	4a14      	ldr	r2, [pc, #80]	; (8001734 <HAL_TIM_Base_MspDeInit+0x68>)
 80016e4:	f023 0301 	bic.w	r3, r3, #1
 80016e8:	61d3      	str	r3, [r2, #28]

    /* TIM2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(TIM2_IRQn);
 80016ea:	201c      	movs	r0, #28
 80016ec:	f001 f82b 	bl	8002746 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN TIM4_MspDeInit 1 */

  /* USER CODE END TIM4_MspDeInit 1 */
  }

}
 80016f0:	e01c      	b.n	800172c <HAL_TIM_Base_MspDeInit+0x60>
  else if(htim_base->Instance==TIM3)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a10      	ldr	r2, [pc, #64]	; (8001738 <HAL_TIM_Base_MspDeInit+0x6c>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d109      	bne.n	8001710 <HAL_TIM_Base_MspDeInit+0x44>
    __HAL_RCC_TIM3_CLK_DISABLE();
 80016fc:	4b0d      	ldr	r3, [pc, #52]	; (8001734 <HAL_TIM_Base_MspDeInit+0x68>)
 80016fe:	69db      	ldr	r3, [r3, #28]
 8001700:	4a0c      	ldr	r2, [pc, #48]	; (8001734 <HAL_TIM_Base_MspDeInit+0x68>)
 8001702:	f023 0302 	bic.w	r3, r3, #2
 8001706:	61d3      	str	r3, [r2, #28]
    HAL_NVIC_DisableIRQ(TIM3_IRQn);
 8001708:	201d      	movs	r0, #29
 800170a:	f001 f81c 	bl	8002746 <HAL_NVIC_DisableIRQ>
}
 800170e:	e00d      	b.n	800172c <HAL_TIM_Base_MspDeInit+0x60>
  else if(htim_base->Instance==TIM4)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a09      	ldr	r2, [pc, #36]	; (800173c <HAL_TIM_Base_MspDeInit+0x70>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d108      	bne.n	800172c <HAL_TIM_Base_MspDeInit+0x60>
    __HAL_RCC_TIM4_CLK_DISABLE();
 800171a:	4b06      	ldr	r3, [pc, #24]	; (8001734 <HAL_TIM_Base_MspDeInit+0x68>)
 800171c:	69db      	ldr	r3, [r3, #28]
 800171e:	4a05      	ldr	r2, [pc, #20]	; (8001734 <HAL_TIM_Base_MspDeInit+0x68>)
 8001720:	f023 0304 	bic.w	r3, r3, #4
 8001724:	61d3      	str	r3, [r2, #28]
    HAL_NVIC_DisableIRQ(TIM4_IRQn);
 8001726:	201e      	movs	r0, #30
 8001728:	f001 f80d 	bl	8002746 <HAL_NVIC_DisableIRQ>
}
 800172c:	bf00      	nop
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40021000 	.word	0x40021000
 8001738:	40000400 	.word	0x40000400
 800173c:	40000800 	.word	0x40000800

08001740 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b08a      	sub	sp, #40	; 0x28
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001748:	f107 0318 	add.w	r3, r7, #24
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a3c      	ldr	r2, [pc, #240]	; (800184c <HAL_UART_MspInit+0x10c>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d132      	bne.n	80017c6 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001760:	4b3b      	ldr	r3, [pc, #236]	; (8001850 <HAL_UART_MspInit+0x110>)
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	4a3a      	ldr	r2, [pc, #232]	; (8001850 <HAL_UART_MspInit+0x110>)
 8001766:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800176a:	6193      	str	r3, [r2, #24]
 800176c:	4b38      	ldr	r3, [pc, #224]	; (8001850 <HAL_UART_MspInit+0x110>)
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001774:	617b      	str	r3, [r7, #20]
 8001776:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001778:	4b35      	ldr	r3, [pc, #212]	; (8001850 <HAL_UART_MspInit+0x110>)
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	4a34      	ldr	r2, [pc, #208]	; (8001850 <HAL_UART_MspInit+0x110>)
 800177e:	f043 0304 	orr.w	r3, r3, #4
 8001782:	6193      	str	r3, [r2, #24]
 8001784:	4b32      	ldr	r3, [pc, #200]	; (8001850 <HAL_UART_MspInit+0x110>)
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	f003 0304 	and.w	r3, r3, #4
 800178c:	613b      	str	r3, [r7, #16]
 800178e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001790:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001794:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001796:	2302      	movs	r3, #2
 8001798:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800179a:	2303      	movs	r3, #3
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179e:	f107 0318 	add.w	r3, r7, #24
 80017a2:	4619      	mov	r1, r3
 80017a4:	482b      	ldr	r0, [pc, #172]	; (8001854 <HAL_UART_MspInit+0x114>)
 80017a6:	f001 f899 	bl	80028dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b0:	2300      	movs	r3, #0
 80017b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b8:	f107 0318 	add.w	r3, r7, #24
 80017bc:	4619      	mov	r1, r3
 80017be:	4825      	ldr	r0, [pc, #148]	; (8001854 <HAL_UART_MspInit+0x114>)
 80017c0:	f001 f88c 	bl	80028dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80017c4:	e03e      	b.n	8001844 <HAL_UART_MspInit+0x104>
  else if(huart->Instance==USART3)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a23      	ldr	r2, [pc, #140]	; (8001858 <HAL_UART_MspInit+0x118>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d139      	bne.n	8001844 <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART3_CLK_ENABLE();
 80017d0:	4b1f      	ldr	r3, [pc, #124]	; (8001850 <HAL_UART_MspInit+0x110>)
 80017d2:	69db      	ldr	r3, [r3, #28]
 80017d4:	4a1e      	ldr	r2, [pc, #120]	; (8001850 <HAL_UART_MspInit+0x110>)
 80017d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017da:	61d3      	str	r3, [r2, #28]
 80017dc:	4b1c      	ldr	r3, [pc, #112]	; (8001850 <HAL_UART_MspInit+0x110>)
 80017de:	69db      	ldr	r3, [r3, #28]
 80017e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e8:	4b19      	ldr	r3, [pc, #100]	; (8001850 <HAL_UART_MspInit+0x110>)
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	4a18      	ldr	r2, [pc, #96]	; (8001850 <HAL_UART_MspInit+0x110>)
 80017ee:	f043 0308 	orr.w	r3, r3, #8
 80017f2:	6193      	str	r3, [r2, #24]
 80017f4:	4b16      	ldr	r3, [pc, #88]	; (8001850 <HAL_UART_MspInit+0x110>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	f003 0308 	and.w	r3, r3, #8
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001800:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001804:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001806:	2302      	movs	r3, #2
 8001808:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800180a:	2303      	movs	r3, #3
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180e:	f107 0318 	add.w	r3, r7, #24
 8001812:	4619      	mov	r1, r3
 8001814:	4811      	ldr	r0, [pc, #68]	; (800185c <HAL_UART_MspInit+0x11c>)
 8001816:	f001 f861 	bl	80028dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800181a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800181e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001820:	2300      	movs	r3, #0
 8001822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001828:	f107 0318 	add.w	r3, r7, #24
 800182c:	4619      	mov	r1, r3
 800182e:	480b      	ldr	r0, [pc, #44]	; (800185c <HAL_UART_MspInit+0x11c>)
 8001830:	f001 f854 	bl	80028dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001834:	2200      	movs	r2, #0
 8001836:	2100      	movs	r1, #0
 8001838:	2027      	movs	r0, #39	; 0x27
 800183a:	f000 ff5a 	bl	80026f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800183e:	2027      	movs	r0, #39	; 0x27
 8001840:	f000 ff73 	bl	800272a <HAL_NVIC_EnableIRQ>
}
 8001844:	bf00      	nop
 8001846:	3728      	adds	r7, #40	; 0x28
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40013800 	.word	0x40013800
 8001850:	40021000 	.word	0x40021000
 8001854:	40010800 	.word	0x40010800
 8001858:	40004800 	.word	0x40004800
 800185c:	40010c00 	.word	0x40010c00

08001860 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a12      	ldr	r2, [pc, #72]	; (80018b8 <HAL_UART_MspDeInit+0x58>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d10b      	bne.n	800188a <HAL_UART_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8001872:	4b12      	ldr	r3, [pc, #72]	; (80018bc <HAL_UART_MspDeInit+0x5c>)
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	4a11      	ldr	r2, [pc, #68]	; (80018bc <HAL_UART_MspDeInit+0x5c>)
 8001878:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800187c:	6193      	str	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 800187e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001882:	480f      	ldr	r0, [pc, #60]	; (80018c0 <HAL_UART_MspDeInit+0x60>)
 8001884:	f001 f9ae 	bl	8002be4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 8001888:	e012      	b.n	80018b0 <HAL_UART_MspDeInit+0x50>
  else if(huart->Instance==USART3)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a0d      	ldr	r2, [pc, #52]	; (80018c4 <HAL_UART_MspDeInit+0x64>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d10d      	bne.n	80018b0 <HAL_UART_MspDeInit+0x50>
    __HAL_RCC_USART3_CLK_DISABLE();
 8001894:	4b09      	ldr	r3, [pc, #36]	; (80018bc <HAL_UART_MspDeInit+0x5c>)
 8001896:	69db      	ldr	r3, [r3, #28]
 8001898:	4a08      	ldr	r2, [pc, #32]	; (80018bc <HAL_UART_MspDeInit+0x5c>)
 800189a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800189e:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 80018a0:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80018a4:	4808      	ldr	r0, [pc, #32]	; (80018c8 <HAL_UART_MspDeInit+0x68>)
 80018a6:	f001 f99d 	bl	8002be4 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 80018aa:	2027      	movs	r0, #39	; 0x27
 80018ac:	f000 ff4b 	bl	8002746 <HAL_NVIC_DisableIRQ>
}
 80018b0:	bf00      	nop
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40013800 	.word	0x40013800
 80018bc:	40021000 	.word	0x40021000
 80018c0:	40010800 	.word	0x40010800
 80018c4:	40004800 	.word	0x40004800
 80018c8:	40010c00 	.word	0x40010c00

080018cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018d0:	e7fe      	b.n	80018d0 <NMI_Handler+0x4>

080018d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018d2:	b480      	push	{r7}
 80018d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018d6:	e7fe      	b.n	80018d6 <HardFault_Handler+0x4>

080018d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018dc:	e7fe      	b.n	80018dc <MemManage_Handler+0x4>

080018de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018de:	b480      	push	{r7}
 80018e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018e2:	e7fe      	b.n	80018e2 <BusFault_Handler+0x4>

080018e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018e8:	e7fe      	b.n	80018e8 <UsageFault_Handler+0x4>

080018ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018ea:	b480      	push	{r7}
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bc80      	pop	{r7}
 80018f4:	4770      	bx	lr

080018f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018f6:	b480      	push	{r7}
 80018f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bc80      	pop	{r7}
 8001900:	4770      	bx	lr

08001902 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001902:	b480      	push	{r7}
 8001904:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001906:	bf00      	nop
 8001908:	46bd      	mov	sp, r7
 800190a:	bc80      	pop	{r7}
 800190c:	4770      	bx	lr

0800190e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001912:	f000 f8db 	bl	8001acc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
	...

0800191c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001920:	4802      	ldr	r0, [pc, #8]	; (800192c <TIM2_IRQHandler+0x10>)
 8001922:	f002 f91b 	bl	8003b5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	200003b0 	.word	0x200003b0

08001930 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001934:	4802      	ldr	r0, [pc, #8]	; (8001940 <TIM3_IRQHandler+0x10>)
 8001936:	f002 f911 	bl	8003b5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000128 	.word	0x20000128

08001944 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001948:	4802      	ldr	r0, [pc, #8]	; (8001954 <TIM4_IRQHandler+0x10>)
 800194a:	f002 f907 	bl	8003b5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	2000009c 	.word	0x2000009c

08001958 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800195c:	4802      	ldr	r0, [pc, #8]	; (8001968 <USART3_IRQHandler+0x10>)
 800195e:	f002 fe55 	bl	800460c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	200000e4 	.word	0x200000e4

0800196c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001970:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001974:	f001 fa22 	bl	8002dbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001978:	bf00      	nop
 800197a:	bd80      	pop	{r7, pc}

0800197c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001984:	4a14      	ldr	r2, [pc, #80]	; (80019d8 <_sbrk+0x5c>)
 8001986:	4b15      	ldr	r3, [pc, #84]	; (80019dc <_sbrk+0x60>)
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001990:	4b13      	ldr	r3, [pc, #76]	; (80019e0 <_sbrk+0x64>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d102      	bne.n	800199e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001998:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <_sbrk+0x64>)
 800199a:	4a12      	ldr	r2, [pc, #72]	; (80019e4 <_sbrk+0x68>)
 800199c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800199e:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <_sbrk+0x64>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4413      	add	r3, r2
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d207      	bcs.n	80019bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019ac:	f004 fa30 	bl	8005e10 <__errno>
 80019b0:	4603      	mov	r3, r0
 80019b2:	220c      	movs	r2, #12
 80019b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019b6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ba:	e009      	b.n	80019d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019bc:	4b08      	ldr	r3, [pc, #32]	; (80019e0 <_sbrk+0x64>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019c2:	4b07      	ldr	r3, [pc, #28]	; (80019e0 <_sbrk+0x64>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4413      	add	r3, r2
 80019ca:	4a05      	ldr	r2, [pc, #20]	; (80019e0 <_sbrk+0x64>)
 80019cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ce:	68fb      	ldr	r3, [r7, #12]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3718      	adds	r7, #24
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20005000 	.word	0x20005000
 80019dc:	00000400 	.word	0x00000400
 80019e0:	2000008c 	.word	0x2000008c
 80019e4:	20000410 	.word	0x20000410

080019e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bc80      	pop	{r7}
 80019f2:	4770      	bx	lr

080019f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019f4:	480c      	ldr	r0, [pc, #48]	; (8001a28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019f6:	490d      	ldr	r1, [pc, #52]	; (8001a2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019f8:	4a0d      	ldr	r2, [pc, #52]	; (8001a30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019fc:	e002      	b.n	8001a04 <LoopCopyDataInit>

080019fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a02:	3304      	adds	r3, #4

08001a04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a08:	d3f9      	bcc.n	80019fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a0a:	4a0a      	ldr	r2, [pc, #40]	; (8001a34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a0c:	4c0a      	ldr	r4, [pc, #40]	; (8001a38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a10:	e001      	b.n	8001a16 <LoopFillZerobss>

08001a12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a14:	3204      	adds	r2, #4

08001a16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a18:	d3fb      	bcc.n	8001a12 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a1a:	f7ff ffe5 	bl	80019e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a1e:	f004 f9fd 	bl	8005e1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a22:	f7ff f9fd 	bl	8000e20 <main>
  bx lr
 8001a26:	4770      	bx	lr
  ldr r0, =_sdata
 8001a28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a2c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001a30:	08006c9c 	.word	0x08006c9c
  ldr r2, =_sbss
 8001a34:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001a38:	2000040c 	.word	0x2000040c

08001a3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a3c:	e7fe      	b.n	8001a3c <ADC1_2_IRQHandler>
	...

08001a40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a44:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <HAL_Init+0x28>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a07      	ldr	r2, [pc, #28]	; (8001a68 <HAL_Init+0x28>)
 8001a4a:	f043 0310 	orr.w	r3, r3, #16
 8001a4e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a50:	2003      	movs	r0, #3
 8001a52:	f000 fe43 	bl	80026dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a56:	2000      	movs	r0, #0
 8001a58:	f000 f808 	bl	8001a6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a5c:	f7ff fd6c 	bl	8001538 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40022000 	.word	0x40022000

08001a6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a74:	4b12      	ldr	r3, [pc, #72]	; (8001ac0 <HAL_InitTick+0x54>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	4b12      	ldr	r3, [pc, #72]	; (8001ac4 <HAL_InitTick+0x58>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f000 fe69 	bl	8002762 <HAL_SYSTICK_Config>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e00e      	b.n	8001ab8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2b0f      	cmp	r3, #15
 8001a9e:	d80a      	bhi.n	8001ab6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	6879      	ldr	r1, [r7, #4]
 8001aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa8:	f000 fe23 	bl	80026f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001aac:	4a06      	ldr	r2, [pc, #24]	; (8001ac8 <HAL_InitTick+0x5c>)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	e000      	b.n	8001ab8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3708      	adds	r7, #8
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	20000000 	.word	0x20000000
 8001ac4:	20000008 	.word	0x20000008
 8001ac8:	20000004 	.word	0x20000004

08001acc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ad0:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <HAL_IncTick+0x1c>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	4b05      	ldr	r3, [pc, #20]	; (8001aec <HAL_IncTick+0x20>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4413      	add	r3, r2
 8001adc:	4a03      	ldr	r2, [pc, #12]	; (8001aec <HAL_IncTick+0x20>)
 8001ade:	6013      	str	r3, [r2, #0]
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr
 8001ae8:	20000008 	.word	0x20000008
 8001aec:	200003f8 	.word	0x200003f8

08001af0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  return uwTick;
 8001af4:	4b02      	ldr	r3, [pc, #8]	; (8001b00 <HAL_GetTick+0x10>)
 8001af6:	681b      	ldr	r3, [r3, #0]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bc80      	pop	{r7}
 8001afe:	4770      	bx	lr
 8001b00:	200003f8 	.word	0x200003f8

08001b04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b0c:	f7ff fff0 	bl	8001af0 <HAL_GetTick>
 8001b10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b1c:	d005      	beq.n	8001b2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b1e:	4b0a      	ldr	r3, [pc, #40]	; (8001b48 <HAL_Delay+0x44>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	461a      	mov	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	4413      	add	r3, r2
 8001b28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b2a:	bf00      	nop
 8001b2c:	f7ff ffe0 	bl	8001af0 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d8f7      	bhi.n	8001b2c <HAL_Delay+0x28>
  {
  }
}
 8001b3c:	bf00      	nop
 8001b3e:	bf00      	nop
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20000008 	.word	0x20000008

08001b4c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b54:	2300      	movs	r3, #0
 8001b56:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001b60:	2300      	movs	r3, #0
 8001b62:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d101      	bne.n	8001b6e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e0be      	b.n	8001cec <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d109      	bne.n	8001b90 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f7ff fd06 	bl	800159c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f000 fbc5 	bl	8002320 <ADC_ConversionStop_Disable>
 8001b96:	4603      	mov	r3, r0
 8001b98:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9e:	f003 0310 	and.w	r3, r3, #16
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f040 8099 	bne.w	8001cda <HAL_ADC_Init+0x18e>
 8001ba8:	7dfb      	ldrb	r3, [r7, #23]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f040 8095 	bne.w	8001cda <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001bb8:	f023 0302 	bic.w	r3, r3, #2
 8001bbc:	f043 0202 	orr.w	r2, r3, #2
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001bcc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	7b1b      	ldrb	r3, [r3, #12]
 8001bd2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001bd4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001bd6:	68ba      	ldr	r2, [r7, #8]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001be4:	d003      	beq.n	8001bee <HAL_ADC_Init+0xa2>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d102      	bne.n	8001bf4 <HAL_ADC_Init+0xa8>
 8001bee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bf2:	e000      	b.n	8001bf6 <HAL_ADC_Init+0xaa>
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	7d1b      	ldrb	r3, [r3, #20]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d119      	bne.n	8001c38 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	7b1b      	ldrb	r3, [r3, #12]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d109      	bne.n	8001c20 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	3b01      	subs	r3, #1
 8001c12:	035a      	lsls	r2, r3, #13
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c1c:	613b      	str	r3, [r7, #16]
 8001c1e:	e00b      	b.n	8001c38 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c24:	f043 0220 	orr.w	r2, r3, #32
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c30:	f043 0201 	orr.w	r2, r3, #1
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	689a      	ldr	r2, [r3, #8]
 8001c52:	4b28      	ldr	r3, [pc, #160]	; (8001cf4 <HAL_ADC_Init+0x1a8>)
 8001c54:	4013      	ands	r3, r2
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	6812      	ldr	r2, [r2, #0]
 8001c5a:	68b9      	ldr	r1, [r7, #8]
 8001c5c:	430b      	orrs	r3, r1
 8001c5e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c68:	d003      	beq.n	8001c72 <HAL_ADC_Init+0x126>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d104      	bne.n	8001c7c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	691b      	ldr	r3, [r3, #16]
 8001c76:	3b01      	subs	r3, #1
 8001c78:	051b      	lsls	r3, r3, #20
 8001c7a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c82:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	68fa      	ldr	r2, [r7, #12]
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	689a      	ldr	r2, [r3, #8]
 8001c96:	4b18      	ldr	r3, [pc, #96]	; (8001cf8 <HAL_ADC_Init+0x1ac>)
 8001c98:	4013      	ands	r3, r2
 8001c9a:	68ba      	ldr	r2, [r7, #8]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d10b      	bne.n	8001cb8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001caa:	f023 0303 	bic.w	r3, r3, #3
 8001cae:	f043 0201 	orr.w	r2, r3, #1
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001cb6:	e018      	b.n	8001cea <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cbc:	f023 0312 	bic.w	r3, r3, #18
 8001cc0:	f043 0210 	orr.w	r2, r3, #16
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ccc:	f043 0201 	orr.w	r2, r3, #1
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001cd8:	e007      	b.n	8001cea <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cde:	f043 0210 	orr.w	r2, r3, #16
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001cea:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3718      	adds	r7, #24
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	ffe1f7fd 	.word	0xffe1f7fd
 8001cf8:	ff1f0efe 	.word	0xff1f0efe

08001cfc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d04:	2300      	movs	r3, #0
 8001d06:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d101      	bne.n	8001d16 <HAL_ADC_Start+0x1a>
 8001d12:	2302      	movs	r3, #2
 8001d14:	e098      	b.n	8001e48 <HAL_ADC_Start+0x14c>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 faa4 	bl	800226c <ADC_Enable>
 8001d24:	4603      	mov	r3, r0
 8001d26:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001d28:	7bfb      	ldrb	r3, [r7, #15]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f040 8087 	bne.w	8001e3e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d38:	f023 0301 	bic.w	r3, r3, #1
 8001d3c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a41      	ldr	r2, [pc, #260]	; (8001e50 <HAL_ADC_Start+0x154>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d105      	bne.n	8001d5a <HAL_ADC_Start+0x5e>
 8001d4e:	4b41      	ldr	r3, [pc, #260]	; (8001e54 <HAL_ADC_Start+0x158>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d115      	bne.n	8001d86 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d5e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d026      	beq.n	8001dc2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d78:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d7c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d84:	e01d      	b.n	8001dc2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a2f      	ldr	r2, [pc, #188]	; (8001e54 <HAL_ADC_Start+0x158>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d004      	beq.n	8001da6 <HAL_ADC_Start+0xaa>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a2b      	ldr	r2, [pc, #172]	; (8001e50 <HAL_ADC_Start+0x154>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d10d      	bne.n	8001dc2 <HAL_ADC_Start+0xc6>
 8001da6:	4b2b      	ldr	r3, [pc, #172]	; (8001e54 <HAL_ADC_Start+0x158>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d007      	beq.n	8001dc2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001dba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d006      	beq.n	8001ddc <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd2:	f023 0206 	bic.w	r2, r3, #6
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	62da      	str	r2, [r3, #44]	; 0x2c
 8001dda:	e002      	b.n	8001de2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f06f 0202 	mvn.w	r2, #2
 8001df2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001dfe:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001e02:	d113      	bne.n	8001e2c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001e08:	4a11      	ldr	r2, [pc, #68]	; (8001e50 <HAL_ADC_Start+0x154>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d105      	bne.n	8001e1a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001e0e:	4b11      	ldr	r3, [pc, #68]	; (8001e54 <HAL_ADC_Start+0x158>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d108      	bne.n	8001e2c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001e28:	609a      	str	r2, [r3, #8]
 8001e2a:	e00c      	b.n	8001e46 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	689a      	ldr	r2, [r3, #8]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001e3a:	609a      	str	r2, [r3, #8]
 8001e3c:	e003      	b.n	8001e46 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3710      	adds	r7, #16
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40012800 	.word	0x40012800
 8001e54:	40012400 	.word	0x40012400

08001e58 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001e58:	b590      	push	{r4, r7, lr}
 8001e5a:	b087      	sub	sp, #28
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e62:	2300      	movs	r3, #0
 8001e64:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001e66:	2300      	movs	r3, #0
 8001e68:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001e6e:	f7ff fe3f 	bl	8001af0 <HAL_GetTick>
 8001e72:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d00b      	beq.n	8001e9a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e86:	f043 0220 	orr.w	r2, r3, #32
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e0d3      	b.n	8002042 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d131      	bne.n	8001f0c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eae:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d12a      	bne.n	8001f0c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001eb6:	e021      	b.n	8001efc <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ebe:	d01d      	beq.n	8001efc <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d007      	beq.n	8001ed6 <HAL_ADC_PollForConversion+0x7e>
 8001ec6:	f7ff fe13 	bl	8001af0 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d212      	bcs.n	8001efc <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d10b      	bne.n	8001efc <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee8:	f043 0204 	orr.w	r2, r3, #4
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e0a2      	b.n	8002042 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d0d6      	beq.n	8001eb8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001f0a:	e070      	b.n	8001fee <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001f0c:	4b4f      	ldr	r3, [pc, #316]	; (800204c <HAL_ADC_PollForConversion+0x1f4>)
 8001f0e:	681c      	ldr	r4, [r3, #0]
 8001f10:	2002      	movs	r0, #2
 8001f12:	f001 fc3b 	bl	800378c <HAL_RCCEx_GetPeriphCLKFreq>
 8001f16:	4603      	mov	r3, r0
 8001f18:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6919      	ldr	r1, [r3, #16]
 8001f22:	4b4b      	ldr	r3, [pc, #300]	; (8002050 <HAL_ADC_PollForConversion+0x1f8>)
 8001f24:	400b      	ands	r3, r1
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d118      	bne.n	8001f5c <HAL_ADC_PollForConversion+0x104>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68d9      	ldr	r1, [r3, #12]
 8001f30:	4b48      	ldr	r3, [pc, #288]	; (8002054 <HAL_ADC_PollForConversion+0x1fc>)
 8001f32:	400b      	ands	r3, r1
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d111      	bne.n	8001f5c <HAL_ADC_PollForConversion+0x104>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6919      	ldr	r1, [r3, #16]
 8001f3e:	4b46      	ldr	r3, [pc, #280]	; (8002058 <HAL_ADC_PollForConversion+0x200>)
 8001f40:	400b      	ands	r3, r1
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d108      	bne.n	8001f58 <HAL_ADC_PollForConversion+0x100>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68d9      	ldr	r1, [r3, #12]
 8001f4c:	4b43      	ldr	r3, [pc, #268]	; (800205c <HAL_ADC_PollForConversion+0x204>)
 8001f4e:	400b      	ands	r3, r1
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d101      	bne.n	8001f58 <HAL_ADC_PollForConversion+0x100>
 8001f54:	2314      	movs	r3, #20
 8001f56:	e020      	b.n	8001f9a <HAL_ADC_PollForConversion+0x142>
 8001f58:	2329      	movs	r3, #41	; 0x29
 8001f5a:	e01e      	b.n	8001f9a <HAL_ADC_PollForConversion+0x142>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6919      	ldr	r1, [r3, #16]
 8001f62:	4b3d      	ldr	r3, [pc, #244]	; (8002058 <HAL_ADC_PollForConversion+0x200>)
 8001f64:	400b      	ands	r3, r1
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d106      	bne.n	8001f78 <HAL_ADC_PollForConversion+0x120>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68d9      	ldr	r1, [r3, #12]
 8001f70:	4b3a      	ldr	r3, [pc, #232]	; (800205c <HAL_ADC_PollForConversion+0x204>)
 8001f72:	400b      	ands	r3, r1
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d00d      	beq.n	8001f94 <HAL_ADC_PollForConversion+0x13c>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6919      	ldr	r1, [r3, #16]
 8001f7e:	4b38      	ldr	r3, [pc, #224]	; (8002060 <HAL_ADC_PollForConversion+0x208>)
 8001f80:	400b      	ands	r3, r1
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d108      	bne.n	8001f98 <HAL_ADC_PollForConversion+0x140>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68d9      	ldr	r1, [r3, #12]
 8001f8c:	4b34      	ldr	r3, [pc, #208]	; (8002060 <HAL_ADC_PollForConversion+0x208>)
 8001f8e:	400b      	ands	r3, r1
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d101      	bne.n	8001f98 <HAL_ADC_PollForConversion+0x140>
 8001f94:	2354      	movs	r3, #84	; 0x54
 8001f96:	e000      	b.n	8001f9a <HAL_ADC_PollForConversion+0x142>
 8001f98:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001f9a:	fb02 f303 	mul.w	r3, r2, r3
 8001f9e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001fa0:	e021      	b.n	8001fe6 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa8:	d01a      	beq.n	8001fe0 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d007      	beq.n	8001fc0 <HAL_ADC_PollForConversion+0x168>
 8001fb0:	f7ff fd9e 	bl	8001af0 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d20f      	bcs.n	8001fe0 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d90b      	bls.n	8001fe0 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fcc:	f043 0204 	orr.w	r2, r3, #4
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e030      	b.n	8002042 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d8d9      	bhi.n	8001fa2 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f06f 0212 	mvn.w	r2, #18
 8001ff6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800200e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002012:	d115      	bne.n	8002040 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002018:	2b00      	cmp	r3, #0
 800201a:	d111      	bne.n	8002040 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002020:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d105      	bne.n	8002040 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002038:	f043 0201 	orr.w	r2, r3, #1
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	371c      	adds	r7, #28
 8002046:	46bd      	mov	sp, r7
 8002048:	bd90      	pop	{r4, r7, pc}
 800204a:	bf00      	nop
 800204c:	20000000 	.word	0x20000000
 8002050:	24924924 	.word	0x24924924
 8002054:	00924924 	.word	0x00924924
 8002058:	12492492 	.word	0x12492492
 800205c:	00492492 	.word	0x00492492
 8002060:	00249249 	.word	0x00249249

08002064 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002072:	4618      	mov	r0, r3
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	bc80      	pop	{r7}
 800207a:	4770      	bx	lr

0800207c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002086:	2300      	movs	r3, #0
 8002088:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800208a:	2300      	movs	r3, #0
 800208c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002094:	2b01      	cmp	r3, #1
 8002096:	d101      	bne.n	800209c <HAL_ADC_ConfigChannel+0x20>
 8002098:	2302      	movs	r3, #2
 800209a:	e0dc      	b.n	8002256 <HAL_ADC_ConfigChannel+0x1da>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	2b06      	cmp	r3, #6
 80020aa:	d81c      	bhi.n	80020e6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685a      	ldr	r2, [r3, #4]
 80020b6:	4613      	mov	r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	4413      	add	r3, r2
 80020bc:	3b05      	subs	r3, #5
 80020be:	221f      	movs	r2, #31
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	43db      	mvns	r3, r3
 80020c6:	4019      	ands	r1, r3
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	6818      	ldr	r0, [r3, #0]
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685a      	ldr	r2, [r3, #4]
 80020d0:	4613      	mov	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	4413      	add	r3, r2
 80020d6:	3b05      	subs	r3, #5
 80020d8:	fa00 f203 	lsl.w	r2, r0, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	430a      	orrs	r2, r1
 80020e2:	635a      	str	r2, [r3, #52]	; 0x34
 80020e4:	e03c      	b.n	8002160 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b0c      	cmp	r3, #12
 80020ec:	d81c      	bhi.n	8002128 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685a      	ldr	r2, [r3, #4]
 80020f8:	4613      	mov	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	3b23      	subs	r3, #35	; 0x23
 8002100:	221f      	movs	r2, #31
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	43db      	mvns	r3, r3
 8002108:	4019      	ands	r1, r3
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	6818      	ldr	r0, [r3, #0]
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	4613      	mov	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	4413      	add	r3, r2
 8002118:	3b23      	subs	r3, #35	; 0x23
 800211a:	fa00 f203 	lsl.w	r2, r0, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	430a      	orrs	r2, r1
 8002124:	631a      	str	r2, [r3, #48]	; 0x30
 8002126:	e01b      	b.n	8002160 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685a      	ldr	r2, [r3, #4]
 8002132:	4613      	mov	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4413      	add	r3, r2
 8002138:	3b41      	subs	r3, #65	; 0x41
 800213a:	221f      	movs	r2, #31
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	43db      	mvns	r3, r3
 8002142:	4019      	ands	r1, r3
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	6818      	ldr	r0, [r3, #0]
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685a      	ldr	r2, [r3, #4]
 800214c:	4613      	mov	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4413      	add	r3, r2
 8002152:	3b41      	subs	r3, #65	; 0x41
 8002154:	fa00 f203 	lsl.w	r2, r0, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	430a      	orrs	r2, r1
 800215e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2b09      	cmp	r3, #9
 8002166:	d91c      	bls.n	80021a2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68d9      	ldr	r1, [r3, #12]
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	4613      	mov	r3, r2
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	4413      	add	r3, r2
 8002178:	3b1e      	subs	r3, #30
 800217a:	2207      	movs	r2, #7
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	43db      	mvns	r3, r3
 8002182:	4019      	ands	r1, r3
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	6898      	ldr	r0, [r3, #8]
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	4613      	mov	r3, r2
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	4413      	add	r3, r2
 8002192:	3b1e      	subs	r3, #30
 8002194:	fa00 f203 	lsl.w	r2, r0, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	430a      	orrs	r2, r1
 800219e:	60da      	str	r2, [r3, #12]
 80021a0:	e019      	b.n	80021d6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	6919      	ldr	r1, [r3, #16]
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	4613      	mov	r3, r2
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	4413      	add	r3, r2
 80021b2:	2207      	movs	r2, #7
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	43db      	mvns	r3, r3
 80021ba:	4019      	ands	r1, r3
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	6898      	ldr	r0, [r3, #8]
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	4613      	mov	r3, r2
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	4413      	add	r3, r2
 80021ca:	fa00 f203 	lsl.w	r2, r0, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	430a      	orrs	r2, r1
 80021d4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2b10      	cmp	r3, #16
 80021dc:	d003      	beq.n	80021e6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80021e2:	2b11      	cmp	r3, #17
 80021e4:	d132      	bne.n	800224c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a1d      	ldr	r2, [pc, #116]	; (8002260 <HAL_ADC_ConfigChannel+0x1e4>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d125      	bne.n	800223c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d126      	bne.n	800224c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800220c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2b10      	cmp	r3, #16
 8002214:	d11a      	bne.n	800224c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002216:	4b13      	ldr	r3, [pc, #76]	; (8002264 <HAL_ADC_ConfigChannel+0x1e8>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a13      	ldr	r2, [pc, #76]	; (8002268 <HAL_ADC_ConfigChannel+0x1ec>)
 800221c:	fba2 2303 	umull	r2, r3, r2, r3
 8002220:	0c9a      	lsrs	r2, r3, #18
 8002222:	4613      	mov	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4413      	add	r3, r2
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800222c:	e002      	b.n	8002234 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	3b01      	subs	r3, #1
 8002232:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1f9      	bne.n	800222e <HAL_ADC_ConfigChannel+0x1b2>
 800223a:	e007      	b.n	800224c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002240:	f043 0220 	orr.w	r2, r3, #32
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002254:	7bfb      	ldrb	r3, [r7, #15]
}
 8002256:	4618      	mov	r0, r3
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	bc80      	pop	{r7}
 800225e:	4770      	bx	lr
 8002260:	40012400 	.word	0x40012400
 8002264:	20000000 	.word	0x20000000
 8002268:	431bde83 	.word	0x431bde83

0800226c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002274:	2300      	movs	r3, #0
 8002276:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002278:	2300      	movs	r3, #0
 800227a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b01      	cmp	r3, #1
 8002288:	d040      	beq.n	800230c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f042 0201 	orr.w	r2, r2, #1
 8002298:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800229a:	4b1f      	ldr	r3, [pc, #124]	; (8002318 <ADC_Enable+0xac>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a1f      	ldr	r2, [pc, #124]	; (800231c <ADC_Enable+0xb0>)
 80022a0:	fba2 2303 	umull	r2, r3, r2, r3
 80022a4:	0c9b      	lsrs	r3, r3, #18
 80022a6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80022a8:	e002      	b.n	80022b0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	3b01      	subs	r3, #1
 80022ae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1f9      	bne.n	80022aa <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80022b6:	f7ff fc1b 	bl	8001af0 <HAL_GetTick>
 80022ba:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80022bc:	e01f      	b.n	80022fe <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80022be:	f7ff fc17 	bl	8001af0 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d918      	bls.n	80022fe <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d011      	beq.n	80022fe <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022de:	f043 0210 	orr.w	r2, r3, #16
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ea:	f043 0201 	orr.w	r2, r3, #1
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e007      	b.n	800230e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	2b01      	cmp	r3, #1
 800230a:	d1d8      	bne.n	80022be <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	20000000 	.word	0x20000000
 800231c:	431bde83 	.word	0x431bde83

08002320 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002328:	2300      	movs	r3, #0
 800232a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b01      	cmp	r3, #1
 8002338:	d12e      	bne.n	8002398 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f022 0201 	bic.w	r2, r2, #1
 8002348:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800234a:	f7ff fbd1 	bl	8001af0 <HAL_GetTick>
 800234e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002350:	e01b      	b.n	800238a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002352:	f7ff fbcd 	bl	8001af0 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d914      	bls.n	800238a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	2b01      	cmp	r3, #1
 800236c:	d10d      	bne.n	800238a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002372:	f043 0210 	orr.w	r2, r3, #16
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237e:	f043 0201 	orr.w	r2, r3, #1
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e007      	b.n	800239a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	2b01      	cmp	r3, #1
 8002396:	d0dc      	beq.n	8002352 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
	...

080023a4 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80023a4:	b590      	push	{r4, r7, lr}
 80023a6:	b087      	sub	sp, #28
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023ac:	2300      	movs	r3, #0
 80023ae:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80023b0:	2300      	movs	r3, #0
 80023b2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d101      	bne.n	80023c2 <HAL_ADCEx_Calibration_Start+0x1e>
 80023be:	2302      	movs	r3, #2
 80023c0:	e095      	b.n	80024ee <HAL_ADCEx_Calibration_Start+0x14a>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2201      	movs	r2, #1
 80023c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7ff ffa8 	bl	8002320 <ADC_ConversionStop_Disable>
 80023d0:	4603      	mov	r3, r0
 80023d2:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80023d4:	7dfb      	ldrb	r3, [r7, #23]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f040 8084 	bne.w	80024e4 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80023e4:	f023 0302 	bic.w	r3, r3, #2
 80023e8:	f043 0202 	orr.w	r2, r3, #2
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80023f0:	4b41      	ldr	r3, [pc, #260]	; (80024f8 <HAL_ADCEx_Calibration_Start+0x154>)
 80023f2:	681c      	ldr	r4, [r3, #0]
 80023f4:	2002      	movs	r0, #2
 80023f6:	f001 f9c9 	bl	800378c <HAL_RCCEx_GetPeriphCLKFreq>
 80023fa:	4603      	mov	r3, r0
 80023fc:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002400:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002402:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002404:	e002      	b.n	800240c <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	3b01      	subs	r3, #1
 800240a:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1f9      	bne.n	8002406 <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7ff ff2a 	bl	800226c <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	689a      	ldr	r2, [r3, #8]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f042 0208 	orr.w	r2, r2, #8
 8002426:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002428:	f7ff fb62 	bl	8001af0 <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800242e:	e01b      	b.n	8002468 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002430:	f7ff fb5e 	bl	8001af0 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b0a      	cmp	r3, #10
 800243c:	d914      	bls.n	8002468 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f003 0308 	and.w	r3, r3, #8
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00d      	beq.n	8002468 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002450:	f023 0312 	bic.w	r3, r3, #18
 8002454:	f043 0210 	orr.w	r2, r3, #16
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e042      	b.n	80024ee <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f003 0308 	and.w	r3, r3, #8
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1dc      	bne.n	8002430 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	689a      	ldr	r2, [r3, #8]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f042 0204 	orr.w	r2, r2, #4
 8002484:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002486:	f7ff fb33 	bl	8001af0 <HAL_GetTick>
 800248a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800248c:	e01b      	b.n	80024c6 <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800248e:	f7ff fb2f 	bl	8001af0 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	2b0a      	cmp	r3, #10
 800249a:	d914      	bls.n	80024c6 <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 0304 	and.w	r3, r3, #4
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00d      	beq.n	80024c6 <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ae:	f023 0312 	bic.w	r3, r3, #18
 80024b2:	f043 0210 	orr.w	r2, r3, #16
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e013      	b.n	80024ee <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f003 0304 	and.w	r3, r3, #4
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1dc      	bne.n	800248e <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d8:	f023 0303 	bic.w	r3, r3, #3
 80024dc:	f043 0201 	orr.w	r2, r3, #1
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80024ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	371c      	adds	r7, #28
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd90      	pop	{r4, r7, pc}
 80024f6:	bf00      	nop
 80024f8:	20000000 	.word	0x20000000

080024fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f003 0307 	and.w	r3, r3, #7
 800250a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800250c:	4b0c      	ldr	r3, [pc, #48]	; (8002540 <__NVIC_SetPriorityGrouping+0x44>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002518:	4013      	ands	r3, r2
 800251a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002524:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800252c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800252e:	4a04      	ldr	r2, [pc, #16]	; (8002540 <__NVIC_SetPriorityGrouping+0x44>)
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	60d3      	str	r3, [r2, #12]
}
 8002534:	bf00      	nop
 8002536:	3714      	adds	r7, #20
 8002538:	46bd      	mov	sp, r7
 800253a:	bc80      	pop	{r7}
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	e000ed00 	.word	0xe000ed00

08002544 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002548:	4b04      	ldr	r3, [pc, #16]	; (800255c <__NVIC_GetPriorityGrouping+0x18>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	0a1b      	lsrs	r3, r3, #8
 800254e:	f003 0307 	and.w	r3, r3, #7
}
 8002552:	4618      	mov	r0, r3
 8002554:	46bd      	mov	sp, r7
 8002556:	bc80      	pop	{r7}
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	e000ed00 	.word	0xe000ed00

08002560 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	4603      	mov	r3, r0
 8002568:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800256a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256e:	2b00      	cmp	r3, #0
 8002570:	db0b      	blt.n	800258a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002572:	79fb      	ldrb	r3, [r7, #7]
 8002574:	f003 021f 	and.w	r2, r3, #31
 8002578:	4906      	ldr	r1, [pc, #24]	; (8002594 <__NVIC_EnableIRQ+0x34>)
 800257a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257e:	095b      	lsrs	r3, r3, #5
 8002580:	2001      	movs	r0, #1
 8002582:	fa00 f202 	lsl.w	r2, r0, r2
 8002586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800258a:	bf00      	nop
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	bc80      	pop	{r7}
 8002592:	4770      	bx	lr
 8002594:	e000e100 	.word	0xe000e100

08002598 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	4603      	mov	r3, r0
 80025a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	db12      	blt.n	80025d0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025aa:	79fb      	ldrb	r3, [r7, #7]
 80025ac:	f003 021f 	and.w	r2, r3, #31
 80025b0:	490a      	ldr	r1, [pc, #40]	; (80025dc <__NVIC_DisableIRQ+0x44>)
 80025b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b6:	095b      	lsrs	r3, r3, #5
 80025b8:	2001      	movs	r0, #1
 80025ba:	fa00 f202 	lsl.w	r2, r0, r2
 80025be:	3320      	adds	r3, #32
 80025c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80025c4:	f3bf 8f4f 	dsb	sy
}
 80025c8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80025ca:	f3bf 8f6f 	isb	sy
}
 80025ce:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bc80      	pop	{r7}
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	e000e100 	.word	0xe000e100

080025e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	4603      	mov	r3, r0
 80025e8:	6039      	str	r1, [r7, #0]
 80025ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	db0a      	blt.n	800260a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	b2da      	uxtb	r2, r3
 80025f8:	490c      	ldr	r1, [pc, #48]	; (800262c <__NVIC_SetPriority+0x4c>)
 80025fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fe:	0112      	lsls	r2, r2, #4
 8002600:	b2d2      	uxtb	r2, r2
 8002602:	440b      	add	r3, r1
 8002604:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002608:	e00a      	b.n	8002620 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	b2da      	uxtb	r2, r3
 800260e:	4908      	ldr	r1, [pc, #32]	; (8002630 <__NVIC_SetPriority+0x50>)
 8002610:	79fb      	ldrb	r3, [r7, #7]
 8002612:	f003 030f 	and.w	r3, r3, #15
 8002616:	3b04      	subs	r3, #4
 8002618:	0112      	lsls	r2, r2, #4
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	440b      	add	r3, r1
 800261e:	761a      	strb	r2, [r3, #24]
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	bc80      	pop	{r7}
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	e000e100 	.word	0xe000e100
 8002630:	e000ed00 	.word	0xe000ed00

08002634 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002634:	b480      	push	{r7}
 8002636:	b089      	sub	sp, #36	; 0x24
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	f1c3 0307 	rsb	r3, r3, #7
 800264e:	2b04      	cmp	r3, #4
 8002650:	bf28      	it	cs
 8002652:	2304      	movcs	r3, #4
 8002654:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	3304      	adds	r3, #4
 800265a:	2b06      	cmp	r3, #6
 800265c:	d902      	bls.n	8002664 <NVIC_EncodePriority+0x30>
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	3b03      	subs	r3, #3
 8002662:	e000      	b.n	8002666 <NVIC_EncodePriority+0x32>
 8002664:	2300      	movs	r3, #0
 8002666:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002668:	f04f 32ff 	mov.w	r2, #4294967295
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	43da      	mvns	r2, r3
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	401a      	ands	r2, r3
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800267c:	f04f 31ff 	mov.w	r1, #4294967295
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	fa01 f303 	lsl.w	r3, r1, r3
 8002686:	43d9      	mvns	r1, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800268c:	4313      	orrs	r3, r2
         );
}
 800268e:	4618      	mov	r0, r3
 8002690:	3724      	adds	r7, #36	; 0x24
 8002692:	46bd      	mov	sp, r7
 8002694:	bc80      	pop	{r7}
 8002696:	4770      	bx	lr

08002698 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	3b01      	subs	r3, #1
 80026a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026a8:	d301      	bcc.n	80026ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026aa:	2301      	movs	r3, #1
 80026ac:	e00f      	b.n	80026ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026ae:	4a0a      	ldr	r2, [pc, #40]	; (80026d8 <SysTick_Config+0x40>)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	3b01      	subs	r3, #1
 80026b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026b6:	210f      	movs	r1, #15
 80026b8:	f04f 30ff 	mov.w	r0, #4294967295
 80026bc:	f7ff ff90 	bl	80025e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026c0:	4b05      	ldr	r3, [pc, #20]	; (80026d8 <SysTick_Config+0x40>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026c6:	4b04      	ldr	r3, [pc, #16]	; (80026d8 <SysTick_Config+0x40>)
 80026c8:	2207      	movs	r2, #7
 80026ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	e000e010 	.word	0xe000e010

080026dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f7ff ff09 	bl	80024fc <__NVIC_SetPriorityGrouping>
}
 80026ea:	bf00      	nop
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b086      	sub	sp, #24
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	4603      	mov	r3, r0
 80026fa:	60b9      	str	r1, [r7, #8]
 80026fc:	607a      	str	r2, [r7, #4]
 80026fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002700:	2300      	movs	r3, #0
 8002702:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002704:	f7ff ff1e 	bl	8002544 <__NVIC_GetPriorityGrouping>
 8002708:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	68b9      	ldr	r1, [r7, #8]
 800270e:	6978      	ldr	r0, [r7, #20]
 8002710:	f7ff ff90 	bl	8002634 <NVIC_EncodePriority>
 8002714:	4602      	mov	r2, r0
 8002716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800271a:	4611      	mov	r1, r2
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff ff5f 	bl	80025e0 <__NVIC_SetPriority>
}
 8002722:	bf00      	nop
 8002724:	3718      	adds	r7, #24
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b082      	sub	sp, #8
 800272e:	af00      	add	r7, sp, #0
 8002730:	4603      	mov	r3, r0
 8002732:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff ff11 	bl	8002560 <__NVIC_EnableIRQ>
}
 800273e:	bf00      	nop
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b082      	sub	sp, #8
 800274a:	af00      	add	r7, sp, #0
 800274c:	4603      	mov	r3, r0
 800274e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff ff1f 	bl	8002598 <__NVIC_DisableIRQ>
}
 800275a:	bf00      	nop
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b082      	sub	sp, #8
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f7ff ff94 	bl	8002698 <SysTick_Config>
 8002770:	4603      	mov	r3, r0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800277a:	b480      	push	{r7}
 800277c:	b085      	sub	sp, #20
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002782:	2300      	movs	r3, #0
 8002784:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800278c:	2b02      	cmp	r3, #2
 800278e:	d008      	beq.n	80027a2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2204      	movs	r2, #4
 8002794:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e020      	b.n	80027e4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f022 020e 	bic.w	r2, r2, #14
 80027b0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 0201 	bic.w	r2, r2, #1
 80027c0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ca:	2101      	movs	r1, #1
 80027cc:	fa01 f202 	lsl.w	r2, r1, r2
 80027d0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80027e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3714      	adds	r7, #20
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bc80      	pop	{r7}
 80027ec:	4770      	bx	lr
	...

080027f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027f8:	2300      	movs	r3, #0
 80027fa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002802:	2b02      	cmp	r3, #2
 8002804:	d005      	beq.n	8002812 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2204      	movs	r2, #4
 800280a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	73fb      	strb	r3, [r7, #15]
 8002810:	e051      	b.n	80028b6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 020e 	bic.w	r2, r2, #14
 8002820:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 0201 	bic.w	r2, r2, #1
 8002830:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a22      	ldr	r2, [pc, #136]	; (80028c0 <HAL_DMA_Abort_IT+0xd0>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d029      	beq.n	8002890 <HAL_DMA_Abort_IT+0xa0>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a20      	ldr	r2, [pc, #128]	; (80028c4 <HAL_DMA_Abort_IT+0xd4>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d022      	beq.n	800288c <HAL_DMA_Abort_IT+0x9c>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a1f      	ldr	r2, [pc, #124]	; (80028c8 <HAL_DMA_Abort_IT+0xd8>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d01a      	beq.n	8002886 <HAL_DMA_Abort_IT+0x96>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a1d      	ldr	r2, [pc, #116]	; (80028cc <HAL_DMA_Abort_IT+0xdc>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d012      	beq.n	8002880 <HAL_DMA_Abort_IT+0x90>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a1c      	ldr	r2, [pc, #112]	; (80028d0 <HAL_DMA_Abort_IT+0xe0>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d00a      	beq.n	800287a <HAL_DMA_Abort_IT+0x8a>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a1a      	ldr	r2, [pc, #104]	; (80028d4 <HAL_DMA_Abort_IT+0xe4>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d102      	bne.n	8002874 <HAL_DMA_Abort_IT+0x84>
 800286e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002872:	e00e      	b.n	8002892 <HAL_DMA_Abort_IT+0xa2>
 8002874:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002878:	e00b      	b.n	8002892 <HAL_DMA_Abort_IT+0xa2>
 800287a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800287e:	e008      	b.n	8002892 <HAL_DMA_Abort_IT+0xa2>
 8002880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002884:	e005      	b.n	8002892 <HAL_DMA_Abort_IT+0xa2>
 8002886:	f44f 7380 	mov.w	r3, #256	; 0x100
 800288a:	e002      	b.n	8002892 <HAL_DMA_Abort_IT+0xa2>
 800288c:	2310      	movs	r3, #16
 800288e:	e000      	b.n	8002892 <HAL_DMA_Abort_IT+0xa2>
 8002890:	2301      	movs	r3, #1
 8002892:	4a11      	ldr	r2, [pc, #68]	; (80028d8 <HAL_DMA_Abort_IT+0xe8>)
 8002894:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2201      	movs	r2, #1
 800289a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d003      	beq.n	80028b6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	4798      	blx	r3
    } 
  }
  return status;
 80028b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40020008 	.word	0x40020008
 80028c4:	4002001c 	.word	0x4002001c
 80028c8:	40020030 	.word	0x40020030
 80028cc:	40020044 	.word	0x40020044
 80028d0:	40020058 	.word	0x40020058
 80028d4:	4002006c 	.word	0x4002006c
 80028d8:	40020000 	.word	0x40020000

080028dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028dc:	b480      	push	{r7}
 80028de:	b08b      	sub	sp, #44	; 0x2c
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028e6:	2300      	movs	r3, #0
 80028e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80028ea:	2300      	movs	r3, #0
 80028ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028ee:	e169      	b.n	8002bc4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80028f0:	2201      	movs	r2, #1
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	69fa      	ldr	r2, [r7, #28]
 8002900:	4013      	ands	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	429a      	cmp	r2, r3
 800290a:	f040 8158 	bne.w	8002bbe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	4a9a      	ldr	r2, [pc, #616]	; (8002b7c <HAL_GPIO_Init+0x2a0>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d05e      	beq.n	80029d6 <HAL_GPIO_Init+0xfa>
 8002918:	4a98      	ldr	r2, [pc, #608]	; (8002b7c <HAL_GPIO_Init+0x2a0>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d875      	bhi.n	8002a0a <HAL_GPIO_Init+0x12e>
 800291e:	4a98      	ldr	r2, [pc, #608]	; (8002b80 <HAL_GPIO_Init+0x2a4>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d058      	beq.n	80029d6 <HAL_GPIO_Init+0xfa>
 8002924:	4a96      	ldr	r2, [pc, #600]	; (8002b80 <HAL_GPIO_Init+0x2a4>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d86f      	bhi.n	8002a0a <HAL_GPIO_Init+0x12e>
 800292a:	4a96      	ldr	r2, [pc, #600]	; (8002b84 <HAL_GPIO_Init+0x2a8>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d052      	beq.n	80029d6 <HAL_GPIO_Init+0xfa>
 8002930:	4a94      	ldr	r2, [pc, #592]	; (8002b84 <HAL_GPIO_Init+0x2a8>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d869      	bhi.n	8002a0a <HAL_GPIO_Init+0x12e>
 8002936:	4a94      	ldr	r2, [pc, #592]	; (8002b88 <HAL_GPIO_Init+0x2ac>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d04c      	beq.n	80029d6 <HAL_GPIO_Init+0xfa>
 800293c:	4a92      	ldr	r2, [pc, #584]	; (8002b88 <HAL_GPIO_Init+0x2ac>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d863      	bhi.n	8002a0a <HAL_GPIO_Init+0x12e>
 8002942:	4a92      	ldr	r2, [pc, #584]	; (8002b8c <HAL_GPIO_Init+0x2b0>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d046      	beq.n	80029d6 <HAL_GPIO_Init+0xfa>
 8002948:	4a90      	ldr	r2, [pc, #576]	; (8002b8c <HAL_GPIO_Init+0x2b0>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d85d      	bhi.n	8002a0a <HAL_GPIO_Init+0x12e>
 800294e:	2b12      	cmp	r3, #18
 8002950:	d82a      	bhi.n	80029a8 <HAL_GPIO_Init+0xcc>
 8002952:	2b12      	cmp	r3, #18
 8002954:	d859      	bhi.n	8002a0a <HAL_GPIO_Init+0x12e>
 8002956:	a201      	add	r2, pc, #4	; (adr r2, 800295c <HAL_GPIO_Init+0x80>)
 8002958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800295c:	080029d7 	.word	0x080029d7
 8002960:	080029b1 	.word	0x080029b1
 8002964:	080029c3 	.word	0x080029c3
 8002968:	08002a05 	.word	0x08002a05
 800296c:	08002a0b 	.word	0x08002a0b
 8002970:	08002a0b 	.word	0x08002a0b
 8002974:	08002a0b 	.word	0x08002a0b
 8002978:	08002a0b 	.word	0x08002a0b
 800297c:	08002a0b 	.word	0x08002a0b
 8002980:	08002a0b 	.word	0x08002a0b
 8002984:	08002a0b 	.word	0x08002a0b
 8002988:	08002a0b 	.word	0x08002a0b
 800298c:	08002a0b 	.word	0x08002a0b
 8002990:	08002a0b 	.word	0x08002a0b
 8002994:	08002a0b 	.word	0x08002a0b
 8002998:	08002a0b 	.word	0x08002a0b
 800299c:	08002a0b 	.word	0x08002a0b
 80029a0:	080029b9 	.word	0x080029b9
 80029a4:	080029cd 	.word	0x080029cd
 80029a8:	4a79      	ldr	r2, [pc, #484]	; (8002b90 <HAL_GPIO_Init+0x2b4>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d013      	beq.n	80029d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80029ae:	e02c      	b.n	8002a0a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	623b      	str	r3, [r7, #32]
          break;
 80029b6:	e029      	b.n	8002a0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	3304      	adds	r3, #4
 80029be:	623b      	str	r3, [r7, #32]
          break;
 80029c0:	e024      	b.n	8002a0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	3308      	adds	r3, #8
 80029c8:	623b      	str	r3, [r7, #32]
          break;
 80029ca:	e01f      	b.n	8002a0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	330c      	adds	r3, #12
 80029d2:	623b      	str	r3, [r7, #32]
          break;
 80029d4:	e01a      	b.n	8002a0c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d102      	bne.n	80029e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80029de:	2304      	movs	r3, #4
 80029e0:	623b      	str	r3, [r7, #32]
          break;
 80029e2:	e013      	b.n	8002a0c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d105      	bne.n	80029f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029ec:	2308      	movs	r3, #8
 80029ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	69fa      	ldr	r2, [r7, #28]
 80029f4:	611a      	str	r2, [r3, #16]
          break;
 80029f6:	e009      	b.n	8002a0c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029f8:	2308      	movs	r3, #8
 80029fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	69fa      	ldr	r2, [r7, #28]
 8002a00:	615a      	str	r2, [r3, #20]
          break;
 8002a02:	e003      	b.n	8002a0c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a04:	2300      	movs	r3, #0
 8002a06:	623b      	str	r3, [r7, #32]
          break;
 8002a08:	e000      	b.n	8002a0c <HAL_GPIO_Init+0x130>
          break;
 8002a0a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	2bff      	cmp	r3, #255	; 0xff
 8002a10:	d801      	bhi.n	8002a16 <HAL_GPIO_Init+0x13a>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	e001      	b.n	8002a1a <HAL_GPIO_Init+0x13e>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	3304      	adds	r3, #4
 8002a1a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	2bff      	cmp	r3, #255	; 0xff
 8002a20:	d802      	bhi.n	8002a28 <HAL_GPIO_Init+0x14c>
 8002a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	e002      	b.n	8002a2e <HAL_GPIO_Init+0x152>
 8002a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2a:	3b08      	subs	r3, #8
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	210f      	movs	r1, #15
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	fa01 f303 	lsl.w	r3, r1, r3
 8002a3c:	43db      	mvns	r3, r3
 8002a3e:	401a      	ands	r2, r3
 8002a40:	6a39      	ldr	r1, [r7, #32]
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	fa01 f303 	lsl.w	r3, r1, r3
 8002a48:	431a      	orrs	r2, r3
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f000 80b1 	beq.w	8002bbe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a5c:	4b4d      	ldr	r3, [pc, #308]	; (8002b94 <HAL_GPIO_Init+0x2b8>)
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	4a4c      	ldr	r2, [pc, #304]	; (8002b94 <HAL_GPIO_Init+0x2b8>)
 8002a62:	f043 0301 	orr.w	r3, r3, #1
 8002a66:	6193      	str	r3, [r2, #24]
 8002a68:	4b4a      	ldr	r3, [pc, #296]	; (8002b94 <HAL_GPIO_Init+0x2b8>)
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	60bb      	str	r3, [r7, #8]
 8002a72:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a74:	4a48      	ldr	r2, [pc, #288]	; (8002b98 <HAL_GPIO_Init+0x2bc>)
 8002a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a78:	089b      	lsrs	r3, r3, #2
 8002a7a:	3302      	adds	r3, #2
 8002a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a80:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a84:	f003 0303 	and.w	r3, r3, #3
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	220f      	movs	r2, #15
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	43db      	mvns	r3, r3
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	4013      	ands	r3, r2
 8002a96:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4a40      	ldr	r2, [pc, #256]	; (8002b9c <HAL_GPIO_Init+0x2c0>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d013      	beq.n	8002ac8 <HAL_GPIO_Init+0x1ec>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a3f      	ldr	r2, [pc, #252]	; (8002ba0 <HAL_GPIO_Init+0x2c4>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d00d      	beq.n	8002ac4 <HAL_GPIO_Init+0x1e8>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a3e      	ldr	r2, [pc, #248]	; (8002ba4 <HAL_GPIO_Init+0x2c8>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d007      	beq.n	8002ac0 <HAL_GPIO_Init+0x1e4>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a3d      	ldr	r2, [pc, #244]	; (8002ba8 <HAL_GPIO_Init+0x2cc>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d101      	bne.n	8002abc <HAL_GPIO_Init+0x1e0>
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e006      	b.n	8002aca <HAL_GPIO_Init+0x1ee>
 8002abc:	2304      	movs	r3, #4
 8002abe:	e004      	b.n	8002aca <HAL_GPIO_Init+0x1ee>
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	e002      	b.n	8002aca <HAL_GPIO_Init+0x1ee>
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e000      	b.n	8002aca <HAL_GPIO_Init+0x1ee>
 8002ac8:	2300      	movs	r3, #0
 8002aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002acc:	f002 0203 	and.w	r2, r2, #3
 8002ad0:	0092      	lsls	r2, r2, #2
 8002ad2:	4093      	lsls	r3, r2
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002ada:	492f      	ldr	r1, [pc, #188]	; (8002b98 <HAL_GPIO_Init+0x2bc>)
 8002adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ade:	089b      	lsrs	r3, r3, #2
 8002ae0:	3302      	adds	r3, #2
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d006      	beq.n	8002b02 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002af4:	4b2d      	ldr	r3, [pc, #180]	; (8002bac <HAL_GPIO_Init+0x2d0>)
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	492c      	ldr	r1, [pc, #176]	; (8002bac <HAL_GPIO_Init+0x2d0>)
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	600b      	str	r3, [r1, #0]
 8002b00:	e006      	b.n	8002b10 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b02:	4b2a      	ldr	r3, [pc, #168]	; (8002bac <HAL_GPIO_Init+0x2d0>)
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	4928      	ldr	r1, [pc, #160]	; (8002bac <HAL_GPIO_Init+0x2d0>)
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d006      	beq.n	8002b2a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b1c:	4b23      	ldr	r3, [pc, #140]	; (8002bac <HAL_GPIO_Init+0x2d0>)
 8002b1e:	685a      	ldr	r2, [r3, #4]
 8002b20:	4922      	ldr	r1, [pc, #136]	; (8002bac <HAL_GPIO_Init+0x2d0>)
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	604b      	str	r3, [r1, #4]
 8002b28:	e006      	b.n	8002b38 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b2a:	4b20      	ldr	r3, [pc, #128]	; (8002bac <HAL_GPIO_Init+0x2d0>)
 8002b2c:	685a      	ldr	r2, [r3, #4]
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	43db      	mvns	r3, r3
 8002b32:	491e      	ldr	r1, [pc, #120]	; (8002bac <HAL_GPIO_Init+0x2d0>)
 8002b34:	4013      	ands	r3, r2
 8002b36:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d006      	beq.n	8002b52 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b44:	4b19      	ldr	r3, [pc, #100]	; (8002bac <HAL_GPIO_Init+0x2d0>)
 8002b46:	689a      	ldr	r2, [r3, #8]
 8002b48:	4918      	ldr	r1, [pc, #96]	; (8002bac <HAL_GPIO_Init+0x2d0>)
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	608b      	str	r3, [r1, #8]
 8002b50:	e006      	b.n	8002b60 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b52:	4b16      	ldr	r3, [pc, #88]	; (8002bac <HAL_GPIO_Init+0x2d0>)
 8002b54:	689a      	ldr	r2, [r3, #8]
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	4914      	ldr	r1, [pc, #80]	; (8002bac <HAL_GPIO_Init+0x2d0>)
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d021      	beq.n	8002bb0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b6c:	4b0f      	ldr	r3, [pc, #60]	; (8002bac <HAL_GPIO_Init+0x2d0>)
 8002b6e:	68da      	ldr	r2, [r3, #12]
 8002b70:	490e      	ldr	r1, [pc, #56]	; (8002bac <HAL_GPIO_Init+0x2d0>)
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	60cb      	str	r3, [r1, #12]
 8002b78:	e021      	b.n	8002bbe <HAL_GPIO_Init+0x2e2>
 8002b7a:	bf00      	nop
 8002b7c:	10320000 	.word	0x10320000
 8002b80:	10310000 	.word	0x10310000
 8002b84:	10220000 	.word	0x10220000
 8002b88:	10210000 	.word	0x10210000
 8002b8c:	10120000 	.word	0x10120000
 8002b90:	10110000 	.word	0x10110000
 8002b94:	40021000 	.word	0x40021000
 8002b98:	40010000 	.word	0x40010000
 8002b9c:	40010800 	.word	0x40010800
 8002ba0:	40010c00 	.word	0x40010c00
 8002ba4:	40011000 	.word	0x40011000
 8002ba8:	40011400 	.word	0x40011400
 8002bac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002bb0:	4b0b      	ldr	r3, [pc, #44]	; (8002be0 <HAL_GPIO_Init+0x304>)
 8002bb2:	68da      	ldr	r2, [r3, #12]
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	43db      	mvns	r3, r3
 8002bb8:	4909      	ldr	r1, [pc, #36]	; (8002be0 <HAL_GPIO_Init+0x304>)
 8002bba:	4013      	ands	r3, r2
 8002bbc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bca:	fa22 f303 	lsr.w	r3, r2, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f47f ae8e 	bne.w	80028f0 <HAL_GPIO_Init+0x14>
  }
}
 8002bd4:	bf00      	nop
 8002bd6:	bf00      	nop
 8002bd8:	372c      	adds	r7, #44	; 0x2c
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bc80      	pop	{r7}
 8002bde:	4770      	bx	lr
 8002be0:	40010400 	.word	0x40010400

08002be4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b089      	sub	sp, #36	; 0x24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8002bf2:	e09a      	b.n	8002d2a <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f000 808d 	beq.w	8002d24 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8002c0a:	4a4e      	ldr	r2, [pc, #312]	; (8002d44 <HAL_GPIO_DeInit+0x160>)
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	089b      	lsrs	r3, r3, #2
 8002c10:	3302      	adds	r3, #2
 8002c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c16:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	f003 0303 	and.w	r3, r3, #3
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	220f      	movs	r2, #15
 8002c22:	fa02 f303 	lsl.w	r3, r2, r3
 8002c26:	697a      	ldr	r2, [r7, #20]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a46      	ldr	r2, [pc, #280]	; (8002d48 <HAL_GPIO_DeInit+0x164>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d013      	beq.n	8002c5c <HAL_GPIO_DeInit+0x78>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a45      	ldr	r2, [pc, #276]	; (8002d4c <HAL_GPIO_DeInit+0x168>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d00d      	beq.n	8002c58 <HAL_GPIO_DeInit+0x74>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a44      	ldr	r2, [pc, #272]	; (8002d50 <HAL_GPIO_DeInit+0x16c>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d007      	beq.n	8002c54 <HAL_GPIO_DeInit+0x70>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a43      	ldr	r2, [pc, #268]	; (8002d54 <HAL_GPIO_DeInit+0x170>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d101      	bne.n	8002c50 <HAL_GPIO_DeInit+0x6c>
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e006      	b.n	8002c5e <HAL_GPIO_DeInit+0x7a>
 8002c50:	2304      	movs	r3, #4
 8002c52:	e004      	b.n	8002c5e <HAL_GPIO_DeInit+0x7a>
 8002c54:	2302      	movs	r3, #2
 8002c56:	e002      	b.n	8002c5e <HAL_GPIO_DeInit+0x7a>
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e000      	b.n	8002c5e <HAL_GPIO_DeInit+0x7a>
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	69fa      	ldr	r2, [r7, #28]
 8002c60:	f002 0203 	and.w	r2, r2, #3
 8002c64:	0092      	lsls	r2, r2, #2
 8002c66:	4093      	lsls	r3, r2
 8002c68:	697a      	ldr	r2, [r7, #20]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d132      	bne.n	8002cd4 <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	f003 0303 	and.w	r3, r3, #3
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	220f      	movs	r2, #15
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8002c7e:	4a31      	ldr	r2, [pc, #196]	; (8002d44 <HAL_GPIO_DeInit+0x160>)
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	089b      	lsrs	r3, r3, #2
 8002c84:	3302      	adds	r3, #2
 8002c86:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	43da      	mvns	r2, r3
 8002c8e:	482d      	ldr	r0, [pc, #180]	; (8002d44 <HAL_GPIO_DeInit+0x160>)
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	089b      	lsrs	r3, r3, #2
 8002c94:	400a      	ands	r2, r1
 8002c96:	3302      	adds	r3, #2
 8002c98:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8002c9c:	4b2e      	ldr	r3, [pc, #184]	; (8002d58 <HAL_GPIO_DeInit+0x174>)
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	492c      	ldr	r1, [pc, #176]	; (8002d58 <HAL_GPIO_DeInit+0x174>)
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8002caa:	4b2b      	ldr	r3, [pc, #172]	; (8002d58 <HAL_GPIO_DeInit+0x174>)
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	4929      	ldr	r1, [pc, #164]	; (8002d58 <HAL_GPIO_DeInit+0x174>)
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8002cb8:	4b27      	ldr	r3, [pc, #156]	; (8002d58 <HAL_GPIO_DeInit+0x174>)
 8002cba:	689a      	ldr	r2, [r3, #8]
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	43db      	mvns	r3, r3
 8002cc0:	4925      	ldr	r1, [pc, #148]	; (8002d58 <HAL_GPIO_DeInit+0x174>)
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8002cc6:	4b24      	ldr	r3, [pc, #144]	; (8002d58 <HAL_GPIO_DeInit+0x174>)
 8002cc8:	68da      	ldr	r2, [r3, #12]
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	4922      	ldr	r1, [pc, #136]	; (8002d58 <HAL_GPIO_DeInit+0x174>)
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	2bff      	cmp	r3, #255	; 0xff
 8002cd8:	d801      	bhi.n	8002cde <HAL_GPIO_DeInit+0xfa>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	e001      	b.n	8002ce2 <HAL_GPIO_DeInit+0xfe>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	3304      	adds	r3, #4
 8002ce2:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	2bff      	cmp	r3, #255	; 0xff
 8002ce8:	d802      	bhi.n	8002cf0 <HAL_GPIO_DeInit+0x10c>
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	e002      	b.n	8002cf6 <HAL_GPIO_DeInit+0x112>
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	3b08      	subs	r3, #8
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	210f      	movs	r1, #15
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	fa01 f303 	lsl.w	r3, r1, r3
 8002d04:	43db      	mvns	r3, r3
 8002d06:	401a      	ands	r2, r3
 8002d08:	2104      	movs	r1, #4
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d10:	431a      	orrs	r2, r3
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68da      	ldr	r2, [r3, #12]
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	401a      	ands	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	60da      	str	r2, [r3, #12]
    }

    position++;
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	3301      	adds	r3, #1
 8002d28:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f47f af5e 	bne.w	8002bf4 <HAL_GPIO_DeInit+0x10>
  }
}
 8002d38:	bf00      	nop
 8002d3a:	bf00      	nop
 8002d3c:	3724      	adds	r7, #36	; 0x24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bc80      	pop	{r7}
 8002d42:	4770      	bx	lr
 8002d44:	40010000 	.word	0x40010000
 8002d48:	40010800 	.word	0x40010800
 8002d4c:	40010c00 	.word	0x40010c00
 8002d50:	40011000 	.word	0x40011000
 8002d54:	40011400 	.word	0x40011400
 8002d58:	40010400 	.word	0x40010400

08002d5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	460b      	mov	r3, r1
 8002d66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689a      	ldr	r2, [r3, #8]
 8002d6c:	887b      	ldrh	r3, [r7, #2]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d002      	beq.n	8002d7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d74:	2301      	movs	r3, #1
 8002d76:	73fb      	strb	r3, [r7, #15]
 8002d78:	e001      	b.n	8002d7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3714      	adds	r7, #20
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bc80      	pop	{r7}
 8002d88:	4770      	bx	lr

08002d8a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b083      	sub	sp, #12
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
 8002d92:	460b      	mov	r3, r1
 8002d94:	807b      	strh	r3, [r7, #2]
 8002d96:	4613      	mov	r3, r2
 8002d98:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d9a:	787b      	ldrb	r3, [r7, #1]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002da0:	887a      	ldrh	r2, [r7, #2]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002da6:	e003      	b.n	8002db0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002da8:	887b      	ldrh	r3, [r7, #2]
 8002daa:	041a      	lsls	r2, r3, #16
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	611a      	str	r2, [r3, #16]
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bc80      	pop	{r7}
 8002db8:	4770      	bx	lr
	...

08002dbc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002dc6:	4b08      	ldr	r3, [pc, #32]	; (8002de8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002dc8:	695a      	ldr	r2, [r3, #20]
 8002dca:	88fb      	ldrh	r3, [r7, #6]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d006      	beq.n	8002de0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002dd2:	4a05      	ldr	r2, [pc, #20]	; (8002de8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002dd4:	88fb      	ldrh	r3, [r7, #6]
 8002dd6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002dd8:	88fb      	ldrh	r3, [r7, #6]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7fe fb9c 	bl	8001518 <HAL_GPIO_EXTI_Callback>
  }
}
 8002de0:	bf00      	nop
 8002de2:	3708      	adds	r7, #8
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	40010400 	.word	0x40010400

08002dec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e26c      	b.n	80032d8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f000 8087 	beq.w	8002f1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e0c:	4b92      	ldr	r3, [pc, #584]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f003 030c 	and.w	r3, r3, #12
 8002e14:	2b04      	cmp	r3, #4
 8002e16:	d00c      	beq.n	8002e32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e18:	4b8f      	ldr	r3, [pc, #572]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f003 030c 	and.w	r3, r3, #12
 8002e20:	2b08      	cmp	r3, #8
 8002e22:	d112      	bne.n	8002e4a <HAL_RCC_OscConfig+0x5e>
 8002e24:	4b8c      	ldr	r3, [pc, #560]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e30:	d10b      	bne.n	8002e4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e32:	4b89      	ldr	r3, [pc, #548]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d06c      	beq.n	8002f18 <HAL_RCC_OscConfig+0x12c>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d168      	bne.n	8002f18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e246      	b.n	80032d8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e52:	d106      	bne.n	8002e62 <HAL_RCC_OscConfig+0x76>
 8002e54:	4b80      	ldr	r3, [pc, #512]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a7f      	ldr	r2, [pc, #508]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002e5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e5e:	6013      	str	r3, [r2, #0]
 8002e60:	e02e      	b.n	8002ec0 <HAL_RCC_OscConfig+0xd4>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10c      	bne.n	8002e84 <HAL_RCC_OscConfig+0x98>
 8002e6a:	4b7b      	ldr	r3, [pc, #492]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a7a      	ldr	r2, [pc, #488]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002e70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e74:	6013      	str	r3, [r2, #0]
 8002e76:	4b78      	ldr	r3, [pc, #480]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a77      	ldr	r2, [pc, #476]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002e7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e80:	6013      	str	r3, [r2, #0]
 8002e82:	e01d      	b.n	8002ec0 <HAL_RCC_OscConfig+0xd4>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e8c:	d10c      	bne.n	8002ea8 <HAL_RCC_OscConfig+0xbc>
 8002e8e:	4b72      	ldr	r3, [pc, #456]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a71      	ldr	r2, [pc, #452]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002e94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e98:	6013      	str	r3, [r2, #0]
 8002e9a:	4b6f      	ldr	r3, [pc, #444]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a6e      	ldr	r2, [pc, #440]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ea4:	6013      	str	r3, [r2, #0]
 8002ea6:	e00b      	b.n	8002ec0 <HAL_RCC_OscConfig+0xd4>
 8002ea8:	4b6b      	ldr	r3, [pc, #428]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a6a      	ldr	r2, [pc, #424]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002eae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eb2:	6013      	str	r3, [r2, #0]
 8002eb4:	4b68      	ldr	r3, [pc, #416]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a67      	ldr	r2, [pc, #412]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002eba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ebe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d013      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec8:	f7fe fe12 	bl	8001af0 <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ed0:	f7fe fe0e 	bl	8001af0 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b64      	cmp	r3, #100	; 0x64
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e1fa      	b.n	80032d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ee2:	4b5d      	ldr	r3, [pc, #372]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d0f0      	beq.n	8002ed0 <HAL_RCC_OscConfig+0xe4>
 8002eee:	e014      	b.n	8002f1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef0:	f7fe fdfe 	bl	8001af0 <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ef8:	f7fe fdfa 	bl	8001af0 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b64      	cmp	r3, #100	; 0x64
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e1e6      	b.n	80032d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f0a:	4b53      	ldr	r3, [pc, #332]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1f0      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x10c>
 8002f16:	e000      	b.n	8002f1a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d063      	beq.n	8002fee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f26:	4b4c      	ldr	r3, [pc, #304]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f003 030c 	and.w	r3, r3, #12
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00b      	beq.n	8002f4a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f32:	4b49      	ldr	r3, [pc, #292]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f003 030c 	and.w	r3, r3, #12
 8002f3a:	2b08      	cmp	r3, #8
 8002f3c:	d11c      	bne.n	8002f78 <HAL_RCC_OscConfig+0x18c>
 8002f3e:	4b46      	ldr	r3, [pc, #280]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d116      	bne.n	8002f78 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f4a:	4b43      	ldr	r3, [pc, #268]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d005      	beq.n	8002f62 <HAL_RCC_OscConfig+0x176>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d001      	beq.n	8002f62 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e1ba      	b.n	80032d8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f62:	4b3d      	ldr	r3, [pc, #244]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	4939      	ldr	r1, [pc, #228]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f76:	e03a      	b.n	8002fee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d020      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f80:	4b36      	ldr	r3, [pc, #216]	; (800305c <HAL_RCC_OscConfig+0x270>)
 8002f82:	2201      	movs	r2, #1
 8002f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f86:	f7fe fdb3 	bl	8001af0 <HAL_GetTick>
 8002f8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f8c:	e008      	b.n	8002fa0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f8e:	f7fe fdaf 	bl	8001af0 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e19b      	b.n	80032d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa0:	4b2d      	ldr	r3, [pc, #180]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d0f0      	beq.n	8002f8e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fac:	4b2a      	ldr	r3, [pc, #168]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	00db      	lsls	r3, r3, #3
 8002fba:	4927      	ldr	r1, [pc, #156]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	600b      	str	r3, [r1, #0]
 8002fc0:	e015      	b.n	8002fee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fc2:	4b26      	ldr	r3, [pc, #152]	; (800305c <HAL_RCC_OscConfig+0x270>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc8:	f7fe fd92 	bl	8001af0 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fd0:	f7fe fd8e 	bl	8001af0 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e17a      	b.n	80032d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fe2:	4b1d      	ldr	r3, [pc, #116]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1f0      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0308 	and.w	r3, r3, #8
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d03a      	beq.n	8003070 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d019      	beq.n	8003036 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003002:	4b17      	ldr	r3, [pc, #92]	; (8003060 <HAL_RCC_OscConfig+0x274>)
 8003004:	2201      	movs	r2, #1
 8003006:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003008:	f7fe fd72 	bl	8001af0 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003010:	f7fe fd6e 	bl	8001af0 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e15a      	b.n	80032d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003022:	4b0d      	ldr	r3, [pc, #52]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8003024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0f0      	beq.n	8003010 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800302e:	2001      	movs	r0, #1
 8003030:	f000 fad8 	bl	80035e4 <RCC_Delay>
 8003034:	e01c      	b.n	8003070 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003036:	4b0a      	ldr	r3, [pc, #40]	; (8003060 <HAL_RCC_OscConfig+0x274>)
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800303c:	f7fe fd58 	bl	8001af0 <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003042:	e00f      	b.n	8003064 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003044:	f7fe fd54 	bl	8001af0 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d908      	bls.n	8003064 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e140      	b.n	80032d8 <HAL_RCC_OscConfig+0x4ec>
 8003056:	bf00      	nop
 8003058:	40021000 	.word	0x40021000
 800305c:	42420000 	.word	0x42420000
 8003060:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003064:	4b9e      	ldr	r3, [pc, #632]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 8003066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1e9      	bne.n	8003044 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0304 	and.w	r3, r3, #4
 8003078:	2b00      	cmp	r3, #0
 800307a:	f000 80a6 	beq.w	80031ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800307e:	2300      	movs	r3, #0
 8003080:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003082:	4b97      	ldr	r3, [pc, #604]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 8003084:	69db      	ldr	r3, [r3, #28]
 8003086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d10d      	bne.n	80030aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800308e:	4b94      	ldr	r3, [pc, #592]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	4a93      	ldr	r2, [pc, #588]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 8003094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003098:	61d3      	str	r3, [r2, #28]
 800309a:	4b91      	ldr	r3, [pc, #580]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a2:	60bb      	str	r3, [r7, #8]
 80030a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030a6:	2301      	movs	r3, #1
 80030a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030aa:	4b8e      	ldr	r3, [pc, #568]	; (80032e4 <HAL_RCC_OscConfig+0x4f8>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d118      	bne.n	80030e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030b6:	4b8b      	ldr	r3, [pc, #556]	; (80032e4 <HAL_RCC_OscConfig+0x4f8>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a8a      	ldr	r2, [pc, #552]	; (80032e4 <HAL_RCC_OscConfig+0x4f8>)
 80030bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030c2:	f7fe fd15 	bl	8001af0 <HAL_GetTick>
 80030c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c8:	e008      	b.n	80030dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ca:	f7fe fd11 	bl	8001af0 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b64      	cmp	r3, #100	; 0x64
 80030d6:	d901      	bls.n	80030dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e0fd      	b.n	80032d8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030dc:	4b81      	ldr	r3, [pc, #516]	; (80032e4 <HAL_RCC_OscConfig+0x4f8>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d0f0      	beq.n	80030ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d106      	bne.n	80030fe <HAL_RCC_OscConfig+0x312>
 80030f0:	4b7b      	ldr	r3, [pc, #492]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 80030f2:	6a1b      	ldr	r3, [r3, #32]
 80030f4:	4a7a      	ldr	r2, [pc, #488]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 80030f6:	f043 0301 	orr.w	r3, r3, #1
 80030fa:	6213      	str	r3, [r2, #32]
 80030fc:	e02d      	b.n	800315a <HAL_RCC_OscConfig+0x36e>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10c      	bne.n	8003120 <HAL_RCC_OscConfig+0x334>
 8003106:	4b76      	ldr	r3, [pc, #472]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	4a75      	ldr	r2, [pc, #468]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 800310c:	f023 0301 	bic.w	r3, r3, #1
 8003110:	6213      	str	r3, [r2, #32]
 8003112:	4b73      	ldr	r3, [pc, #460]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	4a72      	ldr	r2, [pc, #456]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 8003118:	f023 0304 	bic.w	r3, r3, #4
 800311c:	6213      	str	r3, [r2, #32]
 800311e:	e01c      	b.n	800315a <HAL_RCC_OscConfig+0x36e>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	2b05      	cmp	r3, #5
 8003126:	d10c      	bne.n	8003142 <HAL_RCC_OscConfig+0x356>
 8003128:	4b6d      	ldr	r3, [pc, #436]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 800312a:	6a1b      	ldr	r3, [r3, #32]
 800312c:	4a6c      	ldr	r2, [pc, #432]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 800312e:	f043 0304 	orr.w	r3, r3, #4
 8003132:	6213      	str	r3, [r2, #32]
 8003134:	4b6a      	ldr	r3, [pc, #424]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	4a69      	ldr	r2, [pc, #420]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 800313a:	f043 0301 	orr.w	r3, r3, #1
 800313e:	6213      	str	r3, [r2, #32]
 8003140:	e00b      	b.n	800315a <HAL_RCC_OscConfig+0x36e>
 8003142:	4b67      	ldr	r3, [pc, #412]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	4a66      	ldr	r2, [pc, #408]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 8003148:	f023 0301 	bic.w	r3, r3, #1
 800314c:	6213      	str	r3, [r2, #32]
 800314e:	4b64      	ldr	r3, [pc, #400]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 8003150:	6a1b      	ldr	r3, [r3, #32]
 8003152:	4a63      	ldr	r2, [pc, #396]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 8003154:	f023 0304 	bic.w	r3, r3, #4
 8003158:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d015      	beq.n	800318e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003162:	f7fe fcc5 	bl	8001af0 <HAL_GetTick>
 8003166:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003168:	e00a      	b.n	8003180 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800316a:	f7fe fcc1 	bl	8001af0 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	f241 3288 	movw	r2, #5000	; 0x1388
 8003178:	4293      	cmp	r3, r2
 800317a:	d901      	bls.n	8003180 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e0ab      	b.n	80032d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003180:	4b57      	ldr	r3, [pc, #348]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d0ee      	beq.n	800316a <HAL_RCC_OscConfig+0x37e>
 800318c:	e014      	b.n	80031b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800318e:	f7fe fcaf 	bl	8001af0 <HAL_GetTick>
 8003192:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003194:	e00a      	b.n	80031ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003196:	f7fe fcab 	bl	8001af0 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d901      	bls.n	80031ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e095      	b.n	80032d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031ac:	4b4c      	ldr	r3, [pc, #304]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d1ee      	bne.n	8003196 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031b8:	7dfb      	ldrb	r3, [r7, #23]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d105      	bne.n	80031ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031be:	4b48      	ldr	r3, [pc, #288]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 80031c0:	69db      	ldr	r3, [r3, #28]
 80031c2:	4a47      	ldr	r2, [pc, #284]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 80031c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	69db      	ldr	r3, [r3, #28]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 8081 	beq.w	80032d6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031d4:	4b42      	ldr	r3, [pc, #264]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f003 030c 	and.w	r3, r3, #12
 80031dc:	2b08      	cmp	r3, #8
 80031de:	d061      	beq.n	80032a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	69db      	ldr	r3, [r3, #28]
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d146      	bne.n	8003276 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031e8:	4b3f      	ldr	r3, [pc, #252]	; (80032e8 <HAL_RCC_OscConfig+0x4fc>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ee:	f7fe fc7f 	bl	8001af0 <HAL_GetTick>
 80031f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031f4:	e008      	b.n	8003208 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f6:	f7fe fc7b 	bl	8001af0 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	2b02      	cmp	r3, #2
 8003202:	d901      	bls.n	8003208 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e067      	b.n	80032d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003208:	4b35      	ldr	r3, [pc, #212]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d1f0      	bne.n	80031f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800321c:	d108      	bne.n	8003230 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800321e:	4b30      	ldr	r3, [pc, #192]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	492d      	ldr	r1, [pc, #180]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 800322c:	4313      	orrs	r3, r2
 800322e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003230:	4b2b      	ldr	r3, [pc, #172]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a19      	ldr	r1, [r3, #32]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003240:	430b      	orrs	r3, r1
 8003242:	4927      	ldr	r1, [pc, #156]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 8003244:	4313      	orrs	r3, r2
 8003246:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003248:	4b27      	ldr	r3, [pc, #156]	; (80032e8 <HAL_RCC_OscConfig+0x4fc>)
 800324a:	2201      	movs	r2, #1
 800324c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800324e:	f7fe fc4f 	bl	8001af0 <HAL_GetTick>
 8003252:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003254:	e008      	b.n	8003268 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003256:	f7fe fc4b 	bl	8001af0 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d901      	bls.n	8003268 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e037      	b.n	80032d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003268:	4b1d      	ldr	r3, [pc, #116]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d0f0      	beq.n	8003256 <HAL_RCC_OscConfig+0x46a>
 8003274:	e02f      	b.n	80032d6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003276:	4b1c      	ldr	r3, [pc, #112]	; (80032e8 <HAL_RCC_OscConfig+0x4fc>)
 8003278:	2200      	movs	r2, #0
 800327a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327c:	f7fe fc38 	bl	8001af0 <HAL_GetTick>
 8003280:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003282:	e008      	b.n	8003296 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003284:	f7fe fc34 	bl	8001af0 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b02      	cmp	r3, #2
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e020      	b.n	80032d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003296:	4b12      	ldr	r3, [pc, #72]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1f0      	bne.n	8003284 <HAL_RCC_OscConfig+0x498>
 80032a2:	e018      	b.n	80032d6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	69db      	ldr	r3, [r3, #28]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d101      	bne.n	80032b0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e013      	b.n	80032d8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032b0:	4b0b      	ldr	r3, [pc, #44]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a1b      	ldr	r3, [r3, #32]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d106      	bne.n	80032d2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d001      	beq.n	80032d6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e000      	b.n	80032d8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3718      	adds	r7, #24
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	40021000 	.word	0x40021000
 80032e4:	40007000 	.word	0x40007000
 80032e8:	42420060 	.word	0x42420060

080032ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d101      	bne.n	8003300 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e0d0      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003300:	4b6a      	ldr	r3, [pc, #424]	; (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	683a      	ldr	r2, [r7, #0]
 800330a:	429a      	cmp	r2, r3
 800330c:	d910      	bls.n	8003330 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800330e:	4b67      	ldr	r3, [pc, #412]	; (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f023 0207 	bic.w	r2, r3, #7
 8003316:	4965      	ldr	r1, [pc, #404]	; (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	4313      	orrs	r3, r2
 800331c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800331e:	4b63      	ldr	r3, [pc, #396]	; (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0307 	and.w	r3, r3, #7
 8003326:	683a      	ldr	r2, [r7, #0]
 8003328:	429a      	cmp	r2, r3
 800332a:	d001      	beq.n	8003330 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e0b8      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d020      	beq.n	800337e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b00      	cmp	r3, #0
 8003346:	d005      	beq.n	8003354 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003348:	4b59      	ldr	r3, [pc, #356]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	4a58      	ldr	r2, [pc, #352]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 800334e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003352:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0308 	and.w	r3, r3, #8
 800335c:	2b00      	cmp	r3, #0
 800335e:	d005      	beq.n	800336c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003360:	4b53      	ldr	r3, [pc, #332]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	4a52      	ldr	r2, [pc, #328]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003366:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800336a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800336c:	4b50      	ldr	r3, [pc, #320]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	494d      	ldr	r1, [pc, #308]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 800337a:	4313      	orrs	r3, r2
 800337c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d040      	beq.n	800340c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d107      	bne.n	80033a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003392:	4b47      	ldr	r3, [pc, #284]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d115      	bne.n	80033ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e07f      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d107      	bne.n	80033ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033aa:	4b41      	ldr	r3, [pc, #260]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d109      	bne.n	80033ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e073      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ba:	4b3d      	ldr	r3, [pc, #244]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e06b      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033ca:	4b39      	ldr	r3, [pc, #228]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f023 0203 	bic.w	r2, r3, #3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	4936      	ldr	r1, [pc, #216]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033dc:	f7fe fb88 	bl	8001af0 <HAL_GetTick>
 80033e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033e2:	e00a      	b.n	80033fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033e4:	f7fe fb84 	bl	8001af0 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e053      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033fa:	4b2d      	ldr	r3, [pc, #180]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f003 020c 	and.w	r2, r3, #12
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	429a      	cmp	r2, r3
 800340a:	d1eb      	bne.n	80033e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800340c:	4b27      	ldr	r3, [pc, #156]	; (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0307 	and.w	r3, r3, #7
 8003414:	683a      	ldr	r2, [r7, #0]
 8003416:	429a      	cmp	r2, r3
 8003418:	d210      	bcs.n	800343c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800341a:	4b24      	ldr	r3, [pc, #144]	; (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f023 0207 	bic.w	r2, r3, #7
 8003422:	4922      	ldr	r1, [pc, #136]	; (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	4313      	orrs	r3, r2
 8003428:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800342a:	4b20      	ldr	r3, [pc, #128]	; (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0307 	and.w	r3, r3, #7
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	429a      	cmp	r2, r3
 8003436:	d001      	beq.n	800343c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e032      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0304 	and.w	r3, r3, #4
 8003444:	2b00      	cmp	r3, #0
 8003446:	d008      	beq.n	800345a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003448:	4b19      	ldr	r3, [pc, #100]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	4916      	ldr	r1, [pc, #88]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003456:	4313      	orrs	r3, r2
 8003458:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0308 	and.w	r3, r3, #8
 8003462:	2b00      	cmp	r3, #0
 8003464:	d009      	beq.n	800347a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003466:	4b12      	ldr	r3, [pc, #72]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	490e      	ldr	r1, [pc, #56]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003476:	4313      	orrs	r3, r2
 8003478:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800347a:	f000 f821 	bl	80034c0 <HAL_RCC_GetSysClockFreq>
 800347e:	4602      	mov	r2, r0
 8003480:	4b0b      	ldr	r3, [pc, #44]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	091b      	lsrs	r3, r3, #4
 8003486:	f003 030f 	and.w	r3, r3, #15
 800348a:	490a      	ldr	r1, [pc, #40]	; (80034b4 <HAL_RCC_ClockConfig+0x1c8>)
 800348c:	5ccb      	ldrb	r3, [r1, r3]
 800348e:	fa22 f303 	lsr.w	r3, r2, r3
 8003492:	4a09      	ldr	r2, [pc, #36]	; (80034b8 <HAL_RCC_ClockConfig+0x1cc>)
 8003494:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003496:	4b09      	ldr	r3, [pc, #36]	; (80034bc <HAL_RCC_ClockConfig+0x1d0>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f7fe fae6 	bl	8001a6c <HAL_InitTick>

  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	40022000 	.word	0x40022000
 80034b0:	40021000 	.word	0x40021000
 80034b4:	08006c48 	.word	0x08006c48
 80034b8:	20000000 	.word	0x20000000
 80034bc:	20000004 	.word	0x20000004

080034c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034c0:	b490      	push	{r4, r7}
 80034c2:	b08a      	sub	sp, #40	; 0x28
 80034c4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80034c6:	4b2a      	ldr	r3, [pc, #168]	; (8003570 <HAL_RCC_GetSysClockFreq+0xb0>)
 80034c8:	1d3c      	adds	r4, r7, #4
 80034ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80034d0:	f240 2301 	movw	r3, #513	; 0x201
 80034d4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034d6:	2300      	movs	r3, #0
 80034d8:	61fb      	str	r3, [r7, #28]
 80034da:	2300      	movs	r3, #0
 80034dc:	61bb      	str	r3, [r7, #24]
 80034de:	2300      	movs	r3, #0
 80034e0:	627b      	str	r3, [r7, #36]	; 0x24
 80034e2:	2300      	movs	r3, #0
 80034e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80034e6:	2300      	movs	r3, #0
 80034e8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80034ea:	4b22      	ldr	r3, [pc, #136]	; (8003574 <HAL_RCC_GetSysClockFreq+0xb4>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	f003 030c 	and.w	r3, r3, #12
 80034f6:	2b04      	cmp	r3, #4
 80034f8:	d002      	beq.n	8003500 <HAL_RCC_GetSysClockFreq+0x40>
 80034fa:	2b08      	cmp	r3, #8
 80034fc:	d003      	beq.n	8003506 <HAL_RCC_GetSysClockFreq+0x46>
 80034fe:	e02d      	b.n	800355c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003500:	4b1d      	ldr	r3, [pc, #116]	; (8003578 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003502:	623b      	str	r3, [r7, #32]
      break;
 8003504:	e02d      	b.n	8003562 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	0c9b      	lsrs	r3, r3, #18
 800350a:	f003 030f 	and.w	r3, r3, #15
 800350e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003512:	4413      	add	r3, r2
 8003514:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003518:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d013      	beq.n	800354c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003524:	4b13      	ldr	r3, [pc, #76]	; (8003574 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	0c5b      	lsrs	r3, r3, #17
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003532:	4413      	add	r3, r2
 8003534:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003538:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	4a0e      	ldr	r2, [pc, #56]	; (8003578 <HAL_RCC_GetSysClockFreq+0xb8>)
 800353e:	fb02 f203 	mul.w	r2, r2, r3
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	fbb2 f3f3 	udiv	r3, r2, r3
 8003548:	627b      	str	r3, [r7, #36]	; 0x24
 800354a:	e004      	b.n	8003556 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	4a0b      	ldr	r2, [pc, #44]	; (800357c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003550:	fb02 f303 	mul.w	r3, r2, r3
 8003554:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003558:	623b      	str	r3, [r7, #32]
      break;
 800355a:	e002      	b.n	8003562 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800355c:	4b06      	ldr	r3, [pc, #24]	; (8003578 <HAL_RCC_GetSysClockFreq+0xb8>)
 800355e:	623b      	str	r3, [r7, #32]
      break;
 8003560:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003562:	6a3b      	ldr	r3, [r7, #32]
}
 8003564:	4618      	mov	r0, r3
 8003566:	3728      	adds	r7, #40	; 0x28
 8003568:	46bd      	mov	sp, r7
 800356a:	bc90      	pop	{r4, r7}
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	080067cc 	.word	0x080067cc
 8003574:	40021000 	.word	0x40021000
 8003578:	007a1200 	.word	0x007a1200
 800357c:	003d0900 	.word	0x003d0900

08003580 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003584:	4b02      	ldr	r3, [pc, #8]	; (8003590 <HAL_RCC_GetHCLKFreq+0x10>)
 8003586:	681b      	ldr	r3, [r3, #0]
}
 8003588:	4618      	mov	r0, r3
 800358a:	46bd      	mov	sp, r7
 800358c:	bc80      	pop	{r7}
 800358e:	4770      	bx	lr
 8003590:	20000000 	.word	0x20000000

08003594 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003598:	f7ff fff2 	bl	8003580 <HAL_RCC_GetHCLKFreq>
 800359c:	4602      	mov	r2, r0
 800359e:	4b05      	ldr	r3, [pc, #20]	; (80035b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	0a1b      	lsrs	r3, r3, #8
 80035a4:	f003 0307 	and.w	r3, r3, #7
 80035a8:	4903      	ldr	r1, [pc, #12]	; (80035b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035aa:	5ccb      	ldrb	r3, [r1, r3]
 80035ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	40021000 	.word	0x40021000
 80035b8:	08006c58 	.word	0x08006c58

080035bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035c0:	f7ff ffde 	bl	8003580 <HAL_RCC_GetHCLKFreq>
 80035c4:	4602      	mov	r2, r0
 80035c6:	4b05      	ldr	r3, [pc, #20]	; (80035dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	0adb      	lsrs	r3, r3, #11
 80035cc:	f003 0307 	and.w	r3, r3, #7
 80035d0:	4903      	ldr	r1, [pc, #12]	; (80035e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035d2:	5ccb      	ldrb	r3, [r1, r3]
 80035d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035d8:	4618      	mov	r0, r3
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	40021000 	.word	0x40021000
 80035e0:	08006c58 	.word	0x08006c58

080035e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80035ec:	4b0a      	ldr	r3, [pc, #40]	; (8003618 <RCC_Delay+0x34>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a0a      	ldr	r2, [pc, #40]	; (800361c <RCC_Delay+0x38>)
 80035f2:	fba2 2303 	umull	r2, r3, r2, r3
 80035f6:	0a5b      	lsrs	r3, r3, #9
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	fb02 f303 	mul.w	r3, r2, r3
 80035fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003600:	bf00      	nop
  }
  while (Delay --);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	1e5a      	subs	r2, r3, #1
 8003606:	60fa      	str	r2, [r7, #12]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1f9      	bne.n	8003600 <RCC_Delay+0x1c>
}
 800360c:	bf00      	nop
 800360e:	bf00      	nop
 8003610:	3714      	adds	r7, #20
 8003612:	46bd      	mov	sp, r7
 8003614:	bc80      	pop	{r7}
 8003616:	4770      	bx	lr
 8003618:	20000000 	.word	0x20000000
 800361c:	10624dd3 	.word	0x10624dd3

08003620 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003628:	2300      	movs	r3, #0
 800362a:	613b      	str	r3, [r7, #16]
 800362c:	2300      	movs	r3, #0
 800362e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	2b00      	cmp	r3, #0
 800363a:	d07d      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800363c:	2300      	movs	r3, #0
 800363e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003640:	4b4f      	ldr	r3, [pc, #316]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003642:	69db      	ldr	r3, [r3, #28]
 8003644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d10d      	bne.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800364c:	4b4c      	ldr	r3, [pc, #304]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800364e:	69db      	ldr	r3, [r3, #28]
 8003650:	4a4b      	ldr	r2, [pc, #300]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003656:	61d3      	str	r3, [r2, #28]
 8003658:	4b49      	ldr	r3, [pc, #292]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800365a:	69db      	ldr	r3, [r3, #28]
 800365c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003660:	60bb      	str	r3, [r7, #8]
 8003662:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003664:	2301      	movs	r3, #1
 8003666:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003668:	4b46      	ldr	r3, [pc, #280]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003670:	2b00      	cmp	r3, #0
 8003672:	d118      	bne.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003674:	4b43      	ldr	r3, [pc, #268]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a42      	ldr	r2, [pc, #264]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800367a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800367e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003680:	f7fe fa36 	bl	8001af0 <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003686:	e008      	b.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003688:	f7fe fa32 	bl	8001af0 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b64      	cmp	r3, #100	; 0x64
 8003694:	d901      	bls.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e06d      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800369a:	4b3a      	ldr	r3, [pc, #232]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d0f0      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036a6:	4b36      	ldr	r3, [pc, #216]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ae:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d02e      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d027      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036c4:	4b2e      	ldr	r3, [pc, #184]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036c6:	6a1b      	ldr	r3, [r3, #32]
 80036c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036cc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036ce:	4b2e      	ldr	r3, [pc, #184]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036d0:	2201      	movs	r2, #1
 80036d2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036d4:	4b2c      	ldr	r3, [pc, #176]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80036da:	4a29      	ldr	r2, [pc, #164]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d014      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ea:	f7fe fa01 	bl	8001af0 <HAL_GetTick>
 80036ee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f0:	e00a      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036f2:	f7fe f9fd 	bl	8001af0 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003700:	4293      	cmp	r3, r2
 8003702:	d901      	bls.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e036      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003708:	4b1d      	ldr	r3, [pc, #116]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800370a:	6a1b      	ldr	r3, [r3, #32]
 800370c:	f003 0302 	and.w	r3, r3, #2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d0ee      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003714:	4b1a      	ldr	r3, [pc, #104]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003716:	6a1b      	ldr	r3, [r3, #32]
 8003718:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	4917      	ldr	r1, [pc, #92]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003722:	4313      	orrs	r3, r2
 8003724:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003726:	7dfb      	ldrb	r3, [r7, #23]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d105      	bne.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800372c:	4b14      	ldr	r3, [pc, #80]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800372e:	69db      	ldr	r3, [r3, #28]
 8003730:	4a13      	ldr	r2, [pc, #76]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003732:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003736:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d008      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003744:	4b0e      	ldr	r3, [pc, #56]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	490b      	ldr	r1, [pc, #44]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003752:	4313      	orrs	r3, r2
 8003754:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0310 	and.w	r3, r3, #16
 800375e:	2b00      	cmp	r3, #0
 8003760:	d008      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003762:	4b07      	ldr	r3, [pc, #28]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	4904      	ldr	r1, [pc, #16]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003770:	4313      	orrs	r3, r2
 8003772:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3718      	adds	r7, #24
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	40021000 	.word	0x40021000
 8003784:	40007000 	.word	0x40007000
 8003788:	42420440 	.word	0x42420440

0800378c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800378c:	b590      	push	{r4, r7, lr}
 800378e:	b08d      	sub	sp, #52	; 0x34
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003794:	4b5a      	ldr	r3, [pc, #360]	; (8003900 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003796:	f107 040c 	add.w	r4, r7, #12
 800379a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800379c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80037a0:	f240 2301 	movw	r3, #513	; 0x201
 80037a4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80037a6:	2300      	movs	r3, #0
 80037a8:	627b      	str	r3, [r7, #36]	; 0x24
 80037aa:	2300      	movs	r3, #0
 80037ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037ae:	2300      	movs	r3, #0
 80037b0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80037b2:	2300      	movs	r3, #0
 80037b4:	61fb      	str	r3, [r7, #28]
 80037b6:	2300      	movs	r3, #0
 80037b8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2b10      	cmp	r3, #16
 80037be:	d00a      	beq.n	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2b10      	cmp	r3, #16
 80037c4:	f200 8091 	bhi.w	80038ea <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d04c      	beq.n	8003868 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d07c      	beq.n	80038ce <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80037d4:	e089      	b.n	80038ea <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 80037d6:	4b4b      	ldr	r3, [pc, #300]	; (8003904 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80037dc:	4b49      	ldr	r3, [pc, #292]	; (8003904 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f000 8082 	beq.w	80038ee <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	0c9b      	lsrs	r3, r3, #18
 80037ee:	f003 030f 	and.w	r3, r3, #15
 80037f2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80037f6:	4413      	add	r3, r2
 80037f8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80037fc:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d018      	beq.n	800383a <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003808:	4b3e      	ldr	r3, [pc, #248]	; (8003904 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	0c5b      	lsrs	r3, r3, #17
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003816:	4413      	add	r3, r2
 8003818:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800381c:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00d      	beq.n	8003844 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003828:	4a37      	ldr	r2, [pc, #220]	; (8003908 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 800382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003830:	6a3b      	ldr	r3, [r7, #32]
 8003832:	fb02 f303 	mul.w	r3, r2, r3
 8003836:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003838:	e004      	b.n	8003844 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800383a:	6a3b      	ldr	r3, [r7, #32]
 800383c:	4a33      	ldr	r2, [pc, #204]	; (800390c <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 800383e:	fb02 f303 	mul.w	r3, r2, r3
 8003842:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003844:	4b2f      	ldr	r3, [pc, #188]	; (8003904 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800384c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003850:	d102      	bne.n	8003858 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8003852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003854:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003856:	e04a      	b.n	80038ee <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8003858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800385a:	005b      	lsls	r3, r3, #1
 800385c:	4a2c      	ldr	r2, [pc, #176]	; (8003910 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 800385e:	fba2 2303 	umull	r2, r3, r2, r3
 8003862:	085b      	lsrs	r3, r3, #1
 8003864:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003866:	e042      	b.n	80038ee <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8003868:	4b26      	ldr	r3, [pc, #152]	; (8003904 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800386a:	6a1b      	ldr	r3, [r3, #32]
 800386c:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003874:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003878:	d108      	bne.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d003      	beq.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8003884:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003888:	62bb      	str	r3, [r7, #40]	; 0x28
 800388a:	e01f      	b.n	80038cc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003892:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003896:	d109      	bne.n	80038ac <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8003898:	4b1a      	ldr	r3, [pc, #104]	; (8003904 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800389a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d003      	beq.n	80038ac <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 80038a4:	f649 4340 	movw	r3, #40000	; 0x9c40
 80038a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80038aa:	e00f      	b.n	80038cc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038b6:	d11c      	bne.n	80038f2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80038b8:	4b12      	ldr	r3, [pc, #72]	; (8003904 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d016      	beq.n	80038f2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 80038c4:	f24f 4324 	movw	r3, #62500	; 0xf424
 80038c8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80038ca:	e012      	b.n	80038f2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80038cc:	e011      	b.n	80038f2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80038ce:	f7ff fe75 	bl	80035bc <HAL_RCC_GetPCLK2Freq>
 80038d2:	4602      	mov	r2, r0
 80038d4:	4b0b      	ldr	r3, [pc, #44]	; (8003904 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	0b9b      	lsrs	r3, r3, #14
 80038da:	f003 0303 	and.w	r3, r3, #3
 80038de:	3301      	adds	r3, #1
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80038e8:	e004      	b.n	80038f4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80038ea:	bf00      	nop
 80038ec:	e002      	b.n	80038f4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80038ee:	bf00      	nop
 80038f0:	e000      	b.n	80038f4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80038f2:	bf00      	nop
    }
  }
  return (frequency);
 80038f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3734      	adds	r7, #52	; 0x34
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd90      	pop	{r4, r7, pc}
 80038fe:	bf00      	nop
 8003900:	080067dc 	.word	0x080067dc
 8003904:	40021000 	.word	0x40021000
 8003908:	007a1200 	.word	0x007a1200
 800390c:	003d0900 	.word	0x003d0900
 8003910:	aaaaaaab 	.word	0xaaaaaaab

08003914 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e041      	b.n	80039aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b00      	cmp	r3, #0
 8003930:	d106      	bne.n	8003940 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f7fd fe6a 	bl	8001614 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2202      	movs	r2, #2
 8003944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	3304      	adds	r3, #4
 8003950:	4619      	mov	r1, r3
 8003952:	4610      	mov	r0, r2
 8003954:	f000 fb00 	bl	8003f58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b082      	sub	sp, #8
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2202      	movs	r2, #2
 80039be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	6a1a      	ldr	r2, [r3, #32]
 80039c8:	f241 1311 	movw	r3, #4369	; 0x1111
 80039cc:	4013      	ands	r3, r2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d10f      	bne.n	80039f2 <HAL_TIM_Base_DeInit+0x40>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	6a1a      	ldr	r2, [r3, #32]
 80039d8:	f240 4344 	movw	r3, #1092	; 0x444
 80039dc:	4013      	ands	r3, r2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d107      	bne.n	80039f2 <HAL_TIM_Base_DeInit+0x40>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 0201 	bic.w	r2, r2, #1
 80039f0:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f7fd fe6a 	bl	80016cc <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3708      	adds	r7, #8
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
	...

08003a5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d001      	beq.n	8003a74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e03a      	b.n	8003aea <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2202      	movs	r2, #2
 8003a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68da      	ldr	r2, [r3, #12]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f042 0201 	orr.w	r2, r2, #1
 8003a8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a18      	ldr	r2, [pc, #96]	; (8003af4 <HAL_TIM_Base_Start_IT+0x98>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d00e      	beq.n	8003ab4 <HAL_TIM_Base_Start_IT+0x58>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a9e:	d009      	beq.n	8003ab4 <HAL_TIM_Base_Start_IT+0x58>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a14      	ldr	r2, [pc, #80]	; (8003af8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d004      	beq.n	8003ab4 <HAL_TIM_Base_Start_IT+0x58>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a13      	ldr	r2, [pc, #76]	; (8003afc <HAL_TIM_Base_Start_IT+0xa0>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d111      	bne.n	8003ad8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f003 0307 	and.w	r3, r3, #7
 8003abe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2b06      	cmp	r3, #6
 8003ac4:	d010      	beq.n	8003ae8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f042 0201 	orr.w	r2, r2, #1
 8003ad4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ad6:	e007      	b.n	8003ae8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f042 0201 	orr.w	r2, r2, #1
 8003ae6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3714      	adds	r7, #20
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bc80      	pop	{r7}
 8003af2:	4770      	bx	lr
 8003af4:	40012c00 	.word	0x40012c00
 8003af8:	40000400 	.word	0x40000400
 8003afc:	40000800 	.word	0x40000800

08003b00 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68da      	ldr	r2, [r3, #12]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f022 0201 	bic.w	r2, r2, #1
 8003b16:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6a1a      	ldr	r2, [r3, #32]
 8003b1e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003b22:	4013      	ands	r3, r2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d10f      	bne.n	8003b48 <HAL_TIM_Base_Stop_IT+0x48>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6a1a      	ldr	r2, [r3, #32]
 8003b2e:	f240 4344 	movw	r3, #1092	; 0x444
 8003b32:	4013      	ands	r3, r2
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d107      	bne.n	8003b48 <HAL_TIM_Base_Stop_IT+0x48>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f022 0201 	bic.w	r2, r2, #1
 8003b46:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	370c      	adds	r7, #12
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bc80      	pop	{r7}
 8003b5a:	4770      	bx	lr

08003b5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d122      	bne.n	8003bb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	f003 0302 	and.w	r3, r3, #2
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d11b      	bne.n	8003bb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f06f 0202 	mvn.w	r2, #2
 8003b88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	f003 0303 	and.w	r3, r3, #3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d003      	beq.n	8003ba6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 f9b1 	bl	8003f06 <HAL_TIM_IC_CaptureCallback>
 8003ba4:	e005      	b.n	8003bb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f9a4 	bl	8003ef4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 f9b3 	bl	8003f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	f003 0304 	and.w	r3, r3, #4
 8003bc2:	2b04      	cmp	r3, #4
 8003bc4:	d122      	bne.n	8003c0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	f003 0304 	and.w	r3, r3, #4
 8003bd0:	2b04      	cmp	r3, #4
 8003bd2:	d11b      	bne.n	8003c0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f06f 0204 	mvn.w	r2, #4
 8003bdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2202      	movs	r2, #2
 8003be2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d003      	beq.n	8003bfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f987 	bl	8003f06 <HAL_TIM_IC_CaptureCallback>
 8003bf8:	e005      	b.n	8003c06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 f97a 	bl	8003ef4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f000 f989 	bl	8003f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	f003 0308 	and.w	r3, r3, #8
 8003c16:	2b08      	cmp	r3, #8
 8003c18:	d122      	bne.n	8003c60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	f003 0308 	and.w	r3, r3, #8
 8003c24:	2b08      	cmp	r3, #8
 8003c26:	d11b      	bne.n	8003c60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f06f 0208 	mvn.w	r2, #8
 8003c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2204      	movs	r2, #4
 8003c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	69db      	ldr	r3, [r3, #28]
 8003c3e:	f003 0303 	and.w	r3, r3, #3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d003      	beq.n	8003c4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 f95d 	bl	8003f06 <HAL_TIM_IC_CaptureCallback>
 8003c4c:	e005      	b.n	8003c5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f950 	bl	8003ef4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f000 f95f 	bl	8003f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	f003 0310 	and.w	r3, r3, #16
 8003c6a:	2b10      	cmp	r3, #16
 8003c6c:	d122      	bne.n	8003cb4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	f003 0310 	and.w	r3, r3, #16
 8003c78:	2b10      	cmp	r3, #16
 8003c7a:	d11b      	bne.n	8003cb4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f06f 0210 	mvn.w	r2, #16
 8003c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2208      	movs	r2, #8
 8003c8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	69db      	ldr	r3, [r3, #28]
 8003c92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d003      	beq.n	8003ca2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f933 	bl	8003f06 <HAL_TIM_IC_CaptureCallback>
 8003ca0:	e005      	b.n	8003cae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f926 	bl	8003ef4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 f935 	bl	8003f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d10e      	bne.n	8003ce0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	f003 0301 	and.w	r3, r3, #1
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d107      	bne.n	8003ce0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f06f 0201 	mvn.w	r2, #1
 8003cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f7fd fc0e 	bl	80014fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cea:	2b80      	cmp	r3, #128	; 0x80
 8003cec:	d10e      	bne.n	8003d0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf8:	2b80      	cmp	r3, #128	; 0x80
 8003cfa:	d107      	bne.n	8003d0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 fa85 	bl	8004216 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d16:	2b40      	cmp	r3, #64	; 0x40
 8003d18:	d10e      	bne.n	8003d38 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d24:	2b40      	cmp	r3, #64	; 0x40
 8003d26:	d107      	bne.n	8003d38 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 f8f9 	bl	8003f2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	f003 0320 	and.w	r3, r3, #32
 8003d42:	2b20      	cmp	r3, #32
 8003d44:	d10e      	bne.n	8003d64 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	f003 0320 	and.w	r3, r3, #32
 8003d50:	2b20      	cmp	r3, #32
 8003d52:	d107      	bne.n	8003d64 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f06f 0220 	mvn.w	r2, #32
 8003d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 fa50 	bl	8004204 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d64:	bf00      	nop
 8003d66:	3708      	adds	r7, #8
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d101      	bne.n	8003d84 <HAL_TIM_ConfigClockSource+0x18>
 8003d80:	2302      	movs	r3, #2
 8003d82:	e0b3      	b.n	8003eec <HAL_TIM_ConfigClockSource+0x180>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2202      	movs	r2, #2
 8003d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003da2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003daa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dbc:	d03e      	beq.n	8003e3c <HAL_TIM_ConfigClockSource+0xd0>
 8003dbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dc2:	f200 8087 	bhi.w	8003ed4 <HAL_TIM_ConfigClockSource+0x168>
 8003dc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dca:	f000 8085 	beq.w	8003ed8 <HAL_TIM_ConfigClockSource+0x16c>
 8003dce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dd2:	d87f      	bhi.n	8003ed4 <HAL_TIM_ConfigClockSource+0x168>
 8003dd4:	2b70      	cmp	r3, #112	; 0x70
 8003dd6:	d01a      	beq.n	8003e0e <HAL_TIM_ConfigClockSource+0xa2>
 8003dd8:	2b70      	cmp	r3, #112	; 0x70
 8003dda:	d87b      	bhi.n	8003ed4 <HAL_TIM_ConfigClockSource+0x168>
 8003ddc:	2b60      	cmp	r3, #96	; 0x60
 8003dde:	d050      	beq.n	8003e82 <HAL_TIM_ConfigClockSource+0x116>
 8003de0:	2b60      	cmp	r3, #96	; 0x60
 8003de2:	d877      	bhi.n	8003ed4 <HAL_TIM_ConfigClockSource+0x168>
 8003de4:	2b50      	cmp	r3, #80	; 0x50
 8003de6:	d03c      	beq.n	8003e62 <HAL_TIM_ConfigClockSource+0xf6>
 8003de8:	2b50      	cmp	r3, #80	; 0x50
 8003dea:	d873      	bhi.n	8003ed4 <HAL_TIM_ConfigClockSource+0x168>
 8003dec:	2b40      	cmp	r3, #64	; 0x40
 8003dee:	d058      	beq.n	8003ea2 <HAL_TIM_ConfigClockSource+0x136>
 8003df0:	2b40      	cmp	r3, #64	; 0x40
 8003df2:	d86f      	bhi.n	8003ed4 <HAL_TIM_ConfigClockSource+0x168>
 8003df4:	2b30      	cmp	r3, #48	; 0x30
 8003df6:	d064      	beq.n	8003ec2 <HAL_TIM_ConfigClockSource+0x156>
 8003df8:	2b30      	cmp	r3, #48	; 0x30
 8003dfa:	d86b      	bhi.n	8003ed4 <HAL_TIM_ConfigClockSource+0x168>
 8003dfc:	2b20      	cmp	r3, #32
 8003dfe:	d060      	beq.n	8003ec2 <HAL_TIM_ConfigClockSource+0x156>
 8003e00:	2b20      	cmp	r3, #32
 8003e02:	d867      	bhi.n	8003ed4 <HAL_TIM_ConfigClockSource+0x168>
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d05c      	beq.n	8003ec2 <HAL_TIM_ConfigClockSource+0x156>
 8003e08:	2b10      	cmp	r3, #16
 8003e0a:	d05a      	beq.n	8003ec2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003e0c:	e062      	b.n	8003ed4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6818      	ldr	r0, [r3, #0]
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	6899      	ldr	r1, [r3, #8]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	685a      	ldr	r2, [r3, #4]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	f000 f974 	bl	800410a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e30:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	609a      	str	r2, [r3, #8]
      break;
 8003e3a:	e04e      	b.n	8003eda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6818      	ldr	r0, [r3, #0]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	6899      	ldr	r1, [r3, #8]
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685a      	ldr	r2, [r3, #4]
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	f000 f95d 	bl	800410a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	689a      	ldr	r2, [r3, #8]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e5e:	609a      	str	r2, [r3, #8]
      break;
 8003e60:	e03b      	b.n	8003eda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6818      	ldr	r0, [r3, #0]
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	6859      	ldr	r1, [r3, #4]
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	461a      	mov	r2, r3
 8003e70:	f000 f8d4 	bl	800401c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2150      	movs	r1, #80	; 0x50
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f000 f92b 	bl	80040d6 <TIM_ITRx_SetConfig>
      break;
 8003e80:	e02b      	b.n	8003eda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6818      	ldr	r0, [r3, #0]
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	6859      	ldr	r1, [r3, #4]
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	f000 f8f2 	bl	8004078 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2160      	movs	r1, #96	; 0x60
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f000 f91b 	bl	80040d6 <TIM_ITRx_SetConfig>
      break;
 8003ea0:	e01b      	b.n	8003eda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6818      	ldr	r0, [r3, #0]
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	6859      	ldr	r1, [r3, #4]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	461a      	mov	r2, r3
 8003eb0:	f000 f8b4 	bl	800401c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2140      	movs	r1, #64	; 0x40
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f000 f90b 	bl	80040d6 <TIM_ITRx_SetConfig>
      break;
 8003ec0:	e00b      	b.n	8003eda <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4619      	mov	r1, r3
 8003ecc:	4610      	mov	r0, r2
 8003ece:	f000 f902 	bl	80040d6 <TIM_ITRx_SetConfig>
        break;
 8003ed2:	e002      	b.n	8003eda <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003ed4:	bf00      	nop
 8003ed6:	e000      	b.n	8003eda <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003ed8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003efc:	bf00      	nop
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bc80      	pop	{r7}
 8003f04:	4770      	bx	lr

08003f06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f06:	b480      	push	{r7}
 8003f08:	b083      	sub	sp, #12
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f0e:	bf00      	nop
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bc80      	pop	{r7}
 8003f16:	4770      	bx	lr

08003f18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f20:	bf00      	nop
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bc80      	pop	{r7}
 8003f28:	4770      	bx	lr

08003f2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	b083      	sub	sp, #12
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f32:	bf00      	nop
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bc80      	pop	{r7}
 8003f3a:	4770      	bx	lr

08003f3c <HAL_TIM_Base_GetState>:
  * @brief  Return the TIM Base handle state.
  * @param  htim TIM Base handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(TIM_HandleTypeDef *htim)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  return htim->State;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f4a:	b2db      	uxtb	r3, r3
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bc80      	pop	{r7}
 8003f54:	4770      	bx	lr
	...

08003f58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b085      	sub	sp, #20
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a29      	ldr	r2, [pc, #164]	; (8004010 <TIM_Base_SetConfig+0xb8>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d00b      	beq.n	8003f88 <TIM_Base_SetConfig+0x30>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f76:	d007      	beq.n	8003f88 <TIM_Base_SetConfig+0x30>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a26      	ldr	r2, [pc, #152]	; (8004014 <TIM_Base_SetConfig+0xbc>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d003      	beq.n	8003f88 <TIM_Base_SetConfig+0x30>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a25      	ldr	r2, [pc, #148]	; (8004018 <TIM_Base_SetConfig+0xc0>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d108      	bne.n	8003f9a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a1c      	ldr	r2, [pc, #112]	; (8004010 <TIM_Base_SetConfig+0xb8>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d00b      	beq.n	8003fba <TIM_Base_SetConfig+0x62>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fa8:	d007      	beq.n	8003fba <TIM_Base_SetConfig+0x62>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a19      	ldr	r2, [pc, #100]	; (8004014 <TIM_Base_SetConfig+0xbc>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d003      	beq.n	8003fba <TIM_Base_SetConfig+0x62>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a18      	ldr	r2, [pc, #96]	; (8004018 <TIM_Base_SetConfig+0xc0>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d108      	bne.n	8003fcc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	689a      	ldr	r2, [r3, #8]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a07      	ldr	r2, [pc, #28]	; (8004010 <TIM_Base_SetConfig+0xb8>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d103      	bne.n	8004000 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	691a      	ldr	r2, [r3, #16]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	615a      	str	r2, [r3, #20]
}
 8004006:	bf00      	nop
 8004008:	3714      	adds	r7, #20
 800400a:	46bd      	mov	sp, r7
 800400c:	bc80      	pop	{r7}
 800400e:	4770      	bx	lr
 8004010:	40012c00 	.word	0x40012c00
 8004014:	40000400 	.word	0x40000400
 8004018:	40000800 	.word	0x40000800

0800401c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800401c:	b480      	push	{r7}
 800401e:	b087      	sub	sp, #28
 8004020:	af00      	add	r7, sp, #0
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6a1b      	ldr	r3, [r3, #32]
 800402c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	f023 0201 	bic.w	r2, r3, #1
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004046:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	011b      	lsls	r3, r3, #4
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	4313      	orrs	r3, r2
 8004050:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	f023 030a 	bic.w	r3, r3, #10
 8004058:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	4313      	orrs	r3, r2
 8004060:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	621a      	str	r2, [r3, #32]
}
 800406e:	bf00      	nop
 8004070:	371c      	adds	r7, #28
 8004072:	46bd      	mov	sp, r7
 8004074:	bc80      	pop	{r7}
 8004076:	4770      	bx	lr

08004078 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004078:	b480      	push	{r7}
 800407a:	b087      	sub	sp, #28
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6a1b      	ldr	r3, [r3, #32]
 8004088:	f023 0210 	bic.w	r2, r3, #16
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	699b      	ldr	r3, [r3, #24]
 8004094:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040a2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	031b      	lsls	r3, r3, #12
 80040a8:	697a      	ldr	r2, [r7, #20]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040b4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	011b      	lsls	r3, r3, #4
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	4313      	orrs	r3, r2
 80040be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	621a      	str	r2, [r3, #32]
}
 80040cc:	bf00      	nop
 80040ce:	371c      	adds	r7, #28
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bc80      	pop	{r7}
 80040d4:	4770      	bx	lr

080040d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040d6:	b480      	push	{r7}
 80040d8:	b085      	sub	sp, #20
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
 80040de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040ee:	683a      	ldr	r2, [r7, #0]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	f043 0307 	orr.w	r3, r3, #7
 80040f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	609a      	str	r2, [r3, #8]
}
 8004100:	bf00      	nop
 8004102:	3714      	adds	r7, #20
 8004104:	46bd      	mov	sp, r7
 8004106:	bc80      	pop	{r7}
 8004108:	4770      	bx	lr

0800410a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800410a:	b480      	push	{r7}
 800410c:	b087      	sub	sp, #28
 800410e:	af00      	add	r7, sp, #0
 8004110:	60f8      	str	r0, [r7, #12]
 8004112:	60b9      	str	r1, [r7, #8]
 8004114:	607a      	str	r2, [r7, #4]
 8004116:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004124:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	021a      	lsls	r2, r3, #8
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	431a      	orrs	r2, r3
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	4313      	orrs	r3, r2
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	4313      	orrs	r3, r2
 8004136:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	609a      	str	r2, [r3, #8]
}
 800413e:	bf00      	nop
 8004140:	371c      	adds	r7, #28
 8004142:	46bd      	mov	sp, r7
 8004144:	bc80      	pop	{r7}
 8004146:	4770      	bx	lr

08004148 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004158:	2b01      	cmp	r3, #1
 800415a:	d101      	bne.n	8004160 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800415c:	2302      	movs	r3, #2
 800415e:	e046      	b.n	80041ee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2202      	movs	r2, #2
 800416c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004186:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	4313      	orrs	r3, r2
 8004190:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a16      	ldr	r2, [pc, #88]	; (80041f8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d00e      	beq.n	80041c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ac:	d009      	beq.n	80041c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a12      	ldr	r2, [pc, #72]	; (80041fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d004      	beq.n	80041c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a10      	ldr	r2, [pc, #64]	; (8004200 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d10c      	bne.n	80041dc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	68ba      	ldr	r2, [r7, #8]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3714      	adds	r7, #20
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bc80      	pop	{r7}
 80041f6:	4770      	bx	lr
 80041f8:	40012c00 	.word	0x40012c00
 80041fc:	40000400 	.word	0x40000400
 8004200:	40000800 	.word	0x40000800

08004204 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	bc80      	pop	{r7}
 8004214:	4770      	bx	lr

08004216 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004216:	b480      	push	{r7}
 8004218:	b083      	sub	sp, #12
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800421e:	bf00      	nop
 8004220:	370c      	adds	r7, #12
 8004222:	46bd      	mov	sp, r7
 8004224:	bc80      	pop	{r7}
 8004226:	4770      	bx	lr

08004228 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d101      	bne.n	800423a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e03f      	b.n	80042ba <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004240:	b2db      	uxtb	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d106      	bne.n	8004254 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f7fd fa76 	bl	8001740 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2224      	movs	r2, #36	; 0x24
 8004258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68da      	ldr	r2, [r3, #12]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800426a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 fdd3 	bl	8004e18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	691a      	ldr	r2, [r3, #16]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004280:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	695a      	ldr	r2, [r3, #20]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004290:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68da      	ldr	r2, [r3, #12]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2220      	movs	r2, #32
 80042ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2220      	movs	r2, #32
 80042b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3708      	adds	r7, #8
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b082      	sub	sp, #8
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d101      	bne.n	80042d4 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e021      	b.n	8004318 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2224      	movs	r2, #36	; 0x24
 80042d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68da      	ldr	r2, [r3, #12]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042ea:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f7fd fab7 	bl	8001860 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	3708      	adds	r7, #8
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b08a      	sub	sp, #40	; 0x28
 8004324:	af02      	add	r7, sp, #8
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	603b      	str	r3, [r7, #0]
 800432c:	4613      	mov	r3, r2
 800432e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004330:	2300      	movs	r3, #0
 8004332:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800433a:	b2db      	uxtb	r3, r3
 800433c:	2b20      	cmp	r3, #32
 800433e:	d17c      	bne.n	800443a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d002      	beq.n	800434c <HAL_UART_Transmit+0x2c>
 8004346:	88fb      	ldrh	r3, [r7, #6]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d101      	bne.n	8004350 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e075      	b.n	800443c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004356:	2b01      	cmp	r3, #1
 8004358:	d101      	bne.n	800435e <HAL_UART_Transmit+0x3e>
 800435a:	2302      	movs	r3, #2
 800435c:	e06e      	b.n	800443c <HAL_UART_Transmit+0x11c>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2221      	movs	r2, #33	; 0x21
 8004370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004374:	f7fd fbbc 	bl	8001af0 <HAL_GetTick>
 8004378:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	88fa      	ldrh	r2, [r7, #6]
 800437e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	88fa      	ldrh	r2, [r7, #6]
 8004384:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800438e:	d108      	bne.n	80043a2 <HAL_UART_Transmit+0x82>
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d104      	bne.n	80043a2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004398:	2300      	movs	r3, #0
 800439a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	61bb      	str	r3, [r7, #24]
 80043a0:	e003      	b.n	80043aa <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043a6:	2300      	movs	r3, #0
 80043a8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80043b2:	e02a      	b.n	800440a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	9300      	str	r3, [sp, #0]
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	2200      	movs	r2, #0
 80043bc:	2180      	movs	r1, #128	; 0x80
 80043be:	68f8      	ldr	r0, [r7, #12]
 80043c0:	f000 faf6 	bl	80049b0 <UART_WaitOnFlagUntilTimeout>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d001      	beq.n	80043ce <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e036      	b.n	800443c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10b      	bne.n	80043ec <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	881b      	ldrh	r3, [r3, #0]
 80043d8:	461a      	mov	r2, r3
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043e2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	3302      	adds	r3, #2
 80043e8:	61bb      	str	r3, [r7, #24]
 80043ea:	e007      	b.n	80043fc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	781a      	ldrb	r2, [r3, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	3301      	adds	r3, #1
 80043fa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004400:	b29b      	uxth	r3, r3
 8004402:	3b01      	subs	r3, #1
 8004404:	b29a      	uxth	r2, r3
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800440e:	b29b      	uxth	r3, r3
 8004410:	2b00      	cmp	r3, #0
 8004412:	d1cf      	bne.n	80043b4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	9300      	str	r3, [sp, #0]
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	2200      	movs	r2, #0
 800441c:	2140      	movs	r1, #64	; 0x40
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f000 fac6 	bl	80049b0 <UART_WaitOnFlagUntilTimeout>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d001      	beq.n	800442e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e006      	b.n	800443c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2220      	movs	r2, #32
 8004432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004436:	2300      	movs	r3, #0
 8004438:	e000      	b.n	800443c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800443a:	2302      	movs	r3, #2
  }
}
 800443c:	4618      	mov	r0, r3
 800443e:	3720      	adds	r7, #32
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	4613      	mov	r3, r2
 8004450:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004458:	b2db      	uxtb	r3, r3
 800445a:	2b20      	cmp	r3, #32
 800445c:	d11d      	bne.n	800449a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d002      	beq.n	800446a <HAL_UART_Receive_IT+0x26>
 8004464:	88fb      	ldrh	r3, [r7, #6]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e016      	b.n	800449c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004474:	2b01      	cmp	r3, #1
 8004476:	d101      	bne.n	800447c <HAL_UART_Receive_IT+0x38>
 8004478:	2302      	movs	r3, #2
 800447a:	e00f      	b.n	800449c <HAL_UART_Receive_IT+0x58>
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2200      	movs	r2, #0
 8004488:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800448a:	88fb      	ldrh	r3, [r7, #6]
 800448c:	461a      	mov	r2, r3
 800448e:	68b9      	ldr	r1, [r7, #8]
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	f000 fad7 	bl	8004a44 <UART_Start_Receive_IT>
 8004496:	4603      	mov	r3, r0
 8004498:	e000      	b.n	800449c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800449a:	2302      	movs	r3, #2
  }
}
 800449c:	4618      	mov	r0, r3
 800449e:	3710      	adds	r7, #16
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 80044ac:	2301      	movs	r3, #1
 80044ae:	60fb      	str	r3, [r7, #12]

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68da      	ldr	r2, [r3, #12]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 80044be:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	695a      	ldr	r2, [r3, #20]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f022 0201 	bic.w	r2, r2, #1
 80044ce:	615a      	str	r2, [r3, #20]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d107      	bne.n	80044e8 <HAL_UART_Abort_IT+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68da      	ldr	r2, [r3, #12]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f022 0210 	bic.w	r2, r2, #16
 80044e6:	60da      	str	r2, [r3, #12]
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00f      	beq.n	8004510 <HAL_UART_Abort_IT+0x6c>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d004      	beq.n	8004508 <HAL_UART_Abort_IT+0x64>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004502:	4a40      	ldr	r2, [pc, #256]	; (8004604 <HAL_UART_Abort_IT+0x160>)
 8004504:	635a      	str	r2, [r3, #52]	; 0x34
 8004506:	e003      	b.n	8004510 <HAL_UART_Abort_IT+0x6c>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800450c:	2200      	movs	r2, #0
 800450e:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00f      	beq.n	8004538 <HAL_UART_Abort_IT+0x94>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004522:	2b00      	cmp	r3, #0
 8004524:	d004      	beq.n	8004530 <HAL_UART_Abort_IT+0x8c>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452a:	4a37      	ldr	r2, [pc, #220]	; (8004608 <HAL_UART_Abort_IT+0x164>)
 800452c:	635a      	str	r2, [r3, #52]	; 0x34
 800452e:	e003      	b.n	8004538 <HAL_UART_Abort_IT+0x94>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004534:	2200      	movs	r2, #0
 8004536:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004542:	2b00      	cmp	r3, #0
 8004544:	d01a      	beq.n	800457c <HAL_UART_Abort_IT+0xd8>
  {
    /* Disable DMA Tx at UART level */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	695a      	ldr	r2, [r3, #20]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004554:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00e      	beq.n	800457c <HAL_UART_Abort_IT+0xd8>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004562:	4618      	mov	r0, r3
 8004564:	f7fe f944 	bl	80027f0 <HAL_DMA_Abort_IT>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d004      	beq.n	8004578 <HAL_UART_Abort_IT+0xd4>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004572:	2200      	movs	r2, #0
 8004574:	635a      	str	r2, [r3, #52]	; 0x34
 8004576:	e001      	b.n	800457c <HAL_UART_Abort_IT+0xd8>
      }
      else
      {
        AbortCplt = 0x00U;
 8004578:	2300      	movs	r3, #0
 800457a:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004586:	2b00      	cmp	r3, #0
 8004588:	d01c      	beq.n	80045c4 <HAL_UART_Abort_IT+0x120>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	695a      	ldr	r2, [r3, #20]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004598:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d010      	beq.n	80045c4 <HAL_UART_Abort_IT+0x120>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7fe f922 	bl	80027f0 <HAL_DMA_Abort_IT>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d006      	beq.n	80045c0 <HAL_UART_Abort_IT+0x11c>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b6:	2200      	movs	r2, #0
 80045b8:	635a      	str	r2, [r3, #52]	; 0x34
        AbortCplt = 0x01U;
 80045ba:	2301      	movs	r3, #1
 80045bc:	60fb      	str	r3, [r7, #12]
 80045be:	e001      	b.n	80045c4 <HAL_UART_Abort_IT+0x120>
      }
      else
      {
        AbortCplt = 0x00U;
 80045c0:	2300      	movs	r3, #0
 80045c2:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d116      	bne.n	80045f8 <HAL_UART_Abort_IT+0x154>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2220      	movs	r2, #32
 80045e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    huart->RxState = HAL_UART_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2220      	movs	r2, #32
 80045e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f9bd 	bl	8004972 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	08004b37 	.word	0x08004b37
 8004608:	08004b97 	.word	0x08004b97

0800460c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b08a      	sub	sp, #40	; 0x28
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	695b      	ldr	r3, [r3, #20]
 800462a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800462c:	2300      	movs	r3, #0
 800462e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004630:	2300      	movs	r3, #0
 8004632:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004636:	f003 030f 	and.w	r3, r3, #15
 800463a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d10d      	bne.n	800465e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004644:	f003 0320 	and.w	r3, r3, #32
 8004648:	2b00      	cmp	r3, #0
 800464a:	d008      	beq.n	800465e <HAL_UART_IRQHandler+0x52>
 800464c:	6a3b      	ldr	r3, [r7, #32]
 800464e:	f003 0320 	and.w	r3, r3, #32
 8004652:	2b00      	cmp	r3, #0
 8004654:	d003      	beq.n	800465e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 fb34 	bl	8004cc4 <UART_Receive_IT>
      return;
 800465c:	e17b      	b.n	8004956 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	2b00      	cmp	r3, #0
 8004662:	f000 80b1 	beq.w	80047c8 <HAL_UART_IRQHandler+0x1bc>
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	f003 0301 	and.w	r3, r3, #1
 800466c:	2b00      	cmp	r3, #0
 800466e:	d105      	bne.n	800467c <HAL_UART_IRQHandler+0x70>
 8004670:	6a3b      	ldr	r3, [r7, #32]
 8004672:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004676:	2b00      	cmp	r3, #0
 8004678:	f000 80a6 	beq.w	80047c8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800467c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00a      	beq.n	800469c <HAL_UART_IRQHandler+0x90>
 8004686:	6a3b      	ldr	r3, [r7, #32]
 8004688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800468c:	2b00      	cmp	r3, #0
 800468e:	d005      	beq.n	800469c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004694:	f043 0201 	orr.w	r2, r3, #1
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800469c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469e:	f003 0304 	and.w	r3, r3, #4
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00a      	beq.n	80046bc <HAL_UART_IRQHandler+0xb0>
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	f003 0301 	and.w	r3, r3, #1
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d005      	beq.n	80046bc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b4:	f043 0202 	orr.w	r2, r3, #2
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00a      	beq.n	80046dc <HAL_UART_IRQHandler+0xd0>
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	f003 0301 	and.w	r3, r3, #1
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d005      	beq.n	80046dc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d4:	f043 0204 	orr.w	r2, r3, #4
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80046dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046de:	f003 0308 	and.w	r3, r3, #8
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00f      	beq.n	8004706 <HAL_UART_IRQHandler+0xfa>
 80046e6:	6a3b      	ldr	r3, [r7, #32]
 80046e8:	f003 0320 	and.w	r3, r3, #32
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d104      	bne.n	80046fa <HAL_UART_IRQHandler+0xee>
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d005      	beq.n	8004706 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fe:	f043 0208 	orr.w	r2, r3, #8
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470a:	2b00      	cmp	r3, #0
 800470c:	f000 811e 	beq.w	800494c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004712:	f003 0320 	and.w	r3, r3, #32
 8004716:	2b00      	cmp	r3, #0
 8004718:	d007      	beq.n	800472a <HAL_UART_IRQHandler+0x11e>
 800471a:	6a3b      	ldr	r3, [r7, #32]
 800471c:	f003 0320 	and.w	r3, r3, #32
 8004720:	2b00      	cmp	r3, #0
 8004722:	d002      	beq.n	800472a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 facd 	bl	8004cc4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	695b      	ldr	r3, [r3, #20]
 8004730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004734:	2b00      	cmp	r3, #0
 8004736:	bf14      	ite	ne
 8004738:	2301      	movne	r3, #1
 800473a:	2300      	moveq	r3, #0
 800473c:	b2db      	uxtb	r3, r3
 800473e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004744:	f003 0308 	and.w	r3, r3, #8
 8004748:	2b00      	cmp	r3, #0
 800474a:	d102      	bne.n	8004752 <HAL_UART_IRQHandler+0x146>
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d031      	beq.n	80047b6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 f9af 	bl	8004ab6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004762:	2b00      	cmp	r3, #0
 8004764:	d023      	beq.n	80047ae <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	695a      	ldr	r2, [r3, #20]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004774:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477a:	2b00      	cmp	r3, #0
 800477c:	d013      	beq.n	80047a6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004782:	4a76      	ldr	r2, [pc, #472]	; (800495c <HAL_UART_IRQHandler+0x350>)
 8004784:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478a:	4618      	mov	r0, r3
 800478c:	f7fe f830 	bl	80027f0 <HAL_DMA_Abort_IT>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d016      	beq.n	80047c4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800479a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80047a0:	4610      	mov	r0, r2
 80047a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047a4:	e00e      	b.n	80047c4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f7fc fe9a 	bl	80014e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047ac:	e00a      	b.n	80047c4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f7fc fe96 	bl	80014e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047b4:	e006      	b.n	80047c4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f7fc fe92 	bl	80014e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80047c2:	e0c3      	b.n	800494c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047c4:	bf00      	nop
    return;
 80047c6:	e0c1      	b.n	800494c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	f040 80a1 	bne.w	8004914 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80047d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d4:	f003 0310 	and.w	r3, r3, #16
 80047d8:	2b00      	cmp	r3, #0
 80047da:	f000 809b 	beq.w	8004914 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80047de:	6a3b      	ldr	r3, [r7, #32]
 80047e0:	f003 0310 	and.w	r3, r3, #16
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f000 8095 	beq.w	8004914 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047ea:	2300      	movs	r3, #0
 80047ec:	60fb      	str	r3, [r7, #12]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	60fb      	str	r3, [r7, #12]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	60fb      	str	r3, [r7, #12]
 80047fe:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800480a:	2b00      	cmp	r3, #0
 800480c:	d04e      	beq.n	80048ac <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004818:	8a3b      	ldrh	r3, [r7, #16]
 800481a:	2b00      	cmp	r3, #0
 800481c:	f000 8098 	beq.w	8004950 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004824:	8a3a      	ldrh	r2, [r7, #16]
 8004826:	429a      	cmp	r2, r3
 8004828:	f080 8092 	bcs.w	8004950 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	8a3a      	ldrh	r2, [r7, #16]
 8004830:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	2b20      	cmp	r3, #32
 800483a:	d02b      	beq.n	8004894 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68da      	ldr	r2, [r3, #12]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800484a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	695a      	ldr	r2, [r3, #20]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f022 0201 	bic.w	r2, r2, #1
 800485a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	695a      	ldr	r2, [r3, #20]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800486a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2220      	movs	r2, #32
 8004870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68da      	ldr	r2, [r3, #12]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f022 0210 	bic.w	r2, r2, #16
 8004888:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800488e:	4618      	mov	r0, r3
 8004890:	f7fd ff73 	bl	800277a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800489c:	b29b      	uxth	r3, r3
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	4619      	mov	r1, r3
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 f86d 	bl	8004984 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80048aa:	e051      	b.n	8004950 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048be:	b29b      	uxth	r3, r3
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d047      	beq.n	8004954 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80048c4:	8a7b      	ldrh	r3, [r7, #18]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d044      	beq.n	8004954 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68da      	ldr	r2, [r3, #12]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80048d8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	695a      	ldr	r2, [r3, #20]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f022 0201 	bic.w	r2, r2, #1
 80048e8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2220      	movs	r2, #32
 80048ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68da      	ldr	r2, [r3, #12]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f022 0210 	bic.w	r2, r2, #16
 8004906:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004908:	8a7b      	ldrh	r3, [r7, #18]
 800490a:	4619      	mov	r1, r3
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 f839 	bl	8004984 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004912:	e01f      	b.n	8004954 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800491a:	2b00      	cmp	r3, #0
 800491c:	d008      	beq.n	8004930 <HAL_UART_IRQHandler+0x324>
 800491e:	6a3b      	ldr	r3, [r7, #32]
 8004920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004924:	2b00      	cmp	r3, #0
 8004926:	d003      	beq.n	8004930 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f000 f964 	bl	8004bf6 <UART_Transmit_IT>
    return;
 800492e:	e012      	b.n	8004956 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00d      	beq.n	8004956 <HAL_UART_IRQHandler+0x34a>
 800493a:	6a3b      	ldr	r3, [r7, #32]
 800493c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004940:	2b00      	cmp	r3, #0
 8004942:	d008      	beq.n	8004956 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 f9a5 	bl	8004c94 <UART_EndTransmit_IT>
    return;
 800494a:	e004      	b.n	8004956 <HAL_UART_IRQHandler+0x34a>
    return;
 800494c:	bf00      	nop
 800494e:	e002      	b.n	8004956 <HAL_UART_IRQHandler+0x34a>
      return;
 8004950:	bf00      	nop
 8004952:	e000      	b.n	8004956 <HAL_UART_IRQHandler+0x34a>
      return;
 8004954:	bf00      	nop
  }
}
 8004956:	3728      	adds	r7, #40	; 0x28
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	08004b0f 	.word	0x08004b0f

08004960 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004968:	bf00      	nop
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	bc80      	pop	{r7}
 8004970:	4770      	bx	lr

08004972 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8004972:	b480      	push	{r7}
 8004974:	b083      	sub	sp, #12
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800497a:	bf00      	nop
 800497c:	370c      	adds	r7, #12
 800497e:	46bd      	mov	sp, r7
 8004980:	bc80      	pop	{r7}
 8004982:	4770      	bx	lr

08004984 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	460b      	mov	r3, r1
 800498e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004990:	bf00      	nop
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	bc80      	pop	{r7}
 8004998:	4770      	bx	lr

0800499a <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 800499a:	b480      	push	{r7}
 800499c:	b083      	sub	sp, #12
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	370c      	adds	r7, #12
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bc80      	pop	{r7}
 80049ae:	4770      	bx	lr

080049b0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	603b      	str	r3, [r7, #0]
 80049bc:	4613      	mov	r3, r2
 80049be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049c0:	e02c      	b.n	8004a1c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c8:	d028      	beq.n	8004a1c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d007      	beq.n	80049e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80049d0:	f7fd f88e 	bl	8001af0 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	69ba      	ldr	r2, [r7, #24]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d21d      	bcs.n	8004a1c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68da      	ldr	r2, [r3, #12]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80049ee:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	695a      	ldr	r2, [r3, #20]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f022 0201 	bic.w	r2, r2, #1
 80049fe:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2220      	movs	r2, #32
 8004a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2220      	movs	r2, #32
 8004a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e00f      	b.n	8004a3c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	4013      	ands	r3, r2
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	bf0c      	ite	eq
 8004a2c:	2301      	moveq	r3, #1
 8004a2e:	2300      	movne	r3, #0
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	461a      	mov	r2, r3
 8004a34:	79fb      	ldrb	r3, [r7, #7]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d0c3      	beq.n	80049c2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3710      	adds	r7, #16
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	68ba      	ldr	r2, [r7, #8]
 8004a56:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	88fa      	ldrh	r2, [r7, #6]
 8004a5c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	88fa      	ldrh	r2, [r7, #6]
 8004a62:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2222      	movs	r2, #34	; 0x22
 8004a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68da      	ldr	r2, [r3, #12]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a88:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	695a      	ldr	r2, [r3, #20]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f042 0201 	orr.w	r2, r2, #1
 8004a98:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68da      	ldr	r2, [r3, #12]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f042 0220 	orr.w	r2, r2, #32
 8004aa8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004aaa:	2300      	movs	r3, #0
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3714      	adds	r7, #20
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bc80      	pop	{r7}
 8004ab4:	4770      	bx	lr

08004ab6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ab6:	b480      	push	{r7}
 8004ab8:	b083      	sub	sp, #12
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68da      	ldr	r2, [r3, #12]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004acc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	695a      	ldr	r2, [r3, #20]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f022 0201 	bic.w	r2, r2, #1
 8004adc:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d107      	bne.n	8004af6 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68da      	ldr	r2, [r3, #12]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f022 0210 	bic.w	r2, r2, #16
 8004af4:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2220      	movs	r2, #32
 8004afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004b04:	bf00      	nop
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bc80      	pop	{r7}
 8004b0c:	4770      	bx	lr

08004b0e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b084      	sub	sp, #16
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2200      	movs	r2, #0
 8004b26:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b28:	68f8      	ldr	r0, [r7, #12]
 8004b2a:	f7fc fcd9 	bl	80014e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b2e:	bf00      	nop
 8004b30:	3710      	adds	r7, #16
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b084      	sub	sp, #16
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b42:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b48:	2200      	movs	r2, #0
 8004b4a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d004      	beq.n	8004b5e <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d117      	bne.n	8004b8e <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2200      	movs	r2, #0
 8004b68:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2220      	movs	r2, #32
 8004b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2220      	movs	r2, #32
 8004b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f7ff fef3 	bl	8004972 <HAL_UART_AbortCpltCallback>
 8004b8c:	e000      	b.n	8004b90 <UART_DMATxAbortCallback+0x5a>
      return;
 8004b8e:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b90:	3710      	adds	r7, #16
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b084      	sub	sp, #16
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba2:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba8:	2200      	movs	r2, #0
 8004baa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d004      	beq.n	8004bbe <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d117      	bne.n	8004bee <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2220      	movs	r2, #32
 8004bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2220      	movs	r2, #32
 8004bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f7ff fec3 	bl	8004972 <HAL_UART_AbortCpltCallback>
 8004bec:	e000      	b.n	8004bf0 <UART_DMARxAbortCallback+0x5a>
      return;
 8004bee:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bf0:	3710      	adds	r7, #16
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}

08004bf6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004bf6:	b480      	push	{r7}
 8004bf8:	b085      	sub	sp, #20
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	2b21      	cmp	r3, #33	; 0x21
 8004c08:	d13e      	bne.n	8004c88 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c12:	d114      	bne.n	8004c3e <UART_Transmit_IT+0x48>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d110      	bne.n	8004c3e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a1b      	ldr	r3, [r3, #32]
 8004c20:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	881b      	ldrh	r3, [r3, #0]
 8004c26:	461a      	mov	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c30:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	1c9a      	adds	r2, r3, #2
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	621a      	str	r2, [r3, #32]
 8004c3c:	e008      	b.n	8004c50 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	1c59      	adds	r1, r3, #1
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	6211      	str	r1, [r2, #32]
 8004c48:	781a      	ldrb	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	3b01      	subs	r3, #1
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d10f      	bne.n	8004c84 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68da      	ldr	r2, [r3, #12]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c72:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68da      	ldr	r2, [r3, #12]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c82:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c84:	2300      	movs	r3, #0
 8004c86:	e000      	b.n	8004c8a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004c88:	2302      	movs	r3, #2
  }
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3714      	adds	r7, #20
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bc80      	pop	{r7}
 8004c92:	4770      	bx	lr

08004c94 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68da      	ldr	r2, [r3, #12]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004caa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2220      	movs	r2, #32
 8004cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f7ff fe53 	bl	8004960 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3708      	adds	r7, #8
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b086      	sub	sp, #24
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	2b22      	cmp	r3, #34	; 0x22
 8004cd6:	f040 8099 	bne.w	8004e0c <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ce2:	d117      	bne.n	8004d14 <UART_Receive_IT+0x50>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d113      	bne.n	8004d14 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004cec:	2300      	movs	r3, #0
 8004cee:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf4:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d0c:	1c9a      	adds	r2, r3, #2
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	629a      	str	r2, [r3, #40]	; 0x28
 8004d12:	e026      	b.n	8004d62 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d18:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d26:	d007      	beq.n	8004d38 <UART_Receive_IT+0x74>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d10a      	bne.n	8004d46 <UART_Receive_IT+0x82>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d106      	bne.n	8004d46 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	b2da      	uxtb	r2, r3
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	701a      	strb	r2, [r3, #0]
 8004d44:	e008      	b.n	8004d58 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d52:	b2da      	uxtb	r2, r3
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d5c:	1c5a      	adds	r2, r3, #1
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	4619      	mov	r1, r3
 8004d70:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d148      	bne.n	8004e08 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68da      	ldr	r2, [r3, #12]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f022 0220 	bic.w	r2, r2, #32
 8004d84:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68da      	ldr	r2, [r3, #12]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d94:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	695a      	ldr	r2, [r3, #20]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f022 0201 	bic.w	r2, r2, #1
 8004da4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2220      	movs	r2, #32
 8004daa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d123      	bne.n	8004dfe <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68da      	ldr	r2, [r3, #12]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f022 0210 	bic.w	r2, r2, #16
 8004dca:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0310 	and.w	r3, r3, #16
 8004dd6:	2b10      	cmp	r3, #16
 8004dd8:	d10a      	bne.n	8004df0 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004dda:	2300      	movs	r3, #0
 8004ddc:	60fb      	str	r3, [r7, #12]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	60fb      	str	r3, [r7, #12]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	60fb      	str	r3, [r7, #12]
 8004dee:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004df4:	4619      	mov	r1, r3
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f7ff fdc4 	bl	8004984 <HAL_UARTEx_RxEventCallback>
 8004dfc:	e002      	b.n	8004e04 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f7fc fb60 	bl	80014c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004e04:	2300      	movs	r3, #0
 8004e06:	e002      	b.n	8004e0e <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	e000      	b.n	8004e0e <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004e0c:	2302      	movs	r3, #2
  }
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3718      	adds	r7, #24
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
	...

08004e18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	68da      	ldr	r2, [r3, #12]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	430a      	orrs	r2, r1
 8004e34:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	689a      	ldr	r2, [r3, #8]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	431a      	orrs	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	695b      	ldr	r3, [r3, #20]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004e52:	f023 030c 	bic.w	r3, r3, #12
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	6812      	ldr	r2, [r2, #0]
 8004e5a:	68b9      	ldr	r1, [r7, #8]
 8004e5c:	430b      	orrs	r3, r1
 8004e5e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	699a      	ldr	r2, [r3, #24]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	430a      	orrs	r2, r1
 8004e74:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a2c      	ldr	r2, [pc, #176]	; (8004f2c <UART_SetConfig+0x114>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d103      	bne.n	8004e88 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004e80:	f7fe fb9c 	bl	80035bc <HAL_RCC_GetPCLK2Freq>
 8004e84:	60f8      	str	r0, [r7, #12]
 8004e86:	e002      	b.n	8004e8e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004e88:	f7fe fb84 	bl	8003594 <HAL_RCC_GetPCLK1Freq>
 8004e8c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	4613      	mov	r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	4413      	add	r3, r2
 8004e96:	009a      	lsls	r2, r3, #2
 8004e98:	441a      	add	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea4:	4a22      	ldr	r2, [pc, #136]	; (8004f30 <UART_SetConfig+0x118>)
 8004ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eaa:	095b      	lsrs	r3, r3, #5
 8004eac:	0119      	lsls	r1, r3, #4
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	4413      	add	r3, r2
 8004eb6:	009a      	lsls	r2, r3, #2
 8004eb8:	441a      	add	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ec4:	4b1a      	ldr	r3, [pc, #104]	; (8004f30 <UART_SetConfig+0x118>)
 8004ec6:	fba3 0302 	umull	r0, r3, r3, r2
 8004eca:	095b      	lsrs	r3, r3, #5
 8004ecc:	2064      	movs	r0, #100	; 0x64
 8004ece:	fb00 f303 	mul.w	r3, r0, r3
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	011b      	lsls	r3, r3, #4
 8004ed6:	3332      	adds	r3, #50	; 0x32
 8004ed8:	4a15      	ldr	r2, [pc, #84]	; (8004f30 <UART_SetConfig+0x118>)
 8004eda:	fba2 2303 	umull	r2, r3, r2, r3
 8004ede:	095b      	lsrs	r3, r3, #5
 8004ee0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ee4:	4419      	add	r1, r3
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	4613      	mov	r3, r2
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	4413      	add	r3, r2
 8004eee:	009a      	lsls	r2, r3, #2
 8004ef0:	441a      	add	r2, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004efc:	4b0c      	ldr	r3, [pc, #48]	; (8004f30 <UART_SetConfig+0x118>)
 8004efe:	fba3 0302 	umull	r0, r3, r3, r2
 8004f02:	095b      	lsrs	r3, r3, #5
 8004f04:	2064      	movs	r0, #100	; 0x64
 8004f06:	fb00 f303 	mul.w	r3, r0, r3
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	011b      	lsls	r3, r3, #4
 8004f0e:	3332      	adds	r3, #50	; 0x32
 8004f10:	4a07      	ldr	r2, [pc, #28]	; (8004f30 <UART_SetConfig+0x118>)
 8004f12:	fba2 2303 	umull	r2, r3, r2, r3
 8004f16:	095b      	lsrs	r3, r3, #5
 8004f18:	f003 020f 	and.w	r2, r3, #15
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	440a      	add	r2, r1
 8004f22:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004f24:	bf00      	nop
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	40013800 	.word	0x40013800
 8004f30:	51eb851f 	.word	0x51eb851f

08004f34 <InitMBMaster>:
		TIM_HandleTypeDef *timerT35, TIM_HandleTypeDef *timerT15, TIM_HandleTypeDef *TMRtimeout,
		uint32_t prescaler, uint32_t baudrate, uint32_t wordLength,
		uint32_t stopBits, uint32_t parity,
		GPIO_TypeDef *RE_Port, uint16_t RE_Pin,
		GPIO_TypeDef *DE_Port, uint16_t DE_Pin)
{
 8004f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f36:	b08b      	sub	sp, #44	; 0x2c
 8004f38:	af04      	add	r7, sp, #16
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	607a      	str	r2, [r7, #4]
 8004f40:	603b      	str	r3, [r7, #0]
	// Unit ID
	(*mbHandler).UnitID = 0;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2200      	movs	r2, #0
 8004f46:	701a      	strb	r2, [r3, #0]

	// Modify UART port and assign it to MBHandler uartPort
	Modify_UART(uartPort, baudrate, wordLength, stopBits, parity);
 8004f48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f4a:	9300      	str	r3, [sp, #0]
 8004f4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f50:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f52:	68b8      	ldr	r0, [r7, #8]
 8004f54:	f000 fab5 	bl	80054c2 <Modify_UART>
	(*mbHandler).UART_Port = uartPort;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	68ba      	ldr	r2, [r7, #8]
 8004f5c:	605a      	str	r2, [r3, #4]

	// Modify TIM (T35)
	float_t periodT35 = 0;
 8004f5e:	f04f 0300 	mov.w	r3, #0
 8004f62:	617b      	str	r3, [r7, #20]
	CalcTimerPeriod(T35, &periodT35, baudrate, 11);
 8004f64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004f66:	f7fb fce7 	bl	8000938 <__aeabi_ui2f>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	f107 0114 	add.w	r1, r7, #20
 8004f70:	4b2d      	ldr	r3, [pc, #180]	; (8005028 <InitMBMaster+0xf4>)
 8004f72:	2002      	movs	r0, #2
 8004f74:	f000 f9c0 	bl	80052f8 <CalcTimerPeriod>
	Modify_TIM(timerT35, prescaler, (uint32_t)periodT35);
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f7fb fefa 	bl	8000d74 <__aeabi_f2uiz>
 8004f80:	4603      	mov	r3, r0
 8004f82:	461a      	mov	r2, r3
 8004f84:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 fa7a 	bl	8005480 <Modify_TIM>
	(*mbHandler).T35 = timerT35;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	619a      	str	r2, [r3, #24]

	// Modify TIM (T15)
	float_t periodT15 = 0;
 8004f92:	f04f 0300 	mov.w	r3, #0
 8004f96:	613b      	str	r3, [r7, #16]
	CalcTimerPeriod(T15, &periodT15, baudrate, 11);
 8004f98:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004f9a:	f7fb fccd 	bl	8000938 <__aeabi_ui2f>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	f107 0110 	add.w	r1, r7, #16
 8004fa4:	4b20      	ldr	r3, [pc, #128]	; (8005028 <InitMBMaster+0xf4>)
 8004fa6:	2001      	movs	r0, #1
 8004fa8:	f000 f9a6 	bl	80052f8 <CalcTimerPeriod>
	Modify_TIM(timerT15, prescaler, (uint32_t)periodT15);
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7fb fee0 	bl	8000d74 <__aeabi_f2uiz>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004fba:	6838      	ldr	r0, [r7, #0]
 8004fbc:	f000 fa60 	bl	8005480 <Modify_TIM>
	(*mbHandler).T15 = timerT15;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	683a      	ldr	r2, [r7, #0]
 8004fc4:	61da      	str	r2, [r3, #28]
	// Timeout timer
	//Modify_TIM(TMRtimeout, 8000, 1000);
	//(*mbHandler).TMRtimeout = TMRtimeout;

	// Set RE & DE pin
	(*mbHandler).RE_Port = RE_Port;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fca:	609a      	str	r2, [r3, #8]
	(*mbHandler).RE_Pin = RE_Pin;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8004fd2:	819a      	strh	r2, [r3, #12]

	(*mbHandler).DE_Port = DE_Port;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004fd8:	611a      	str	r2, [r3, #16]
	(*mbHandler).DE_Pin = DE_Pin;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004fe0:	829a      	strh	r2, [r3, #20]

	printMsg("Master:ID:%d; BaudRate:%d; WordLength:%d; Parity:%d; StopBits:%d; pT35:%d; tpT15:%d;\n",
				(*mbHandler).UnitID,
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	781b      	ldrb	r3, [r3, #0]
	printMsg("Master:ID:%d; BaudRate:%d; WordLength:%d; Parity:%d; StopBits:%d; pT35:%d; tpT15:%d;\n",
 8004fe6:	461e      	mov	r6, r3
				(*((*mbHandler).UART_Port)).Init.BaudRate,
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	685b      	ldr	r3, [r3, #4]
	printMsg("Master:ID:%d; BaudRate:%d; WordLength:%d; Parity:%d; StopBits:%d; pT35:%d; tpT15:%d;\n",
 8004fec:	685c      	ldr	r4, [r3, #4]
				(*((*mbHandler).UART_Port)).Init.WordLength,
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	685b      	ldr	r3, [r3, #4]
	printMsg("Master:ID:%d; BaudRate:%d; WordLength:%d; Parity:%d; StopBits:%d; pT35:%d; tpT15:%d;\n",
 8004ff2:	689d      	ldr	r5, [r3, #8]
				(*((*mbHandler).UART_Port)).Init.Parity,
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	685b      	ldr	r3, [r3, #4]
	printMsg("Master:ID:%d; BaudRate:%d; WordLength:%d; Parity:%d; StopBits:%d; pT35:%d; tpT15:%d;\n",
 8004ff8:	691b      	ldr	r3, [r3, #16]
				(*((*mbHandler).UART_Port)).Init.StopBits,
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	6852      	ldr	r2, [r2, #4]
	printMsg("Master:ID:%d; BaudRate:%d; WordLength:%d; Parity:%d; StopBits:%d; pT35:%d; tpT15:%d;\n",
 8004ffe:	68d2      	ldr	r2, [r2, #12]
				(uint32_t)(*((*mbHandler).T35)).Init.Period,
 8005000:	68f9      	ldr	r1, [r7, #12]
 8005002:	6989      	ldr	r1, [r1, #24]
 8005004:	68c9      	ldr	r1, [r1, #12]
				(uint32_t)(*((*mbHandler).T15)).Init.Period);
 8005006:	68f8      	ldr	r0, [r7, #12]
 8005008:	69c0      	ldr	r0, [r0, #28]
 800500a:	68c0      	ldr	r0, [r0, #12]
	printMsg("Master:ID:%d; BaudRate:%d; WordLength:%d; Parity:%d; StopBits:%d; pT35:%d; tpT15:%d;\n",
 800500c:	9003      	str	r0, [sp, #12]
 800500e:	9102      	str	r1, [sp, #8]
 8005010:	9201      	str	r2, [sp, #4]
 8005012:	9300      	str	r3, [sp, #0]
 8005014:	462b      	mov	r3, r5
 8005016:	4622      	mov	r2, r4
 8005018:	4631      	mov	r1, r6
 800501a:	4804      	ldr	r0, [pc, #16]	; (800502c <InitMBMaster+0xf8>)
 800501c:	f7fb feca 	bl	8000db4 <printMsg>
}
 8005020:	bf00      	nop
 8005022:	371c      	adds	r7, #28
 8005024:	46bd      	mov	sp, r7
 8005026:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005028:	41300000 	.word	0x41300000
 800502c:	08006854 	.word	0x08006854

08005030 <MBMaster_HAL_UART_RxCpltCallback>:
		//-----------------------------------------------------------------------------------------------------------------------
	}
}

void MBMaster_HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart, MBHandler *mbHandler)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
	// Check if the uart module is the one that is used to receive modbus requests
	if((*huart).Instance == (*((*mbHandler).UART_Port)).Instance)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	429a      	cmp	r2, r3
 8005046:	d164      	bne.n	8005112 <MBMaster_HAL_UART_RxCpltCallback+0xe2>
	{
		//------------------------------------------------------------------------------------------------------------------
		// Stop T35 if it is in busy state, meaning that it is counting from 0 to 'periodT35'
		if( HAL_TIM_Base_GetState((*mbHandler).T35) == HAL_TIM_STATE_BUSY)
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	699b      	ldr	r3, [r3, #24]
 800504c:	4618      	mov	r0, r3
 800504e:	f7fe ff75 	bl	8003f3c <HAL_TIM_Base_GetState>
 8005052:	4603      	mov	r3, r0
 8005054:	2b02      	cmp	r3, #2
 8005056:	d111      	bne.n	800507c <MBMaster_HAL_UART_RxCpltCallback+0x4c>
		{
			if(HAL_TIM_Base_Stop_IT((*mbHandler).T35) == HAL_OK)
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	699b      	ldr	r3, [r3, #24]
 800505c:	4618      	mov	r0, r3
 800505e:	f7fe fd4f 	bl	8003b00 <HAL_TIM_Base_Stop_IT>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d105      	bne.n	8005074 <MBMaster_HAL_UART_RxCpltCallback+0x44>
			{
				__HAL_TIM_SetCounter((*mbHandler).T35, 0);
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	699b      	ldr	r3, [r3, #24]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2200      	movs	r2, #0
 8005070:	625a      	str	r2, [r3, #36]	; 0x24
 8005072:	e003      	b.n	800507c <MBMaster_HAL_UART_RxCpltCallback+0x4c>
			}
			else
			{
				HandleError(mbHandler, T35_Error);
 8005074:	2101      	movs	r1, #1
 8005076:	6838      	ldr	r0, [r7, #0]
 8005078:	f000 fe88 	bl	8005d8c <HandleError>
			}
		}

		// Stop T15 if it is in busy state, meaning that last byte was received ok
		if( HAL_TIM_Base_GetState((*mbHandler).T15) == HAL_TIM_STATE_BUSY )
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	69db      	ldr	r3, [r3, #28]
 8005080:	4618      	mov	r0, r3
 8005082:	f7fe ff5b 	bl	8003f3c <HAL_TIM_Base_GetState>
 8005086:	4603      	mov	r3, r0
 8005088:	2b02      	cmp	r3, #2
 800508a:	d111      	bne.n	80050b0 <MBMaster_HAL_UART_RxCpltCallback+0x80>
		{
			if(HAL_TIM_Base_Stop_IT((*mbHandler).T15) == HAL_OK)
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	69db      	ldr	r3, [r3, #28]
 8005090:	4618      	mov	r0, r3
 8005092:	f7fe fd35 	bl	8003b00 <HAL_TIM_Base_Stop_IT>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d105      	bne.n	80050a8 <MBMaster_HAL_UART_RxCpltCallback+0x78>
			{
				__HAL_TIM_SetCounter((*mbHandler).T15, 0);
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	69db      	ldr	r3, [r3, #28]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2200      	movs	r2, #0
 80050a4:	625a      	str	r2, [r3, #36]	; 0x24
 80050a6:	e003      	b.n	80050b0 <MBMaster_HAL_UART_RxCpltCallback+0x80>
			}
			else
			{
				HandleError(mbHandler, T15_Error);
 80050a8:	2102      	movs	r1, #2
 80050aa:	6838      	ldr	r0, [r7, #0]
 80050ac:	f000 fe6e 	bl	8005d8c <HandleError>
			}
		}

		// Add value to RxBuffer
		AddToXBuffer(&((*mbHandler).RxBuffer),((*mbHandler).RxBuffer).u8Element[0]);
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 80050bc:	4619      	mov	r1, r3
 80050be:	4610      	mov	r0, r2
 80050c0:	f000 f8aa 	bl	8005218 <AddToXBuffer>

		// Restart uart receive interrupt (to receive the next byte of the request)
		if(HAL_UART_Receive_IT((*mbHandler).UART_Port, (*mbHandler).RxBuffer.u8Element, 1) != HAL_OK)
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	6858      	ldr	r0, [r3, #4]
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	33a4      	adds	r3, #164	; 0xa4
 80050cc:	2201      	movs	r2, #1
 80050ce:	4619      	mov	r1, r3
 80050d0:	f7ff f9b8 	bl	8004444 <HAL_UART_Receive_IT>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d003      	beq.n	80050e2 <MBMaster_HAL_UART_RxCpltCallback+0xb2>
		{
			HandleError(mbHandler, UART_Error);
 80050da:	2100      	movs	r1, #0
 80050dc:	6838      	ldr	r0, [r7, #0]
 80050de:	f000 fe55 	bl	8005d8c <HandleError>
		}


		// Start T35 to detect if the last received byte was the modbus request last byte
		if(HAL_TIM_Base_Start_IT((*mbHandler).T35) != HAL_OK)
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	4618      	mov	r0, r3
 80050e8:	f7fe fcb8 	bl	8003a5c <HAL_TIM_Base_Start_IT>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d003      	beq.n	80050fa <MBMaster_HAL_UART_RxCpltCallback+0xca>
		{
			HandleError(mbHandler, T35_Error);
 80050f2:	2101      	movs	r1, #1
 80050f4:	6838      	ldr	r0, [r7, #0]
 80050f6:	f000 fe49 	bl	8005d8c <HandleError>
		}

		// Start T15 to detect if the bytes are received ok
		if(HAL_TIM_Base_Start_IT((*mbHandler).T15) != HAL_OK)
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	69db      	ldr	r3, [r3, #28]
 80050fe:	4618      	mov	r0, r3
 8005100:	f7fe fcac 	bl	8003a5c <HAL_TIM_Base_Start_IT>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d003      	beq.n	8005112 <MBMaster_HAL_UART_RxCpltCallback+0xe2>
		{
			HandleError(mbHandler, T15_Error);
 800510a:	2102      	movs	r1, #2
 800510c:	6838      	ldr	r0, [r7, #0]
 800510e:	f000 fe3d 	bl	8005d8c <HandleError>
		}
		//-----------------------------------------------------------------------------------------------------------------------
	}
}
 8005112:	bf00      	nop
 8005114:	3708      	adds	r7, #8
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <MBUnit_HAL_UART_ErrorCallback>:

void MBUnit_HAL_UART_ErrorCallback(UART_HandleTypeDef *huart, MBHandler *mbHandler)
{
 800511a:	b580      	push	{r7, lr}
 800511c:	b084      	sub	sp, #16
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
 8005122:	6039      	str	r1, [r7, #0]
	// Check if the uart module is the one that is used in mb_slave
	if((*huart).Instance == (*((*mbHandler).UART_Port)).Instance)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	429a      	cmp	r2, r3
 8005130:	d11b      	bne.n	800516a <MBUnit_HAL_UART_ErrorCallback+0x50>
	{
		uint32_t uartError = HAL_UART_GetError((*mbHandler).UART_Port);
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	4618      	mov	r0, r3
 8005138:	f7ff fc2f 	bl	800499a <HAL_UART_GetError>
 800513c:	60f8      	str	r0, [r7, #12]
		if(uartError == 0 && uartError == 1 && uartError == 2 && uartError == 3 && uartError == 4 && uartError == 5)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d112      	bne.n	800516a <MBUnit_HAL_UART_ErrorCallback+0x50>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2b01      	cmp	r3, #1
 8005148:	d10f      	bne.n	800516a <MBUnit_HAL_UART_ErrorCallback+0x50>
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2b02      	cmp	r3, #2
 800514e:	d10c      	bne.n	800516a <MBUnit_HAL_UART_ErrorCallback+0x50>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2b03      	cmp	r3, #3
 8005154:	d109      	bne.n	800516a <MBUnit_HAL_UART_ErrorCallback+0x50>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2b04      	cmp	r3, #4
 800515a:	d106      	bne.n	800516a <MBUnit_HAL_UART_ErrorCallback+0x50>
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2b05      	cmp	r3, #5
 8005160:	d103      	bne.n	800516a <MBUnit_HAL_UART_ErrorCallback+0x50>
		{
			HandleError(mbHandler, UART_Error);
 8005162:	2100      	movs	r1, #0
 8005164:	6838      	ldr	r0, [r7, #0]
 8005166:	f000 fe11 	bl	8005d8c <HandleError>
		}
	}
}
 800516a:	bf00      	nop
 800516c:	3710      	adds	r7, #16
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <MBMaster_HAL_TIM_PeriodElapsedCallback>:
		(*mbHandler).RxBuffer.T15Counter ++;
	}
}

void MBMaster_HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim, MBHandler *mbHandler)
{
 8005172:	b580      	push	{r7, lr}
 8005174:	b082      	sub	sp, #8
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
 800517a:	6039      	str	r1, [r7, #0]
	// Check if this timer module is the one that is used to detect the modbus rtu end of frame
	if((*htim).Instance == (*((*mbHandler).T35)).Instance)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	699b      	ldr	r3, [r3, #24]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	429a      	cmp	r2, r3
 8005188:	d131      	bne.n	80051ee <MBMaster_HAL_TIM_PeriodElapsedCallback+0x7c>
	{
		//--------------------------------------------------------------------------------------------------------
		// Period of T35 was elapsed, end of frame detected, stopping the T35
		if( HAL_TIM_Base_Stop_IT((*mbHandler).T35) == HAL_OK)
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	4618      	mov	r0, r3
 8005190:	f7fe fcb6 	bl	8003b00 <HAL_TIM_Base_Stop_IT>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d105      	bne.n	80051a6 <MBMaster_HAL_TIM_PeriodElapsedCallback+0x34>
		{
			__HAL_TIM_SetCounter((*mbHandler).T35, 0);
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2200      	movs	r2, #0
 80051a2:	625a      	str	r2, [r3, #36]	; 0x24
 80051a4:	e003      	b.n	80051ae <MBMaster_HAL_TIM_PeriodElapsedCallback+0x3c>
		}
		else
		{
			HandleError(mbHandler, T35_Error);
 80051a6:	2101      	movs	r1, #1
 80051a8:	6838      	ldr	r0, [r7, #0]
 80051aa:	f000 fdef 	bl	8005d8c <HandleError>
		}

		//  stopping the T15, end of frame detected
		if(HAL_TIM_Base_Stop_IT((*mbHandler).T15) == HAL_OK)
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	69db      	ldr	r3, [r3, #28]
 80051b2:	4618      	mov	r0, r3
 80051b4:	f7fe fca4 	bl	8003b00 <HAL_TIM_Base_Stop_IT>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d105      	bne.n	80051ca <MBMaster_HAL_TIM_PeriodElapsedCallback+0x58>
		{
			__HAL_TIM_SetCounter((*mbHandler).T15, 0);
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	69db      	ldr	r3, [r3, #28]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	2200      	movs	r2, #0
 80051c6:	625a      	str	r2, [r3, #36]	; 0x24
 80051c8:	e003      	b.n	80051d2 <MBMaster_HAL_TIM_PeriodElapsedCallback+0x60>
		}
		else
		{
			HandleError(mbHandler, T15_Error);
 80051ca:	2102      	movs	r1, #2
 80051cc:	6838      	ldr	r0, [r7, #0]
 80051ce:	f000 fddd 	bl	8005d8c <HandleError>
		}


		if((*mbHandler).RxBuffer.T15Counter <= 2)
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	f9b3 30a6 	ldrsh.w	r3, [r3, #166]	; 0xa6
 80051d8:	2b02      	cmp	r3, #2
 80051da:	dc04      	bgt.n	80051e6 <MBMaster_HAL_TIM_PeriodElapsedCallback+0x74>
			//{
				//printMsg("%u\t", (*mbHandler).RxBuffer.u8Array[k]);
			//}
			//printMsg(":\n");

			(*mbHandler).masterReceivedResp = true;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
 80051e4:	e003      	b.n	80051ee <MBMaster_HAL_TIM_PeriodElapsedCallback+0x7c>
		}
		else
		{
			HandleError(mbHandler, Tx_Frame_Error);
 80051e6:	2104      	movs	r1, #4
 80051e8:	6838      	ldr	r0, [r7, #0]
 80051ea:	f000 fdcf 	bl	8005d8c <HandleError>
		}
	}


	if((*htim).Instance == (*((*mbHandler).T15)).Instance)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	69db      	ldr	r3, [r3, #28]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d109      	bne.n	8005210 <MBMaster_HAL_TIM_PeriodElapsedCallback+0x9e>
	{
		(*mbHandler).RxBuffer.T15Counter ++;
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	f9b3 30a6 	ldrsh.w	r3, [r3, #166]	; 0xa6
 8005202:	b29b      	uxth	r3, r3
 8005204:	3301      	adds	r3, #1
 8005206:	b29b      	uxth	r3, r3
 8005208:	b21a      	sxth	r2, r3
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6

/*	if((*htim).Instance == (*((*mbHandler).TMRtimeout)).Instance)
	{
		(*mbHandler).timeOutExpired = true;
	}*/
}
 8005210:	bf00      	nop
 8005212:	3708      	adds	r7, #8
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <AddToXBuffer>:
}


// Common operation functions
void AddToXBuffer(XBuffer *xBuffer, uint8_t u8Element)
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	460b      	mov	r3, r1
 8005222:	70fb      	strb	r3, [r7, #3]
	(*xBuffer).u8Array[(*xBuffer).Index] = u8Element;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800522a:	4619      	mov	r1, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	78fa      	ldrb	r2, [r7, #3]
 8005230:	545a      	strb	r2, [r3, r1]
	(*xBuffer).Index ++;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005238:	3301      	adds	r3, #1
 800523a:	b2da      	uxtb	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

	if((*xBuffer).Index > (XBuffer_MAX - 1))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005248:	b25b      	sxtb	r3, r3
 800524a:	2b00      	cmp	r3, #0
 800524c:	da04      	bge.n	8005258 <AddToXBuffer+0x40>
	{
		(*xBuffer).overflow = true;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2201      	movs	r2, #1
 8005252:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	}
	else
	{
		(*xBuffer).overflow = false;
	}
}
 8005256:	e003      	b.n	8005260 <AddToXBuffer+0x48>
		(*xBuffer).overflow = false;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	bc80      	pop	{r7}
 8005268:	4770      	bx	lr

0800526a <ClearXBuffer>:

void ClearXBuffer(XBuffer *xBuffer)
{
 800526a:	b480      	push	{r7}
 800526c:	b083      	sub	sp, #12
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
	(*xBuffer).Index = 0;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	(*xBuffer).T15Counter = 0;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	(*xBuffer).u8Element[0] = 0;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	(*xBuffer).overflow = false;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
}
 8005292:	bf00      	nop
 8005294:	370c      	adds	r7, #12
 8005296:	46bd      	mov	sp, r7
 8005298:	bc80      	pop	{r7}
 800529a:	4770      	bx	lr

0800529c <BytesToReg>:

uint16_t BytesToReg(uint8_t lo_Byte, uint8_t ho_Byte)
{
 800529c:	b480      	push	{r7}
 800529e:	b085      	sub	sp, #20
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	4603      	mov	r3, r0
 80052a4:	460a      	mov	r2, r1
 80052a6:	71fb      	strb	r3, [r7, #7]
 80052a8:	4613      	mov	r3, r2
 80052aa:	71bb      	strb	r3, [r7, #6]
	uint16_t result;
	result = (ho_Byte << 8 | lo_Byte);
 80052ac:	79bb      	ldrb	r3, [r7, #6]
 80052ae:	021b      	lsls	r3, r3, #8
 80052b0:	b21a      	sxth	r2, r3
 80052b2:	79fb      	ldrb	r3, [r7, #7]
 80052b4:	b21b      	sxth	r3, r3
 80052b6:	4313      	orrs	r3, r2
 80052b8:	b21b      	sxth	r3, r3
 80052ba:	81fb      	strh	r3, [r7, #14]
	return result;
 80052bc:	89fb      	ldrh	r3, [r7, #14]
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3714      	adds	r7, #20
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bc80      	pop	{r7}
 80052c6:	4770      	bx	lr

080052c8 <RegToBytes>:

uint8_t* RegToBytes(uint16_t reg)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	4603      	mov	r3, r0
 80052d0:	80fb      	strh	r3, [r7, #6]
	static uint8_t result[2];
	// Lo_Byte
	result[0] = (uint8_t)(reg & 255);
 80052d2:	88fb      	ldrh	r3, [r7, #6]
 80052d4:	b2da      	uxtb	r2, r3
 80052d6:	4b07      	ldr	r3, [pc, #28]	; (80052f4 <RegToBytes+0x2c>)
 80052d8:	701a      	strb	r2, [r3, #0]
	// Ho_Byte
	result[1] = (uint8_t)(reg >> 8);
 80052da:	88fb      	ldrh	r3, [r7, #6]
 80052dc:	0a1b      	lsrs	r3, r3, #8
 80052de:	b29b      	uxth	r3, r3
 80052e0:	b2da      	uxtb	r2, r3
 80052e2:	4b04      	ldr	r3, [pc, #16]	; (80052f4 <RegToBytes+0x2c>)
 80052e4:	705a      	strb	r2, [r3, #1]
	return result;
 80052e6:	4b03      	ldr	r3, [pc, #12]	; (80052f4 <RegToBytes+0x2c>)
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bc80      	pop	{r7}
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	20000090 	.word	0x20000090

080052f8 <CalcTimerPeriod>:

void CalcTimerPeriod(Timer tmr, float_t *period, float_t baudrate, float_t wordLength)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b086      	sub	sp, #24
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60b9      	str	r1, [r7, #8]
 8005300:	607a      	str	r2, [r7, #4]
 8005302:	603b      	str	r3, [r7, #0]
 8005304:	4603      	mov	r3, r0
 8005306:	73fb      	strb	r3, [r7, #15]
	switch(tmr)
 8005308:	7bfb      	ldrb	r3, [r7, #15]
 800530a:	2b01      	cmp	r3, #1
 800530c:	d002      	beq.n	8005314 <CalcTimerPeriod+0x1c>
 800530e:	2b02      	cmp	r3, #2
 8005310:	d02f      	beq.n	8005372 <CalcTimerPeriod+0x7a>

		(*period) = resultTwo;
		break;
	}
	default:
		break;
 8005312:	e05d      	b.n	80053d0 <CalcTimerPeriod+0xd8>
		float_t resultOne = 0;
 8005314:	f04f 0300 	mov.w	r3, #0
 8005318:	617b      	str	r3, [r7, #20]
		if(baudrate > 19200)
 800531a:	4931      	ldr	r1, [pc, #196]	; (80053e0 <CalcTimerPeriod+0xe8>)
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f7fb fd1f 	bl	8000d60 <__aeabi_fcmpgt>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d002      	beq.n	800532e <CalcTimerPeriod+0x36>
			resultOne = 750;
 8005328:	4b2e      	ldr	r3, [pc, #184]	; (80053e4 <CalcTimerPeriod+0xec>)
 800532a:	617b      	str	r3, [r7, #20]
 800532c:	e01d      	b.n	800536a <CalcTimerPeriod+0x72>
			resultOne = (1000000 * (1.5 * (wordLength / baudrate)));
 800532e:	6879      	ldr	r1, [r7, #4]
 8005330:	6838      	ldr	r0, [r7, #0]
 8005332:	f7fb fc0d 	bl	8000b50 <__aeabi_fdiv>
 8005336:	4603      	mov	r3, r0
 8005338:	4618      	mov	r0, r3
 800533a:	f7fb f99f 	bl	800067c <__aeabi_f2d>
 800533e:	f04f 0200 	mov.w	r2, #0
 8005342:	4b29      	ldr	r3, [pc, #164]	; (80053e8 <CalcTimerPeriod+0xf0>)
 8005344:	f7fa ff0c 	bl	8000160 <__aeabi_dmul>
 8005348:	4602      	mov	r2, r0
 800534a:	460b      	mov	r3, r1
 800534c:	4610      	mov	r0, r2
 800534e:	4619      	mov	r1, r3
 8005350:	a321      	add	r3, pc, #132	; (adr r3, 80053d8 <CalcTimerPeriod+0xe0>)
 8005352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005356:	f7fa ff03 	bl	8000160 <__aeabi_dmul>
 800535a:	4602      	mov	r2, r0
 800535c:	460b      	mov	r3, r1
 800535e:	4610      	mov	r0, r2
 8005360:	4619      	mov	r1, r3
 8005362:	f7fb f9e3 	bl	800072c <__aeabi_d2f>
 8005366:	4603      	mov	r3, r0
 8005368:	617b      	str	r3, [r7, #20]
		(*period) = resultOne;
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	697a      	ldr	r2, [r7, #20]
 800536e:	601a      	str	r2, [r3, #0]
		break;
 8005370:	e02e      	b.n	80053d0 <CalcTimerPeriod+0xd8>
		float_t resultTwo = 0;
 8005372:	f04f 0300 	mov.w	r3, #0
 8005376:	613b      	str	r3, [r7, #16]
		if(baudrate > 19200)
 8005378:	4919      	ldr	r1, [pc, #100]	; (80053e0 <CalcTimerPeriod+0xe8>)
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f7fb fcf0 	bl	8000d60 <__aeabi_fcmpgt>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d002      	beq.n	800538c <CalcTimerPeriod+0x94>
			resultTwo = 1750;
 8005386:	4b19      	ldr	r3, [pc, #100]	; (80053ec <CalcTimerPeriod+0xf4>)
 8005388:	613b      	str	r3, [r7, #16]
 800538a:	e01d      	b.n	80053c8 <CalcTimerPeriod+0xd0>
			resultTwo = (1000000 * (3.5 * (wordLength / baudrate)));
 800538c:	6879      	ldr	r1, [r7, #4]
 800538e:	6838      	ldr	r0, [r7, #0]
 8005390:	f7fb fbde 	bl	8000b50 <__aeabi_fdiv>
 8005394:	4603      	mov	r3, r0
 8005396:	4618      	mov	r0, r3
 8005398:	f7fb f970 	bl	800067c <__aeabi_f2d>
 800539c:	f04f 0200 	mov.w	r2, #0
 80053a0:	4b13      	ldr	r3, [pc, #76]	; (80053f0 <CalcTimerPeriod+0xf8>)
 80053a2:	f7fa fedd 	bl	8000160 <__aeabi_dmul>
 80053a6:	4602      	mov	r2, r0
 80053a8:	460b      	mov	r3, r1
 80053aa:	4610      	mov	r0, r2
 80053ac:	4619      	mov	r1, r3
 80053ae:	a30a      	add	r3, pc, #40	; (adr r3, 80053d8 <CalcTimerPeriod+0xe0>)
 80053b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b4:	f7fa fed4 	bl	8000160 <__aeabi_dmul>
 80053b8:	4602      	mov	r2, r0
 80053ba:	460b      	mov	r3, r1
 80053bc:	4610      	mov	r0, r2
 80053be:	4619      	mov	r1, r3
 80053c0:	f7fb f9b4 	bl	800072c <__aeabi_d2f>
 80053c4:	4603      	mov	r3, r0
 80053c6:	613b      	str	r3, [r7, #16]
		(*period) = resultTwo;
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	601a      	str	r2, [r3, #0]
		break;
 80053ce:	bf00      	nop
	}
}
 80053d0:	bf00      	nop
 80053d2:	3718      	adds	r7, #24
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	00000000 	.word	0x00000000
 80053dc:	412e8480 	.word	0x412e8480
 80053e0:	46960000 	.word	0x46960000
 80053e4:	443b8000 	.word	0x443b8000
 80053e8:	3ff80000 	.word	0x3ff80000
 80053ec:	44dac000 	.word	0x44dac000
 80053f0:	400c0000 	.word	0x400c0000

080053f4 <CalculateCRC>:

uint16_t CalculateCRC(uint8_t* buffer, uint8_t length)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	460b      	mov	r3, r1
 80053fe:	70fb      	strb	r3, [r7, #3]
    uint16_t calcCRC, temp, flag;
    uint8_t i;
    uint8_t j;

    calcCRC = 0xFFFF;
 8005400:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005404:	81fb      	strh	r3, [r7, #14]

    for (i = 0; i < length; i++)
 8005406:	2300      	movs	r3, #0
 8005408:	737b      	strb	r3, [r7, #13]
 800540a:	e024      	b.n	8005456 <CalculateCRC+0x62>
    {
        calcCRC = calcCRC ^ buffer[i];
 800540c:	7b7b      	ldrb	r3, [r7, #13]
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	4413      	add	r3, r2
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	b29a      	uxth	r2, r3
 8005416:	89fb      	ldrh	r3, [r7, #14]
 8005418:	4053      	eors	r3, r2
 800541a:	81fb      	strh	r3, [r7, #14]
        for (j = 1; j <= 8; j++)
 800541c:	2301      	movs	r3, #1
 800541e:	733b      	strb	r3, [r7, #12]
 8005420:	e013      	b.n	800544a <CalculateCRC+0x56>
        {
            flag = calcCRC & 0x0001;
 8005422:	89fb      	ldrh	r3, [r7, #14]
 8005424:	f003 0301 	and.w	r3, r3, #1
 8005428:	813b      	strh	r3, [r7, #8]
            calcCRC >>= 1;
 800542a:	89fb      	ldrh	r3, [r7, #14]
 800542c:	085b      	lsrs	r3, r3, #1
 800542e:	81fb      	strh	r3, [r7, #14]
            if (flag)
 8005430:	893b      	ldrh	r3, [r7, #8]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d006      	beq.n	8005444 <CalculateCRC+0x50>
                calcCRC ^= 0xA001;
 8005436:	89fb      	ldrh	r3, [r7, #14]
 8005438:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 800543c:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8005440:	43db      	mvns	r3, r3
 8005442:	81fb      	strh	r3, [r7, #14]
        for (j = 1; j <= 8; j++)
 8005444:	7b3b      	ldrb	r3, [r7, #12]
 8005446:	3301      	adds	r3, #1
 8005448:	733b      	strb	r3, [r7, #12]
 800544a:	7b3b      	ldrb	r3, [r7, #12]
 800544c:	2b08      	cmp	r3, #8
 800544e:	d9e8      	bls.n	8005422 <CalculateCRC+0x2e>
    for (i = 0; i < length; i++)
 8005450:	7b7b      	ldrb	r3, [r7, #13]
 8005452:	3301      	adds	r3, #1
 8005454:	737b      	strb	r3, [r7, #13]
 8005456:	7b7a      	ldrb	r2, [r7, #13]
 8005458:	78fb      	ldrb	r3, [r7, #3]
 800545a:	429a      	cmp	r2, r3
 800545c:	d3d6      	bcc.n	800540c <CalculateCRC+0x18>
        }
    }

    // Reverse byte order.
    temp = calcCRC >> 8;
 800545e:	89fb      	ldrh	r3, [r7, #14]
 8005460:	0a1b      	lsrs	r3, r3, #8
 8005462:	817b      	strh	r3, [r7, #10]
    calcCRC = (calcCRC << 8) | temp;
 8005464:	89fb      	ldrh	r3, [r7, #14]
 8005466:	021b      	lsls	r3, r3, #8
 8005468:	b21a      	sxth	r2, r3
 800546a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800546e:	4313      	orrs	r3, r2
 8005470:	b21b      	sxth	r3, r3
 8005472:	81fb      	strh	r3, [r7, #14]
    calcCRC &= 0xFFFF;

    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return calcCRC;
 8005474:	89fb      	ldrh	r3, [r7, #14]
}
 8005476:	4618      	mov	r0, r3
 8005478:	3714      	adds	r7, #20
 800547a:	46bd      	mov	sp, r7
 800547c:	bc80      	pop	{r7}
 800547e:	4770      	bx	lr

08005480 <Modify_TIM>:

void Modify_TIM(TIM_HandleTypeDef *htim , uint32_t prescaler, uint32_t period)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	607a      	str	r2, [r7, #4]
    // DeInit timer
	HAL_TIM_Base_DeInit(htim);
 800548c:	68f8      	ldr	r0, [r7, #12]
 800548e:	f7fe fa90 	bl	80039b2 <HAL_TIM_Base_DeInit>

	(*htim).Init.Prescaler = prescaler;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	68ba      	ldr	r2, [r7, #8]
 8005496:	605a      	str	r2, [r3, #4]

	(*htim).Init.Period = period;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	60da      	str	r2, [r3, #12]

	// Init timer
	if (HAL_TIM_Base_Init(htim) == HAL_OK)
 800549e:	68f8      	ldr	r0, [r7, #12]
 80054a0:	f7fe fa38 	bl	8003914 <HAL_TIM_Base_Init>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d105      	bne.n	80054b6 <Modify_TIM+0x36>
	{
		__HAL_TIM_CLEAR_FLAG(htim, TIM_SR_UIF);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f06f 0201 	mvn.w	r2, #1
 80054b2:	611a      	str	r2, [r3, #16]
	}
	else
	{
		Error_Handler();
	}
}
 80054b4:	e001      	b.n	80054ba <Modify_TIM+0x3a>
		Error_Handler();
 80054b6:	f7fc f839 	bl	800152c <Error_Handler>
}
 80054ba:	bf00      	nop
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <Modify_UART>:

void Modify_UART(UART_HandleTypeDef *huart, uint32_t baudrate, uint32_t wordLength, uint32_t stopBits, uint32_t parity)
{
 80054c2:	b580      	push	{r7, lr}
 80054c4:	b084      	sub	sp, #16
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	60f8      	str	r0, [r7, #12]
 80054ca:	60b9      	str	r1, [r7, #8]
 80054cc:	607a      	str	r2, [r7, #4]
 80054ce:	603b      	str	r3, [r7, #0]
	// UART DeInit
	HAL_UART_DeInit(huart);
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f7fe fef6 	bl	80042c2 <HAL_UART_DeInit>

	(*huart).Init.BaudRate = baudrate;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	68ba      	ldr	r2, [r7, #8]
 80054da:	605a      	str	r2, [r3, #4]

	(*huart).Init.WordLength = wordLength;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	609a      	str	r2, [r3, #8]

	(*huart).Init.StopBits = stopBits;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	683a      	ldr	r2, [r7, #0]
 80054e6:	60da      	str	r2, [r3, #12]

	(*huart).Init.Parity = parity;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	69ba      	ldr	r2, [r7, #24]
 80054ec:	611a      	str	r2, [r3, #16]


	// UART Init
	if (HAL_UART_Init(&(*huart)) != HAL_OK)
 80054ee:	68f8      	ldr	r0, [r7, #12]
 80054f0:	f7fe fe9a 	bl	8004228 <HAL_UART_Init>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d001      	beq.n	80054fe <Modify_UART+0x3c>
	{
		Error_Handler();
 80054fa:	f7fc f817 	bl	800152c <Error_Handler>
	}
}
 80054fe:	bf00      	nop
 8005500:	3710      	adds	r7, #16
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}

08005506 <EnableRxMode>:

	return result;
}

void EnableRxMode(MBHandler *mbHandler)
{
 8005506:	b580      	push	{r7, lr}
 8005508:	b082      	sub	sp, #8
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin((*mbHandler).RE_Port, (*mbHandler).RE_Pin, GPIO_PIN_RESET);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6898      	ldr	r0, [r3, #8]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	899b      	ldrh	r3, [r3, #12]
 8005516:	2200      	movs	r2, #0
 8005518:	4619      	mov	r1, r3
 800551a:	f7fd fc36 	bl	8002d8a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin((*mbHandler).DE_Port, (*mbHandler).DE_Pin, GPIO_PIN_RESET);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6918      	ldr	r0, [r3, #16]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	8a9b      	ldrh	r3, [r3, #20]
 8005526:	2200      	movs	r2, #0
 8005528:	4619      	mov	r1, r3
 800552a:	f7fd fc2e 	bl	8002d8a <HAL_GPIO_WritePin>
}
 800552e:	bf00      	nop
 8005530:	3708      	adds	r7, #8
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}

08005536 <EnableTxMode>:

void EnableTxMode(MBHandler *mbHandler)
{
 8005536:	b580      	push	{r7, lr}
 8005538:	b082      	sub	sp, #8
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin((*mbHandler).RE_Port, (*mbHandler).RE_Pin, GPIO_PIN_SET);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6898      	ldr	r0, [r3, #8]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	899b      	ldrh	r3, [r3, #12]
 8005546:	2201      	movs	r2, #1
 8005548:	4619      	mov	r1, r3
 800554a:	f7fd fc1e 	bl	8002d8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin((*mbHandler).DE_Port, (*mbHandler).DE_Pin, GPIO_PIN_SET);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6918      	ldr	r0, [r3, #16]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	8a9b      	ldrh	r3, [r3, #20]
 8005556:	2201      	movs	r2, #1
 8005558:	4619      	mov	r1, r3
 800555a:	f7fd fc16 	bl	8002d8a <HAL_GPIO_WritePin>
}
 800555e:	bf00      	nop
 8005560:	3708      	adds	r7, #8
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
	...

08005568 <TransmitXBuffer>:

void TransmitXBuffer(MBHandler *mbHandler, XBuffer *xBuffer)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
	HAL_UART_Abort_IT((*mbHandler).UART_Port);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	4618      	mov	r0, r3
 8005578:	f7fe ff94 	bl	80044a4 <HAL_UART_Abort_IT>

	EnableTxMode(mbHandler);
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f7ff ffda 	bl	8005536 <EnableTxMode>

	HAL_UART_Transmit((*mbHandler).UART_Port, (*mbHandler).TxBuffer.u8Array, (*mbHandler).TxBuffer.Index,100);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6858      	ldr	r0, [r3, #4]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f103 01aa 	add.w	r1, r3, #170	; 0xaa
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 8005592:	b29a      	uxth	r2, r3
 8005594:	2364      	movs	r3, #100	; 0x64
 8005596:	f7fe fec3 	bl	8004320 <HAL_UART_Transmit>

	ClearXBuffer(&(*mbHandler).TxBuffer);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	33aa      	adds	r3, #170	; 0xaa
 800559e:	4618      	mov	r0, r3
 80055a0:	f7ff fe63 	bl	800526a <ClearXBuffer>

	ClearXBuffer(&(*mbHandler).RxBuffer);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	3324      	adds	r3, #36	; 0x24
 80055a8:	4618      	mov	r0, r3
 80055aa:	f7ff fe5e 	bl	800526a <ClearXBuffer>

	printMsg("\n");
 80055ae:	480f      	ldr	r0, [pc, #60]	; (80055ec <TransmitXBuffer+0x84>)
 80055b0:	f7fb fc00 	bl	8000db4 <printMsg>

	EnableRxMode(mbHandler);
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f7ff ffa6 	bl	8005506 <EnableRxMode>

	// Restart uart receive interrupt (to receive the next byte of the request)
	if( HAL_UART_Receive_IT((*mbHandler).UART_Port, (*mbHandler).RxBuffer.u8Element, 1) != HAL_OK )
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6858      	ldr	r0, [r3, #4]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	33a4      	adds	r3, #164	; 0xa4
 80055c2:	2201      	movs	r2, #1
 80055c4:	4619      	mov	r1, r3
 80055c6:	f7fe ff3d 	bl	8004444 <HAL_UART_Receive_IT>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d009      	beq.n	80055e4 <TransmitXBuffer+0x7c>
	{
		printMsg("->");
 80055d0:	4807      	ldr	r0, [pc, #28]	; (80055f0 <TransmitXBuffer+0x88>)
 80055d2:	f7fb fbef 	bl	8000db4 <printMsg>
		HandleError(mbHandler, UART_Error);
 80055d6:	2100      	movs	r1, #0
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 fbd7 	bl	8005d8c <HandleError>
		printMsg(":\n");
 80055de:	4805      	ldr	r0, [pc, #20]	; (80055f4 <TransmitXBuffer+0x8c>)
 80055e0:	f7fb fbe8 	bl	8000db4 <printMsg>
	}
}
 80055e4:	bf00      	nop
 80055e6:	3708      	adds	r7, #8
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	080068bc 	.word	0x080068bc
 80055f0:	080068c0 	.word	0x080068c0
 80055f4:	080068b8 	.word	0x080068b8

080055f8 <ReadCoils>:
}


// Master
uint8_t* ReadCoils(MBHandler *mbHandler, uint8_t slaveID,uint16_t startAddress, uint16_t coilsNumber)
{
 80055f8:	b5b0      	push	{r4, r5, r7, lr}
 80055fa:	b092      	sub	sp, #72	; 0x48
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	4608      	mov	r0, r1
 8005602:	4611      	mov	r1, r2
 8005604:	461a      	mov	r2, r3
 8005606:	4603      	mov	r3, r0
 8005608:	72fb      	strb	r3, [r7, #11]
 800560a:	460b      	mov	r3, r1
 800560c:	813b      	strh	r3, [r7, #8]
 800560e:	4613      	mov	r3, r2
 8005610:	80fb      	strh	r3, [r7, #6]
	(*mbHandler).masterReceivedResp = false;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
	//(*mbHandler).timeOutExpired = false;

	uint8_t* outputData = malloc(coilsNumber);
 800561a:	88fb      	ldrh	r3, [r7, #6]
 800561c:	4618      	mov	r0, r3
 800561e:	f000 fc21 	bl	8005e64 <malloc>
 8005622:	4603      	mov	r3, r0
 8005624:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t myByteNr = (uint8_t)(coilsNumber / 8);
 8005626:	88fb      	ldrh	r3, [r7, #6]
 8005628:	08db      	lsrs	r3, r3, #3
 800562a:	b29b      	uxth	r3, r3
 800562c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if((coilsNumber % 8) != 0)
 8005630:	88fb      	ldrh	r3, [r7, #6]
 8005632:	f003 0307 	and.w	r3, r3, #7
 8005636:	b29b      	uxth	r3, r3
 8005638:	2b00      	cmp	r3, #0
 800563a:	d004      	beq.n	8005646 <ReadCoils+0x4e>
		myByteNr++;
 800563c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005640:	3301      	adds	r3, #1
 8005642:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	ClearXBuffer(&((*mbHandler).TxBuffer));
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	33aa      	adds	r3, #170	; 0xaa
 800564a:	4618      	mov	r0, r3
 800564c:	f7ff fe0d 	bl	800526a <ClearXBuffer>

	AddToXBuffer(&((*mbHandler).TxBuffer), slaveID);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	33aa      	adds	r3, #170	; 0xaa
 8005654:	7afa      	ldrb	r2, [r7, #11]
 8005656:	4611      	mov	r1, r2
 8005658:	4618      	mov	r0, r3
 800565a:	f7ff fddd 	bl	8005218 <AddToXBuffer>
	AddToXBuffer(&((*mbHandler).TxBuffer), 1);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	33aa      	adds	r3, #170	; 0xaa
 8005662:	2101      	movs	r1, #1
 8005664:	4618      	mov	r0, r3
 8005666:	f7ff fdd7 	bl	8005218 <AddToXBuffer>

	uint8_t* startAddrPtr = RegToBytes(startAddress);
 800566a:	893b      	ldrh	r3, [r7, #8]
 800566c:	4618      	mov	r0, r3
 800566e:	f7ff fe2b 	bl	80052c8 <RegToBytes>
 8005672:	6338      	str	r0, [r7, #48]	; 0x30
	AddToXBuffer(&((*mbHandler).TxBuffer), *(startAddrPtr + 1));
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f103 02aa 	add.w	r2, r3, #170	; 0xaa
 800567a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800567c:	3301      	adds	r3, #1
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	4619      	mov	r1, r3
 8005682:	4610      	mov	r0, r2
 8005684:	f7ff fdc8 	bl	8005218 <AddToXBuffer>
	AddToXBuffer(&((*mbHandler).TxBuffer), *(startAddrPtr));
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f103 02aa 	add.w	r2, r3, #170	; 0xaa
 800568e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	4619      	mov	r1, r3
 8005694:	4610      	mov	r0, r2
 8005696:	f7ff fdbf 	bl	8005218 <AddToXBuffer>

	uint8_t* coilsNumberPtr = RegToBytes(coilsNumber);
 800569a:	88fb      	ldrh	r3, [r7, #6]
 800569c:	4618      	mov	r0, r3
 800569e:	f7ff fe13 	bl	80052c8 <RegToBytes>
 80056a2:	62f8      	str	r0, [r7, #44]	; 0x2c
	AddToXBuffer(&((*mbHandler).TxBuffer), *(coilsNumberPtr + 1));
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f103 02aa 	add.w	r2, r3, #170	; 0xaa
 80056aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ac:	3301      	adds	r3, #1
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	4619      	mov	r1, r3
 80056b2:	4610      	mov	r0, r2
 80056b4:	f7ff fdb0 	bl	8005218 <AddToXBuffer>
	AddToXBuffer(&((*mbHandler).TxBuffer), *(coilsNumberPtr));
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f103 02aa 	add.w	r2, r3, #170	; 0xaa
 80056be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	4619      	mov	r1, r3
 80056c4:	4610      	mov	r0, r2
 80056c6:	f7ff fda7 	bl	8005218 <AddToXBuffer>

	uint16_t crc = 	CalculateCRC((*mbHandler).TxBuffer.u8Array, (*mbHandler).TxBuffer.Index);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f103 02aa 	add.w	r2, r3, #170	; 0xaa
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 80056d6:	4619      	mov	r1, r3
 80056d8:	4610      	mov	r0, r2
 80056da:	f7ff fe8b 	bl	80053f4 <CalculateCRC>
 80056de:	4603      	mov	r3, r0
 80056e0:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint8_t* crcPtr = RegToBytes(crc);
 80056e2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80056e4:	4618      	mov	r0, r3
 80056e6:	f7ff fdef 	bl	80052c8 <RegToBytes>
 80056ea:	6278      	str	r0, [r7, #36]	; 0x24
	AddToXBuffer(&((*mbHandler).TxBuffer), *(crcPtr + 1));
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f103 02aa 	add.w	r2, r3, #170	; 0xaa
 80056f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f4:	3301      	adds	r3, #1
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	4619      	mov	r1, r3
 80056fa:	4610      	mov	r0, r2
 80056fc:	f7ff fd8c 	bl	8005218 <AddToXBuffer>
	AddToXBuffer(&((*mbHandler).TxBuffer), *(crcPtr));
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f103 02aa 	add.w	r2, r3, #170	; 0xaa
 8005706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	4619      	mov	r1, r3
 800570c:	4610      	mov	r0, r2
 800570e:	f7ff fd83 	bl	8005218 <AddToXBuffer>

	EnableTxMode(mbHandler);
 8005712:	68f8      	ldr	r0, [r7, #12]
 8005714:	f7ff ff0f 	bl	8005536 <EnableTxMode>

	TransmitXBuffer(mbHandler, &((*mbHandler).TxBuffer));
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	33aa      	adds	r3, #170	; 0xaa
 800571c:	4619      	mov	r1, r3
 800571e:	68f8      	ldr	r0, [r7, #12]
 8005720:	f7ff ff22 	bl	8005568 <TransmitXBuffer>

	//WaitingResponse(mbHandler);

	while(!(*mbHandler).masterReceivedResp)
 8005724:	bf00      	nop
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 800572c:	f083 0301 	eor.w	r3, r3, #1
 8005730:	b2db      	uxtb	r3, r3
 8005732:	2b00      	cmp	r3, #0
 8005734:	d1f7      	bne.n	8005726 <ReadCoils+0x12e>
	{

	}


	uint16_t responceCRC = BytesToReg((*mbHandler).RxBuffer.u8Array[(*mbHandler).RxBuffer.Index - 1], (*mbHandler).RxBuffer.u8Array[(*mbHandler).RxBuffer.Index - 2]);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800573c:	3b01      	subs	r3, #1
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	4413      	add	r3, r2
 8005742:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800574c:	3b02      	subs	r3, #2
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	4413      	add	r3, r2
 8005752:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005756:	4619      	mov	r1, r3
 8005758:	f7ff fda0 	bl	800529c <BytesToReg>
 800575c:	4603      	mov	r3, r0
 800575e:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t calculatedCRC = CalculateCRC((*mbHandler).RxBuffer.u8Array, (*mbHandler).RxBuffer.Index - 2);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800576c:	3b02      	subs	r3, #2
 800576e:	b2db      	uxtb	r3, r3
 8005770:	4619      	mov	r1, r3
 8005772:	4610      	mov	r0, r2
 8005774:	f7ff fe3e 	bl	80053f4 <CalculateCRC>
 8005778:	4603      	mov	r3, r0
 800577a:	843b      	strh	r3, [r7, #32]

	//printMsg("cCRC:%d;rCRC;%d\n",calculatedCRC, responceCRC);

	if(responceCRC == calculatedCRC)
 800577c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800577e:	8c3b      	ldrh	r3, [r7, #32]
 8005780:	429a      	cmp	r2, r3
 8005782:	f040 809e 	bne.w	80058c2 <ReadCoils+0x2ca>
	{
		if((*mbHandler).RxBuffer.u8Array[0] == slaveID)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800578c:	7afa      	ldrb	r2, [r7, #11]
 800578e:	429a      	cmp	r2, r3
 8005790:	f040 8093 	bne.w	80058ba <ReadCoils+0x2c2>
		{
			if((*mbHandler).RxBuffer.u8Array[1] == 1)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800579a:	2b01      	cmp	r3, #1
 800579c:	d17c      	bne.n	8005898 <ReadCoils+0x2a0>
			{
				if((*mbHandler).RxBuffer.u8Array[2]==myByteNr)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80057a4:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d171      	bne.n	8005890 <ReadCoils+0x298>
				{
 80057ac:	466b      	mov	r3, sp
 80057ae:	461d      	mov	r5, r3
					uint8_t byteCount = (*mbHandler).RxBuffer.u8Array[2];
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80057b6:	77fb      	strb	r3, [r7, #31]
					uint8_t dataArray[byteCount];
 80057b8:	7ffc      	ldrb	r4, [r7, #31]
 80057ba:	4623      	mov	r3, r4
 80057bc:	3b01      	subs	r3, #1
 80057be:	61bb      	str	r3, [r7, #24]
 80057c0:	b2e0      	uxtb	r0, r4
 80057c2:	f04f 0100 	mov.w	r1, #0
 80057c6:	f04f 0200 	mov.w	r2, #0
 80057ca:	f04f 0300 	mov.w	r3, #0
 80057ce:	00cb      	lsls	r3, r1, #3
 80057d0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80057d4:	00c2      	lsls	r2, r0, #3
 80057d6:	b2e0      	uxtb	r0, r4
 80057d8:	f04f 0100 	mov.w	r1, #0
 80057dc:	f04f 0200 	mov.w	r2, #0
 80057e0:	f04f 0300 	mov.w	r3, #0
 80057e4:	00cb      	lsls	r3, r1, #3
 80057e6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80057ea:	00c2      	lsls	r2, r0, #3
 80057ec:	4623      	mov	r3, r4
 80057ee:	3307      	adds	r3, #7
 80057f0:	08db      	lsrs	r3, r3, #3
 80057f2:	00db      	lsls	r3, r3, #3
 80057f4:	ebad 0d03 	sub.w	sp, sp, r3
 80057f8:	466b      	mov	r3, sp
 80057fa:	3300      	adds	r3, #0
 80057fc:	617b      	str	r3, [r7, #20]

					for(int i=0; i < byteCount; i++)
 80057fe:	2300      	movs	r3, #0
 8005800:	643b      	str	r3, [r7, #64]	; 0x40
 8005802:	e00d      	b.n	8005820 <ReadCoils+0x228>
					{
						dataArray[i] = (*mbHandler).RxBuffer.u8Array[3 + i];
 8005804:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005806:	3303      	adds	r3, #3
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	4413      	add	r3, r2
 800580c:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005814:	4413      	add	r3, r2
 8005816:	460a      	mov	r2, r1
 8005818:	701a      	strb	r2, [r3, #0]
					for(int i=0; i < byteCount; i++)
 800581a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800581c:	3301      	adds	r3, #1
 800581e:	643b      	str	r3, [r7, #64]	; 0x40
 8005820:	7ffb      	ldrb	r3, [r7, #31]
 8005822:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005824:	429a      	cmp	r2, r3
 8005826:	dbed      	blt.n	8005804 <ReadCoils+0x20c>
					}

					uint8_t byteIndex = 0;
 8005828:	2300      	movs	r3, #0
 800582a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
					uint8_t bitIndex = 0;
 800582e:	2300      	movs	r3, #0
 8005830:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					for(int coil = 0; coil < coilsNumber; coil++)
 8005834:	2300      	movs	r3, #0
 8005836:	63bb      	str	r3, [r7, #56]	; 0x38
 8005838:	e024      	b.n	8005884 <ReadCoils+0x28c>
					{

						*(outputData + coil) = bitRead(dataArray[byteIndex], bitIndex);
 800583a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	5cd3      	ldrb	r3, [r2, r3]
 8005842:	461a      	mov	r2, r3
 8005844:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005848:	fa42 f303 	asr.w	r3, r2, r3
 800584c:	b2da      	uxtb	r2, r3
 800584e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005850:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005852:	440b      	add	r3, r1
 8005854:	f002 0201 	and.w	r2, r2, #1
 8005858:	b2d2      	uxtb	r2, r2
 800585a:	701a      	strb	r2, [r3, #0]

						bitIndex++;
 800585c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005860:	3301      	adds	r3, #1
 8005862:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

						if(bitIndex > 7)
 8005866:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800586a:	2b07      	cmp	r3, #7
 800586c:	d907      	bls.n	800587e <ReadCoils+0x286>
						{
							byteIndex++;
 800586e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005872:	3301      	adds	r3, #1
 8005874:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

							bitIndex = 0;
 8005878:	2300      	movs	r3, #0
 800587a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					for(int coil = 0; coil < coilsNumber; coil++)
 800587e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005880:	3301      	adds	r3, #1
 8005882:	63bb      	str	r3, [r7, #56]	; 0x38
 8005884:	88fb      	ldrh	r3, [r7, #6]
 8005886:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005888:	429a      	cmp	r2, r3
 800588a:	dbd6      	blt.n	800583a <ReadCoils+0x242>
 800588c:	46ad      	mov	sp, r5
 800588e:	e01b      	b.n	80058c8 <ReadCoils+0x2d0>
					}
					printMsg(" :\n");*/
				}
				else
				{
					printMsg("Response byte number not correct\n");
 8005890:	4810      	ldr	r0, [pc, #64]	; (80058d4 <ReadCoils+0x2dc>)
 8005892:	f7fb fa8f 	bl	8000db4 <printMsg>
 8005896:	e017      	b.n	80058c8 <ReadCoils+0x2d0>
				}

			}
			else if((*mbHandler).RxBuffer.u8Array[1] == (80 + 1))
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800589e:	2b51      	cmp	r3, #81	; 0x51
 80058a0:	d107      	bne.n	80058b2 <ReadCoils+0x2ba>
			{
				printMsg("Slave responded exception:%d\n",(*mbHandler).RxBuffer.u8Array[2]);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80058a8:	4619      	mov	r1, r3
 80058aa:	480b      	ldr	r0, [pc, #44]	; (80058d8 <ReadCoils+0x2e0>)
 80058ac:	f7fb fa82 	bl	8000db4 <printMsg>
 80058b0:	e00a      	b.n	80058c8 <ReadCoils+0x2d0>
			}
			else
			{
				printMsg("Invaled response function code\n");
 80058b2:	480a      	ldr	r0, [pc, #40]	; (80058dc <ReadCoils+0x2e4>)
 80058b4:	f7fb fa7e 	bl	8000db4 <printMsg>
 80058b8:	e006      	b.n	80058c8 <ReadCoils+0x2d0>
			}
		}
		else
		{
			printMsg("Slave responded with wrong slave address\n");
 80058ba:	4809      	ldr	r0, [pc, #36]	; (80058e0 <ReadCoils+0x2e8>)
 80058bc:	f7fb fa7a 	bl	8000db4 <printMsg>
 80058c0:	e002      	b.n	80058c8 <ReadCoils+0x2d0>
		}
	}
	else
	{
		printMsg("CRC mismatch, response ignored\n");
 80058c2:	4808      	ldr	r0, [pc, #32]	; (80058e4 <ReadCoils+0x2ec>)
 80058c4:	f7fb fa76 	bl	8000db4 <printMsg>
	}

	return outputData;
 80058c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3748      	adds	r7, #72	; 0x48
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bdb0      	pop	{r4, r5, r7, pc}
 80058d2:	bf00      	nop
 80058d4:	08006988 	.word	0x08006988
 80058d8:	080069ac 	.word	0x080069ac
 80058dc:	080069cc 	.word	0x080069cc
 80058e0:	080069ec 	.word	0x080069ec
 80058e4:	08006a18 	.word	0x08006a18

080058e8 <ReadRegisters>:

	return result;
}

int ReadRegisters(MBHandler *mbHandler, uint8_t slaveID, uint16_t startAddress, uint16_t regsNumber, uint16_t* regsOutData)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b08c      	sub	sp, #48	; 0x30
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	4608      	mov	r0, r1
 80058f2:	4611      	mov	r1, r2
 80058f4:	461a      	mov	r2, r3
 80058f6:	4603      	mov	r3, r0
 80058f8:	72fb      	strb	r3, [r7, #11]
 80058fa:	460b      	mov	r3, r1
 80058fc:	813b      	strh	r3, [r7, #8]
 80058fe:	4613      	mov	r3, r2
 8005900:	80fb      	strh	r3, [r7, #6]
	int result = 0;
 8005902:	2300      	movs	r3, #0
 8005904:	62bb      	str	r3, [r7, #40]	; 0x28


	(*mbHandler).masterReceivedResp = false;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2200      	movs	r2, #0
 800590a:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8


	ClearXBuffer(&((*mbHandler).TxBuffer));
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	33aa      	adds	r3, #170	; 0xaa
 8005912:	4618      	mov	r0, r3
 8005914:	f7ff fca9 	bl	800526a <ClearXBuffer>

	AddToXBuffer(&((*mbHandler).TxBuffer), slaveID);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	33aa      	adds	r3, #170	; 0xaa
 800591c:	7afa      	ldrb	r2, [r7, #11]
 800591e:	4611      	mov	r1, r2
 8005920:	4618      	mov	r0, r3
 8005922:	f7ff fc79 	bl	8005218 <AddToXBuffer>

	AddToXBuffer(&((*mbHandler).TxBuffer), 3);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	33aa      	adds	r3, #170	; 0xaa
 800592a:	2103      	movs	r1, #3
 800592c:	4618      	mov	r0, r3
 800592e:	f7ff fc73 	bl	8005218 <AddToXBuffer>

	uint8_t* startAddrPtr = RegToBytes(startAddress);
 8005932:	893b      	ldrh	r3, [r7, #8]
 8005934:	4618      	mov	r0, r3
 8005936:	f7ff fcc7 	bl	80052c8 <RegToBytes>
 800593a:	6278      	str	r0, [r7, #36]	; 0x24
	AddToXBuffer(&((*mbHandler).TxBuffer), *(startAddrPtr + 1));
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f103 02aa 	add.w	r2, r3, #170	; 0xaa
 8005942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005944:	3301      	adds	r3, #1
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	4619      	mov	r1, r3
 800594a:	4610      	mov	r0, r2
 800594c:	f7ff fc64 	bl	8005218 <AddToXBuffer>
	AddToXBuffer(&((*mbHandler).TxBuffer), *(startAddrPtr));
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f103 02aa 	add.w	r2, r3, #170	; 0xaa
 8005956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	4619      	mov	r1, r3
 800595c:	4610      	mov	r0, r2
 800595e:	f7ff fc5b 	bl	8005218 <AddToXBuffer>

	uint8_t* registerNr = RegToBytes(regsNumber);
 8005962:	88fb      	ldrh	r3, [r7, #6]
 8005964:	4618      	mov	r0, r3
 8005966:	f7ff fcaf 	bl	80052c8 <RegToBytes>
 800596a:	6238      	str	r0, [r7, #32]
	AddToXBuffer(&((*mbHandler).TxBuffer), *(registerNr+ 1));
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f103 02aa 	add.w	r2, r3, #170	; 0xaa
 8005972:	6a3b      	ldr	r3, [r7, #32]
 8005974:	3301      	adds	r3, #1
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	4619      	mov	r1, r3
 800597a:	4610      	mov	r0, r2
 800597c:	f7ff fc4c 	bl	8005218 <AddToXBuffer>
	AddToXBuffer(&((*mbHandler).TxBuffer), *(registerNr));
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f103 02aa 	add.w	r2, r3, #170	; 0xaa
 8005986:	6a3b      	ldr	r3, [r7, #32]
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	4619      	mov	r1, r3
 800598c:	4610      	mov	r0, r2
 800598e:	f7ff fc43 	bl	8005218 <AddToXBuffer>

	uint16_t crc = CalculateCRC((*mbHandler).TxBuffer.u8Array, (*mbHandler).TxBuffer.Index);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f103 02aa 	add.w	r2, r3, #170	; 0xaa
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 800599e:	4619      	mov	r1, r3
 80059a0:	4610      	mov	r0, r2
 80059a2:	f7ff fd27 	bl	80053f4 <CalculateCRC>
 80059a6:	4603      	mov	r3, r0
 80059a8:	83fb      	strh	r3, [r7, #30]
	uint8_t* crcPtr = RegToBytes(crc);
 80059aa:	8bfb      	ldrh	r3, [r7, #30]
 80059ac:	4618      	mov	r0, r3
 80059ae:	f7ff fc8b 	bl	80052c8 <RegToBytes>
 80059b2:	61b8      	str	r0, [r7, #24]
	AddToXBuffer(&((*mbHandler).TxBuffer), *(crcPtr + 1));
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f103 02aa 	add.w	r2, r3, #170	; 0xaa
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	3301      	adds	r3, #1
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	4619      	mov	r1, r3
 80059c2:	4610      	mov	r0, r2
 80059c4:	f7ff fc28 	bl	8005218 <AddToXBuffer>
	AddToXBuffer(&((*mbHandler).TxBuffer), *(crcPtr));
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f103 02aa 	add.w	r2, r3, #170	; 0xaa
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	4619      	mov	r1, r3
 80059d4:	4610      	mov	r0, r2
 80059d6:	f7ff fc1f 	bl	8005218 <AddToXBuffer>

	EnableTxMode(mbHandler);
 80059da:	68f8      	ldr	r0, [r7, #12]
 80059dc:	f7ff fdab 	bl	8005536 <EnableTxMode>

	TransmitXBuffer(mbHandler, &((*mbHandler).TxBuffer));
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	33aa      	adds	r3, #170	; 0xaa
 80059e4:	4619      	mov	r1, r3
 80059e6:	68f8      	ldr	r0, [r7, #12]
 80059e8:	f7ff fdbe 	bl	8005568 <TransmitXBuffer>


	while(!(*mbHandler).masterReceivedResp)
 80059ec:	bf00      	nop
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 80059f4:	f083 0301 	eor.w	r3, r3, #1
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1f7      	bne.n	80059ee <ReadRegisters+0x106>
	{

	}


	uint16_t responseCRC = BytesToReg((*mbHandler).RxBuffer.u8Array[(*mbHandler).RxBuffer.Index - 1], (*mbHandler).RxBuffer.u8Array[(*mbHandler).RxBuffer.Index - 2]);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005a04:	3b01      	subs	r3, #1
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	4413      	add	r3, r2
 8005a0a:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005a14:	3b02      	subs	r3, #2
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	4413      	add	r3, r2
 8005a1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005a1e:	4619      	mov	r1, r3
 8005a20:	f7ff fc3c 	bl	800529c <BytesToReg>
 8005a24:	4603      	mov	r3, r0
 8005a26:	82fb      	strh	r3, [r7, #22]
	uint16_t calculatedCRC = CalculateCRC((*mbHandler).RxBuffer.u8Array, (*mbHandler).RxBuffer.Index - 2);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005a34:	3b02      	subs	r3, #2
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	4619      	mov	r1, r3
 8005a3a:	4610      	mov	r0, r2
 8005a3c:	f7ff fcda 	bl	80053f4 <CalculateCRC>
 8005a40:	4603      	mov	r3, r0
 8005a42:	82bb      	strh	r3, [r7, #20]

	//printMsg("cCRC:%d; rCRC:%d\n", calculatedCRC, responseCRC);

	if(responseCRC == calculatedCRC)
 8005a44:	8afa      	ldrh	r2, [r7, #22]
 8005a46:	8abb      	ldrh	r3, [r7, #20]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d149      	bne.n	8005ae0 <ReadRegisters+0x1f8>
	{
		if((*mbHandler).RxBuffer.u8Array[0] == slaveID)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005a52:	7afa      	ldrb	r2, [r7, #11]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d13f      	bne.n	8005ad8 <ReadRegisters+0x1f0>
		{
			if((*mbHandler).RxBuffer.u8Array[1] == 3)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005a5e:	2b03      	cmp	r3, #3
 8005a60:	d125      	bne.n	8005aae <ReadRegisters+0x1c6>
			{
				if((*mbHandler).RxBuffer.u8Array[2] == (2*regsNumber))
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005a68:	461a      	mov	r2, r3
 8005a6a:	88fb      	ldrh	r3, [r7, #6]
 8005a6c:	005b      	lsls	r3, r3, #1
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d119      	bne.n	8005aa6 <ReadRegisters+0x1be>
				{
					for(int byteNr = 0; byteNr < (*mbHandler).RxBuffer.u8Array[2]; byteNr++)
 8005a72:	2300      	movs	r3, #0
 8005a74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a76:	e00e      	b.n	8005a96 <ReadRegisters+0x1ae>
					{
						*(regsOutData + byteNr) = (*mbHandler).RxBuffer.u8Array[3 + byteNr];
 8005a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a7a:	3303      	adds	r3, #3
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	4413      	add	r3, r2
 8005a80:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
 8005a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a86:	005b      	lsls	r3, r3, #1
 8005a88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a8a:	4413      	add	r3, r2
 8005a8c:	b28a      	uxth	r2, r1
 8005a8e:	801a      	strh	r2, [r3, #0]
					for(int byteNr = 0; byteNr < (*mbHandler).RxBuffer.u8Array[2]; byteNr++)
 8005a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a92:	3301      	adds	r3, #1
 8005a94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	dbe9      	blt.n	8005a78 <ReadRegisters+0x190>
 8005aa4:	e01f      	b.n	8005ae6 <ReadRegisters+0x1fe>
					}
					printMsg(" :\n");*/
				}
				else
				{
					printMsg("Response byte number not correct\n");
 8005aa6:	4812      	ldr	r0, [pc, #72]	; (8005af0 <ReadRegisters+0x208>)
 8005aa8:	f7fb f984 	bl	8000db4 <printMsg>
 8005aac:	e01b      	b.n	8005ae6 <ReadRegisters+0x1fe>
				}
			}
			else if((*mbHandler).RxBuffer.u8Array[2] == (80 + 3))
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005ab4:	2b53      	cmp	r3, #83	; 0x53
 8005ab6:	d107      	bne.n	8005ac8 <ReadRegisters+0x1e0>
			{
				printMsg("Slave responded with exception:%d\n", (*mbHandler).RxBuffer.u8Array[2]);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005abe:	4619      	mov	r1, r3
 8005ac0:	480c      	ldr	r0, [pc, #48]	; (8005af4 <ReadRegisters+0x20c>)
 8005ac2:	f7fb f977 	bl	8000db4 <printMsg>
 8005ac6:	e00e      	b.n	8005ae6 <ReadRegisters+0x1fe>
			}
			else
			{
				printMsg("Invaled response function code:%d\n", (*mbHandler).RxBuffer.u8Array[2]);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005ace:	4619      	mov	r1, r3
 8005ad0:	4809      	ldr	r0, [pc, #36]	; (8005af8 <ReadRegisters+0x210>)
 8005ad2:	f7fb f96f 	bl	8000db4 <printMsg>
 8005ad6:	e006      	b.n	8005ae6 <ReadRegisters+0x1fe>
			}
		}
		else
		{
			printMsg("Slave responded with wrong slave address\n");
 8005ad8:	4808      	ldr	r0, [pc, #32]	; (8005afc <ReadRegisters+0x214>)
 8005ada:	f7fb f96b 	bl	8000db4 <printMsg>
 8005ade:	e002      	b.n	8005ae6 <ReadRegisters+0x1fe>
		}
	}
	else
	{
		printMsg("Slave responded with wrong slave address\n");
 8005ae0:	4806      	ldr	r0, [pc, #24]	; (8005afc <ReadRegisters+0x214>)
 8005ae2:	f7fb f967 	bl	8000db4 <printMsg>
	}

	return result;
 8005ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3730      	adds	r7, #48	; 0x30
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	08006988 	.word	0x08006988
 8005af4:	08006aac 	.word	0x08006aac
 8005af8:	08006ad0 	.word	0x08006ad0
 8005afc:	080069ec 	.word	0x080069ec

08005b00 <WriteRegisters>:

int WriteRegisters(MBHandler *mbHandler, uint8_t slaveID, uint16_t startAddress, uint16_t inputRegsData[])
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b08e      	sub	sp, #56	; 0x38
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	607b      	str	r3, [r7, #4]
 8005b0a:	460b      	mov	r3, r1
 8005b0c:	72fb      	strb	r3, [r7, #11]
 8005b0e:	4613      	mov	r3, r2
 8005b10:	813b      	strh	r3, [r7, #8]
	int result = 0;
 8005b12:	2300      	movs	r3, #0
 8005b14:	633b      	str	r3, [r7, #48]	; 0x30

	uint16_t regsNumber = sizeof(inputRegsData)/sizeof(uint16_t);
 8005b16:	2302      	movs	r3, #2
 8005b18:	85fb      	strh	r3, [r7, #46]	; 0x2e

		(*mbHandler).masterReceivedResp = false;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8


		ClearXBuffer(&((*mbHandler).TxBuffer));
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	33aa      	adds	r3, #170	; 0xaa
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7ff fb9f 	bl	800526a <ClearXBuffer>

		AddToXBuffer(&((*mbHandler).TxBuffer), slaveID);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	33aa      	adds	r3, #170	; 0xaa
 8005b30:	7afa      	ldrb	r2, [r7, #11]
 8005b32:	4611      	mov	r1, r2
 8005b34:	4618      	mov	r0, r3
 8005b36:	f7ff fb6f 	bl	8005218 <AddToXBuffer>

		AddToXBuffer(&((*mbHandler).TxBuffer), 16);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	33aa      	adds	r3, #170	; 0xaa
 8005b3e:	2110      	movs	r1, #16
 8005b40:	4618      	mov	r0, r3
 8005b42:	f7ff fb69 	bl	8005218 <AddToXBuffer>

		uint8_t* startAddrPtr = RegToBytes(startAddress);
 8005b46:	893b      	ldrh	r3, [r7, #8]
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f7ff fbbd 	bl	80052c8 <RegToBytes>
 8005b4e:	62b8      	str	r0, [r7, #40]	; 0x28
		AddToXBuffer(&((*mbHandler).TxBuffer), *(startAddrPtr + 1));
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f103 02aa 	add.w	r2, r3, #170	; 0xaa
 8005b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b58:	3301      	adds	r3, #1
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	4610      	mov	r0, r2
 8005b60:	f7ff fb5a 	bl	8005218 <AddToXBuffer>
		AddToXBuffer(&((*mbHandler).TxBuffer), *(startAddrPtr));
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f103 02aa 	add.w	r2, r3, #170	; 0xaa
 8005b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	4619      	mov	r1, r3
 8005b70:	4610      	mov	r0, r2
 8005b72:	f7ff fb51 	bl	8005218 <AddToXBuffer>

		uint8_t* registerNr = RegToBytes(regsNumber);
 8005b76:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f7ff fba5 	bl	80052c8 <RegToBytes>
 8005b7e:	6278      	str	r0, [r7, #36]	; 0x24
		AddToXBuffer(&((*mbHandler).TxBuffer), *(registerNr+ 1));
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f103 02aa 	add.w	r2, r3, #170	; 0xaa
 8005b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b88:	3301      	adds	r3, #1
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	4610      	mov	r0, r2
 8005b90:	f7ff fb42 	bl	8005218 <AddToXBuffer>
		AddToXBuffer(&((*mbHandler).TxBuffer), *(registerNr));
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f103 02aa 	add.w	r2, r3, #170	; 0xaa
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	4610      	mov	r0, r2
 8005ba2:	f7ff fb39 	bl	8005218 <AddToXBuffer>

		AddToXBuffer(&((*mbHandler).TxBuffer), (uint8_t)(2*regsNumber));
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f103 02aa 	add.w	r2, r3, #170	; 0xaa
 8005bac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	005b      	lsls	r3, r3, #1
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	4610      	mov	r0, r2
 8005bb8:	f7ff fb2e 	bl	8005218 <AddToXBuffer>

		for(int i=0; i < regsNumber;i++)
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	637b      	str	r3, [r7, #52]	; 0x34
 8005bc0:	e01e      	b.n	8005c00 <WriteRegisters+0x100>
		{
			uint8_t* regValue = RegToBytes(inputRegsData[i]);
 8005bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bc4:	005b      	lsls	r3, r3, #1
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	4413      	add	r3, r2
 8005bca:	881b      	ldrh	r3, [r3, #0]
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f7ff fb7b 	bl	80052c8 <RegToBytes>
 8005bd2:	6138      	str	r0, [r7, #16]

			AddToXBuffer(&((*mbHandler).TxBuffer), *(regValue + 1));
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f103 02aa 	add.w	r2, r3, #170	; 0xaa
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	3301      	adds	r3, #1
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	4619      	mov	r1, r3
 8005be2:	4610      	mov	r0, r2
 8005be4:	f7ff fb18 	bl	8005218 <AddToXBuffer>
			AddToXBuffer(&((*mbHandler).TxBuffer), *(regValue));
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f103 02aa 	add.w	r2, r3, #170	; 0xaa
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	4610      	mov	r0, r2
 8005bf6:	f7ff fb0f 	bl	8005218 <AddToXBuffer>
		for(int i=0; i < regsNumber;i++)
 8005bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	637b      	str	r3, [r7, #52]	; 0x34
 8005c00:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005c02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c04:	429a      	cmp	r2, r3
 8005c06:	dbdc      	blt.n	8005bc2 <WriteRegisters+0xc2>
		}


		uint16_t crc = CalculateCRC((*mbHandler).TxBuffer.u8Array, (*mbHandler).TxBuffer.Index);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f103 02aa 	add.w	r2, r3, #170	; 0xaa
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 8005c14:	4619      	mov	r1, r3
 8005c16:	4610      	mov	r0, r2
 8005c18:	f7ff fbec 	bl	80053f4 <CalculateCRC>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	847b      	strh	r3, [r7, #34]	; 0x22
		uint8_t* crcPtr = RegToBytes(crc);
 8005c20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005c22:	4618      	mov	r0, r3
 8005c24:	f7ff fb50 	bl	80052c8 <RegToBytes>
 8005c28:	61f8      	str	r0, [r7, #28]
		AddToXBuffer(&((*mbHandler).TxBuffer), *(crcPtr + 1));
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f103 02aa 	add.w	r2, r3, #170	; 0xaa
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	3301      	adds	r3, #1
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	4619      	mov	r1, r3
 8005c38:	4610      	mov	r0, r2
 8005c3a:	f7ff faed 	bl	8005218 <AddToXBuffer>
		AddToXBuffer(&((*mbHandler).TxBuffer), *(crcPtr));
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f103 02aa 	add.w	r2, r3, #170	; 0xaa
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	4619      	mov	r1, r3
 8005c4a:	4610      	mov	r0, r2
 8005c4c:	f7ff fae4 	bl	8005218 <AddToXBuffer>

		EnableTxMode(mbHandler);
 8005c50:	68f8      	ldr	r0, [r7, #12]
 8005c52:	f7ff fc70 	bl	8005536 <EnableTxMode>

		TransmitXBuffer(mbHandler, &((*mbHandler).TxBuffer));
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	33aa      	adds	r3, #170	; 0xaa
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	68f8      	ldr	r0, [r7, #12]
 8005c5e:	f7ff fc83 	bl	8005568 <TransmitXBuffer>


		while(!(*mbHandler).masterReceivedResp)
 8005c62:	bf00      	nop
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 8005c6a:	f083 0301 	eor.w	r3, r3, #1
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d1f7      	bne.n	8005c64 <WriteRegisters+0x164>
		{

		}

		uint16_t responseCRC = BytesToReg((*mbHandler).RxBuffer.u8Array[(*mbHandler).RxBuffer.Index - 1], (*mbHandler).RxBuffer.u8Array[(*mbHandler).RxBuffer.Index - 2]);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	4413      	add	r3, r2
 8005c80:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005c8a:	3b02      	subs	r3, #2
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	4413      	add	r3, r2
 8005c90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005c94:	4619      	mov	r1, r3
 8005c96:	f7ff fb01 	bl	800529c <BytesToReg>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	837b      	strh	r3, [r7, #26]
		uint16_t calculatedCRC = CalculateCRC((*mbHandler).RxBuffer.u8Array, (*mbHandler).RxBuffer.Index - 2);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005caa:	3b02      	subs	r3, #2
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	4619      	mov	r1, r3
 8005cb0:	4610      	mov	r0, r2
 8005cb2:	f7ff fb9f 	bl	80053f4 <CalculateCRC>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	833b      	strh	r3, [r7, #24]

		//printMsg("cCRC:%d; rCRC:%d\n", calculatedCRC, responseCRC);

		if(responseCRC == calculatedCRC)
 8005cba:	8b7a      	ldrh	r2, [r7, #26]
 8005cbc:	8b3b      	ldrh	r3, [r7, #24]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d14f      	bne.n	8005d62 <WriteRegisters+0x262>
		{
			if((*mbHandler).RxBuffer.u8Array[0] == slaveID)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005cc8:	7afa      	ldrb	r2, [r7, #11]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d145      	bne.n	8005d5a <WriteRegisters+0x25a>
			{
				if((*mbHandler).RxBuffer.u8Array[1] == 16)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005cd4:	2b10      	cmp	r3, #16
 8005cd6:	d12b      	bne.n	8005d30 <WriteRegisters+0x230>
				{
					uint16_t startingAddr = BytesToReg((*mbHandler).RxBuffer.u8Array[3], (*mbHandler).RxBuffer.u8Array[2]);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	4610      	mov	r0, r2
 8005ce8:	f7ff fad8 	bl	800529c <BytesToReg>
 8005cec:	4603      	mov	r3, r0
 8005cee:	82fb      	strh	r3, [r7, #22]

					if(startingAddr == startAddress)
 8005cf0:	8afa      	ldrh	r2, [r7, #22]
 8005cf2:	893b      	ldrh	r3, [r7, #8]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d117      	bne.n	8005d28 <WriteRegisters+0x228>
					{
						uint16_t regsNr = BytesToReg((*mbHandler).RxBuffer.u8Array[5], (*mbHandler).RxBuffer.u8Array[4]);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d04:	4619      	mov	r1, r3
 8005d06:	4610      	mov	r0, r2
 8005d08:	f7ff fac8 	bl	800529c <BytesToReg>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	82bb      	strh	r3, [r7, #20]
						if(regsNr == regsNumber)
 8005d10:	8aba      	ldrh	r2, [r7, #20]
 8005d12:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d103      	bne.n	8005d20 <WriteRegisters+0x220>
						{
							printMsg("Write registers: Success!\n");
 8005d18:	4816      	ldr	r0, [pc, #88]	; (8005d74 <WriteRegisters+0x274>)
 8005d1a:	f7fb f84b 	bl	8000db4 <printMsg>
 8005d1e:	e023      	b.n	8005d68 <WriteRegisters+0x268>
						}
						else
						{
							printMsg("Response register number not correct\n");
 8005d20:	4815      	ldr	r0, [pc, #84]	; (8005d78 <WriteRegisters+0x278>)
 8005d22:	f7fb f847 	bl	8000db4 <printMsg>
 8005d26:	e01f      	b.n	8005d68 <WriteRegisters+0x268>
						}
					}
					else
					{
						printMsg("Response starting address not correct\n");
 8005d28:	4814      	ldr	r0, [pc, #80]	; (8005d7c <WriteRegisters+0x27c>)
 8005d2a:	f7fb f843 	bl	8000db4 <printMsg>
 8005d2e:	e01b      	b.n	8005d68 <WriteRegisters+0x268>
					}
				}
				else if((*mbHandler).RxBuffer.u8Array[2] == (80 + 16))
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005d36:	2b60      	cmp	r3, #96	; 0x60
 8005d38:	d107      	bne.n	8005d4a <WriteRegisters+0x24a>
				{
					printMsg("Slave responded with exception:%d\n", (*mbHandler).RxBuffer.u8Array[2]);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005d40:	4619      	mov	r1, r3
 8005d42:	480f      	ldr	r0, [pc, #60]	; (8005d80 <WriteRegisters+0x280>)
 8005d44:	f7fb f836 	bl	8000db4 <printMsg>
 8005d48:	e00e      	b.n	8005d68 <WriteRegisters+0x268>
				}
				else
				{
					printMsg("Invaled response function code:%d\n", (*mbHandler).RxBuffer.u8Array[2]);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005d50:	4619      	mov	r1, r3
 8005d52:	480c      	ldr	r0, [pc, #48]	; (8005d84 <WriteRegisters+0x284>)
 8005d54:	f7fb f82e 	bl	8000db4 <printMsg>
 8005d58:	e006      	b.n	8005d68 <WriteRegisters+0x268>
				}
			}
			else
			{
				printMsg("Slave responded with wrong slave address\n");
 8005d5a:	480b      	ldr	r0, [pc, #44]	; (8005d88 <WriteRegisters+0x288>)
 8005d5c:	f7fb f82a 	bl	8000db4 <printMsg>
 8005d60:	e002      	b.n	8005d68 <WriteRegisters+0x268>
			}
		}
		else
		{
			printMsg("Slave responded with wrong slave address\n");
 8005d62:	4809      	ldr	r0, [pc, #36]	; (8005d88 <WriteRegisters+0x288>)
 8005d64:	f7fb f826 	bl	8000db4 <printMsg>
		}




	return 1;
 8005d68:	2301      	movs	r3, #1
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3738      	adds	r7, #56	; 0x38
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	08006af4 	.word	0x08006af4
 8005d78:	08006b10 	.word	0x08006b10
 8005d7c:	08006b38 	.word	0x08006b38
 8005d80:	08006aac 	.word	0x08006aac
 8005d84:	08006ad0 	.word	0x08006ad0
 8005d88:	080069ec 	.word	0x080069ec

08005d8c <HandleError>:

// General
void HandleError(MBHandler *mbHandler, Error error)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	460b      	mov	r3, r1
 8005d96:	70fb      	strb	r3, [r7, #3]
	switch(error)
 8005d98:	78fb      	ldrb	r3, [r7, #3]
 8005d9a:	2b05      	cmp	r3, #5
 8005d9c:	d826      	bhi.n	8005dec <HandleError+0x60>
 8005d9e:	a201      	add	r2, pc, #4	; (adr r2, 8005da4 <HandleError+0x18>)
 8005da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da4:	08005dbd 	.word	0x08005dbd
 8005da8:	08005dc5 	.word	0x08005dc5
 8005dac:	08005dcd 	.word	0x08005dcd
 8005db0:	08005dd5 	.word	0x08005dd5
 8005db4:	08005ddd 	.word	0x08005ddd
 8005db8:	08005de5 	.word	0x08005de5
	{
	case 0:
	{
		printMsg("uart error\n");
 8005dbc:	480e      	ldr	r0, [pc, #56]	; (8005df8 <HandleError+0x6c>)
 8005dbe:	f7fa fff9 	bl	8000db4 <printMsg>
		break;
 8005dc2:	e014      	b.n	8005dee <HandleError+0x62>
	}
	case 1:
	{
		printMsg("T35 error\n");
 8005dc4:	480d      	ldr	r0, [pc, #52]	; (8005dfc <HandleError+0x70>)
 8005dc6:	f7fa fff5 	bl	8000db4 <printMsg>
		break;
 8005dca:	e010      	b.n	8005dee <HandleError+0x62>
	}
	case 2:
	{
		printMsg("T15 error\n");
 8005dcc:	480c      	ldr	r0, [pc, #48]	; (8005e00 <HandleError+0x74>)
 8005dce:	f7fa fff1 	bl	8000db4 <printMsg>
		break;
 8005dd2:	e00c      	b.n	8005dee <HandleError+0x62>
	}
	case 3:
	{
		printMsg("Receiving frame error\n");
 8005dd4:	480b      	ldr	r0, [pc, #44]	; (8005e04 <HandleError+0x78>)
 8005dd6:	f7fa ffed 	bl	8000db4 <printMsg>
		break;
 8005dda:	e008      	b.n	8005dee <HandleError+0x62>
	}
	case 4:
	{
		printMsg("CRC mismatch\n");
 8005ddc:	480a      	ldr	r0, [pc, #40]	; (8005e08 <HandleError+0x7c>)
 8005dde:	f7fa ffe9 	bl	8000db4 <printMsg>
		break;
 8005de2:	e004      	b.n	8005dee <HandleError+0x62>
	}
	case 5:
	{
		printMsg("Wrong slave id\n");
 8005de4:	4809      	ldr	r0, [pc, #36]	; (8005e0c <HandleError+0x80>)
 8005de6:	f7fa ffe5 	bl	8000db4 <printMsg>
		break;
 8005dea:	e000      	b.n	8005dee <HandleError+0x62>
	}
	default:
		break;
 8005dec:	bf00      	nop
	}
}
 8005dee:	bf00      	nop
 8005df0:	3708      	adds	r7, #8
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	08006b60 	.word	0x08006b60
 8005dfc:	08006b6c 	.word	0x08006b6c
 8005e00:	08006b78 	.word	0x08006b78
 8005e04:	08006b84 	.word	0x08006b84
 8005e08:	08006b9c 	.word	0x08006b9c
 8005e0c:	08006bac 	.word	0x08006bac

08005e10 <__errno>:
 8005e10:	4b01      	ldr	r3, [pc, #4]	; (8005e18 <__errno+0x8>)
 8005e12:	6818      	ldr	r0, [r3, #0]
 8005e14:	4770      	bx	lr
 8005e16:	bf00      	nop
 8005e18:	2000000c 	.word	0x2000000c

08005e1c <__libc_init_array>:
 8005e1c:	b570      	push	{r4, r5, r6, lr}
 8005e1e:	2600      	movs	r6, #0
 8005e20:	4d0c      	ldr	r5, [pc, #48]	; (8005e54 <__libc_init_array+0x38>)
 8005e22:	4c0d      	ldr	r4, [pc, #52]	; (8005e58 <__libc_init_array+0x3c>)
 8005e24:	1b64      	subs	r4, r4, r5
 8005e26:	10a4      	asrs	r4, r4, #2
 8005e28:	42a6      	cmp	r6, r4
 8005e2a:	d109      	bne.n	8005e40 <__libc_init_array+0x24>
 8005e2c:	f000 fc6c 	bl	8006708 <_init>
 8005e30:	2600      	movs	r6, #0
 8005e32:	4d0a      	ldr	r5, [pc, #40]	; (8005e5c <__libc_init_array+0x40>)
 8005e34:	4c0a      	ldr	r4, [pc, #40]	; (8005e60 <__libc_init_array+0x44>)
 8005e36:	1b64      	subs	r4, r4, r5
 8005e38:	10a4      	asrs	r4, r4, #2
 8005e3a:	42a6      	cmp	r6, r4
 8005e3c:	d105      	bne.n	8005e4a <__libc_init_array+0x2e>
 8005e3e:	bd70      	pop	{r4, r5, r6, pc}
 8005e40:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e44:	4798      	blx	r3
 8005e46:	3601      	adds	r6, #1
 8005e48:	e7ee      	b.n	8005e28 <__libc_init_array+0xc>
 8005e4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e4e:	4798      	blx	r3
 8005e50:	3601      	adds	r6, #1
 8005e52:	e7f2      	b.n	8005e3a <__libc_init_array+0x1e>
 8005e54:	08006c94 	.word	0x08006c94
 8005e58:	08006c94 	.word	0x08006c94
 8005e5c:	08006c94 	.word	0x08006c94
 8005e60:	08006c98 	.word	0x08006c98

08005e64 <malloc>:
 8005e64:	4b02      	ldr	r3, [pc, #8]	; (8005e70 <malloc+0xc>)
 8005e66:	4601      	mov	r1, r0
 8005e68:	6818      	ldr	r0, [r3, #0]
 8005e6a:	f000 b86d 	b.w	8005f48 <_malloc_r>
 8005e6e:	bf00      	nop
 8005e70:	2000000c 	.word	0x2000000c

08005e74 <free>:
 8005e74:	4b02      	ldr	r3, [pc, #8]	; (8005e80 <free+0xc>)
 8005e76:	4601      	mov	r1, r0
 8005e78:	6818      	ldr	r0, [r3, #0]
 8005e7a:	f000 b819 	b.w	8005eb0 <_free_r>
 8005e7e:	bf00      	nop
 8005e80:	2000000c 	.word	0x2000000c

08005e84 <memcpy>:
 8005e84:	440a      	add	r2, r1
 8005e86:	4291      	cmp	r1, r2
 8005e88:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e8c:	d100      	bne.n	8005e90 <memcpy+0xc>
 8005e8e:	4770      	bx	lr
 8005e90:	b510      	push	{r4, lr}
 8005e92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e96:	4291      	cmp	r1, r2
 8005e98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e9c:	d1f9      	bne.n	8005e92 <memcpy+0xe>
 8005e9e:	bd10      	pop	{r4, pc}

08005ea0 <memset>:
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	4402      	add	r2, r0
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d100      	bne.n	8005eaa <memset+0xa>
 8005ea8:	4770      	bx	lr
 8005eaa:	f803 1b01 	strb.w	r1, [r3], #1
 8005eae:	e7f9      	b.n	8005ea4 <memset+0x4>

08005eb0 <_free_r>:
 8005eb0:	b538      	push	{r3, r4, r5, lr}
 8005eb2:	4605      	mov	r5, r0
 8005eb4:	2900      	cmp	r1, #0
 8005eb6:	d043      	beq.n	8005f40 <_free_r+0x90>
 8005eb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ebc:	1f0c      	subs	r4, r1, #4
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	bfb8      	it	lt
 8005ec2:	18e4      	addlt	r4, r4, r3
 8005ec4:	f000 f8ca 	bl	800605c <__malloc_lock>
 8005ec8:	4a1e      	ldr	r2, [pc, #120]	; (8005f44 <_free_r+0x94>)
 8005eca:	6813      	ldr	r3, [r2, #0]
 8005ecc:	4610      	mov	r0, r2
 8005ece:	b933      	cbnz	r3, 8005ede <_free_r+0x2e>
 8005ed0:	6063      	str	r3, [r4, #4]
 8005ed2:	6014      	str	r4, [r2, #0]
 8005ed4:	4628      	mov	r0, r5
 8005ed6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005eda:	f000 b8c5 	b.w	8006068 <__malloc_unlock>
 8005ede:	42a3      	cmp	r3, r4
 8005ee0:	d90a      	bls.n	8005ef8 <_free_r+0x48>
 8005ee2:	6821      	ldr	r1, [r4, #0]
 8005ee4:	1862      	adds	r2, r4, r1
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	bf01      	itttt	eq
 8005eea:	681a      	ldreq	r2, [r3, #0]
 8005eec:	685b      	ldreq	r3, [r3, #4]
 8005eee:	1852      	addeq	r2, r2, r1
 8005ef0:	6022      	streq	r2, [r4, #0]
 8005ef2:	6063      	str	r3, [r4, #4]
 8005ef4:	6004      	str	r4, [r0, #0]
 8005ef6:	e7ed      	b.n	8005ed4 <_free_r+0x24>
 8005ef8:	461a      	mov	r2, r3
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	b10b      	cbz	r3, 8005f02 <_free_r+0x52>
 8005efe:	42a3      	cmp	r3, r4
 8005f00:	d9fa      	bls.n	8005ef8 <_free_r+0x48>
 8005f02:	6811      	ldr	r1, [r2, #0]
 8005f04:	1850      	adds	r0, r2, r1
 8005f06:	42a0      	cmp	r0, r4
 8005f08:	d10b      	bne.n	8005f22 <_free_r+0x72>
 8005f0a:	6820      	ldr	r0, [r4, #0]
 8005f0c:	4401      	add	r1, r0
 8005f0e:	1850      	adds	r0, r2, r1
 8005f10:	4283      	cmp	r3, r0
 8005f12:	6011      	str	r1, [r2, #0]
 8005f14:	d1de      	bne.n	8005ed4 <_free_r+0x24>
 8005f16:	6818      	ldr	r0, [r3, #0]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	4401      	add	r1, r0
 8005f1c:	6011      	str	r1, [r2, #0]
 8005f1e:	6053      	str	r3, [r2, #4]
 8005f20:	e7d8      	b.n	8005ed4 <_free_r+0x24>
 8005f22:	d902      	bls.n	8005f2a <_free_r+0x7a>
 8005f24:	230c      	movs	r3, #12
 8005f26:	602b      	str	r3, [r5, #0]
 8005f28:	e7d4      	b.n	8005ed4 <_free_r+0x24>
 8005f2a:	6820      	ldr	r0, [r4, #0]
 8005f2c:	1821      	adds	r1, r4, r0
 8005f2e:	428b      	cmp	r3, r1
 8005f30:	bf01      	itttt	eq
 8005f32:	6819      	ldreq	r1, [r3, #0]
 8005f34:	685b      	ldreq	r3, [r3, #4]
 8005f36:	1809      	addeq	r1, r1, r0
 8005f38:	6021      	streq	r1, [r4, #0]
 8005f3a:	6063      	str	r3, [r4, #4]
 8005f3c:	6054      	str	r4, [r2, #4]
 8005f3e:	e7c9      	b.n	8005ed4 <_free_r+0x24>
 8005f40:	bd38      	pop	{r3, r4, r5, pc}
 8005f42:	bf00      	nop
 8005f44:	20000094 	.word	0x20000094

08005f48 <_malloc_r>:
 8005f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f4a:	1ccd      	adds	r5, r1, #3
 8005f4c:	f025 0503 	bic.w	r5, r5, #3
 8005f50:	3508      	adds	r5, #8
 8005f52:	2d0c      	cmp	r5, #12
 8005f54:	bf38      	it	cc
 8005f56:	250c      	movcc	r5, #12
 8005f58:	2d00      	cmp	r5, #0
 8005f5a:	4606      	mov	r6, r0
 8005f5c:	db01      	blt.n	8005f62 <_malloc_r+0x1a>
 8005f5e:	42a9      	cmp	r1, r5
 8005f60:	d903      	bls.n	8005f6a <_malloc_r+0x22>
 8005f62:	230c      	movs	r3, #12
 8005f64:	6033      	str	r3, [r6, #0]
 8005f66:	2000      	movs	r0, #0
 8005f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f6a:	f000 f877 	bl	800605c <__malloc_lock>
 8005f6e:	4921      	ldr	r1, [pc, #132]	; (8005ff4 <_malloc_r+0xac>)
 8005f70:	680a      	ldr	r2, [r1, #0]
 8005f72:	4614      	mov	r4, r2
 8005f74:	b99c      	cbnz	r4, 8005f9e <_malloc_r+0x56>
 8005f76:	4f20      	ldr	r7, [pc, #128]	; (8005ff8 <_malloc_r+0xb0>)
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	b923      	cbnz	r3, 8005f86 <_malloc_r+0x3e>
 8005f7c:	4621      	mov	r1, r4
 8005f7e:	4630      	mov	r0, r6
 8005f80:	f000 f83c 	bl	8005ffc <_sbrk_r>
 8005f84:	6038      	str	r0, [r7, #0]
 8005f86:	4629      	mov	r1, r5
 8005f88:	4630      	mov	r0, r6
 8005f8a:	f000 f837 	bl	8005ffc <_sbrk_r>
 8005f8e:	1c43      	adds	r3, r0, #1
 8005f90:	d123      	bne.n	8005fda <_malloc_r+0x92>
 8005f92:	230c      	movs	r3, #12
 8005f94:	4630      	mov	r0, r6
 8005f96:	6033      	str	r3, [r6, #0]
 8005f98:	f000 f866 	bl	8006068 <__malloc_unlock>
 8005f9c:	e7e3      	b.n	8005f66 <_malloc_r+0x1e>
 8005f9e:	6823      	ldr	r3, [r4, #0]
 8005fa0:	1b5b      	subs	r3, r3, r5
 8005fa2:	d417      	bmi.n	8005fd4 <_malloc_r+0x8c>
 8005fa4:	2b0b      	cmp	r3, #11
 8005fa6:	d903      	bls.n	8005fb0 <_malloc_r+0x68>
 8005fa8:	6023      	str	r3, [r4, #0]
 8005faa:	441c      	add	r4, r3
 8005fac:	6025      	str	r5, [r4, #0]
 8005fae:	e004      	b.n	8005fba <_malloc_r+0x72>
 8005fb0:	6863      	ldr	r3, [r4, #4]
 8005fb2:	42a2      	cmp	r2, r4
 8005fb4:	bf0c      	ite	eq
 8005fb6:	600b      	streq	r3, [r1, #0]
 8005fb8:	6053      	strne	r3, [r2, #4]
 8005fba:	4630      	mov	r0, r6
 8005fbc:	f000 f854 	bl	8006068 <__malloc_unlock>
 8005fc0:	f104 000b 	add.w	r0, r4, #11
 8005fc4:	1d23      	adds	r3, r4, #4
 8005fc6:	f020 0007 	bic.w	r0, r0, #7
 8005fca:	1ac2      	subs	r2, r0, r3
 8005fcc:	d0cc      	beq.n	8005f68 <_malloc_r+0x20>
 8005fce:	1a1b      	subs	r3, r3, r0
 8005fd0:	50a3      	str	r3, [r4, r2]
 8005fd2:	e7c9      	b.n	8005f68 <_malloc_r+0x20>
 8005fd4:	4622      	mov	r2, r4
 8005fd6:	6864      	ldr	r4, [r4, #4]
 8005fd8:	e7cc      	b.n	8005f74 <_malloc_r+0x2c>
 8005fda:	1cc4      	adds	r4, r0, #3
 8005fdc:	f024 0403 	bic.w	r4, r4, #3
 8005fe0:	42a0      	cmp	r0, r4
 8005fe2:	d0e3      	beq.n	8005fac <_malloc_r+0x64>
 8005fe4:	1a21      	subs	r1, r4, r0
 8005fe6:	4630      	mov	r0, r6
 8005fe8:	f000 f808 	bl	8005ffc <_sbrk_r>
 8005fec:	3001      	adds	r0, #1
 8005fee:	d1dd      	bne.n	8005fac <_malloc_r+0x64>
 8005ff0:	e7cf      	b.n	8005f92 <_malloc_r+0x4a>
 8005ff2:	bf00      	nop
 8005ff4:	20000094 	.word	0x20000094
 8005ff8:	20000098 	.word	0x20000098

08005ffc <_sbrk_r>:
 8005ffc:	b538      	push	{r3, r4, r5, lr}
 8005ffe:	2300      	movs	r3, #0
 8006000:	4d05      	ldr	r5, [pc, #20]	; (8006018 <_sbrk_r+0x1c>)
 8006002:	4604      	mov	r4, r0
 8006004:	4608      	mov	r0, r1
 8006006:	602b      	str	r3, [r5, #0]
 8006008:	f7fb fcb8 	bl	800197c <_sbrk>
 800600c:	1c43      	adds	r3, r0, #1
 800600e:	d102      	bne.n	8006016 <_sbrk_r+0x1a>
 8006010:	682b      	ldr	r3, [r5, #0]
 8006012:	b103      	cbz	r3, 8006016 <_sbrk_r+0x1a>
 8006014:	6023      	str	r3, [r4, #0]
 8006016:	bd38      	pop	{r3, r4, r5, pc}
 8006018:	200003fc 	.word	0x200003fc

0800601c <_vsiprintf_r>:
 800601c:	b500      	push	{lr}
 800601e:	b09b      	sub	sp, #108	; 0x6c
 8006020:	9100      	str	r1, [sp, #0]
 8006022:	9104      	str	r1, [sp, #16]
 8006024:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006028:	9105      	str	r1, [sp, #20]
 800602a:	9102      	str	r1, [sp, #8]
 800602c:	4905      	ldr	r1, [pc, #20]	; (8006044 <_vsiprintf_r+0x28>)
 800602e:	9103      	str	r1, [sp, #12]
 8006030:	4669      	mov	r1, sp
 8006032:	f000 f87b 	bl	800612c <_svfiprintf_r>
 8006036:	2200      	movs	r2, #0
 8006038:	9b00      	ldr	r3, [sp, #0]
 800603a:	701a      	strb	r2, [r3, #0]
 800603c:	b01b      	add	sp, #108	; 0x6c
 800603e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006042:	bf00      	nop
 8006044:	ffff0208 	.word	0xffff0208

08006048 <vsiprintf>:
 8006048:	4613      	mov	r3, r2
 800604a:	460a      	mov	r2, r1
 800604c:	4601      	mov	r1, r0
 800604e:	4802      	ldr	r0, [pc, #8]	; (8006058 <vsiprintf+0x10>)
 8006050:	6800      	ldr	r0, [r0, #0]
 8006052:	f7ff bfe3 	b.w	800601c <_vsiprintf_r>
 8006056:	bf00      	nop
 8006058:	2000000c 	.word	0x2000000c

0800605c <__malloc_lock>:
 800605c:	4801      	ldr	r0, [pc, #4]	; (8006064 <__malloc_lock+0x8>)
 800605e:	f000 bafb 	b.w	8006658 <__retarget_lock_acquire_recursive>
 8006062:	bf00      	nop
 8006064:	20000404 	.word	0x20000404

08006068 <__malloc_unlock>:
 8006068:	4801      	ldr	r0, [pc, #4]	; (8006070 <__malloc_unlock+0x8>)
 800606a:	f000 baf6 	b.w	800665a <__retarget_lock_release_recursive>
 800606e:	bf00      	nop
 8006070:	20000404 	.word	0x20000404

08006074 <__ssputs_r>:
 8006074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006078:	688e      	ldr	r6, [r1, #8]
 800607a:	4682      	mov	sl, r0
 800607c:	429e      	cmp	r6, r3
 800607e:	460c      	mov	r4, r1
 8006080:	4690      	mov	r8, r2
 8006082:	461f      	mov	r7, r3
 8006084:	d838      	bhi.n	80060f8 <__ssputs_r+0x84>
 8006086:	898a      	ldrh	r2, [r1, #12]
 8006088:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800608c:	d032      	beq.n	80060f4 <__ssputs_r+0x80>
 800608e:	6825      	ldr	r5, [r4, #0]
 8006090:	6909      	ldr	r1, [r1, #16]
 8006092:	3301      	adds	r3, #1
 8006094:	eba5 0901 	sub.w	r9, r5, r1
 8006098:	6965      	ldr	r5, [r4, #20]
 800609a:	444b      	add	r3, r9
 800609c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80060a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80060a4:	106d      	asrs	r5, r5, #1
 80060a6:	429d      	cmp	r5, r3
 80060a8:	bf38      	it	cc
 80060aa:	461d      	movcc	r5, r3
 80060ac:	0553      	lsls	r3, r2, #21
 80060ae:	d531      	bpl.n	8006114 <__ssputs_r+0xa0>
 80060b0:	4629      	mov	r1, r5
 80060b2:	f7ff ff49 	bl	8005f48 <_malloc_r>
 80060b6:	4606      	mov	r6, r0
 80060b8:	b950      	cbnz	r0, 80060d0 <__ssputs_r+0x5c>
 80060ba:	230c      	movs	r3, #12
 80060bc:	f04f 30ff 	mov.w	r0, #4294967295
 80060c0:	f8ca 3000 	str.w	r3, [sl]
 80060c4:	89a3      	ldrh	r3, [r4, #12]
 80060c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060ca:	81a3      	strh	r3, [r4, #12]
 80060cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060d0:	464a      	mov	r2, r9
 80060d2:	6921      	ldr	r1, [r4, #16]
 80060d4:	f7ff fed6 	bl	8005e84 <memcpy>
 80060d8:	89a3      	ldrh	r3, [r4, #12]
 80060da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80060de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060e2:	81a3      	strh	r3, [r4, #12]
 80060e4:	6126      	str	r6, [r4, #16]
 80060e6:	444e      	add	r6, r9
 80060e8:	6026      	str	r6, [r4, #0]
 80060ea:	463e      	mov	r6, r7
 80060ec:	6165      	str	r5, [r4, #20]
 80060ee:	eba5 0509 	sub.w	r5, r5, r9
 80060f2:	60a5      	str	r5, [r4, #8]
 80060f4:	42be      	cmp	r6, r7
 80060f6:	d900      	bls.n	80060fa <__ssputs_r+0x86>
 80060f8:	463e      	mov	r6, r7
 80060fa:	4632      	mov	r2, r6
 80060fc:	4641      	mov	r1, r8
 80060fe:	6820      	ldr	r0, [r4, #0]
 8006100:	f000 faba 	bl	8006678 <memmove>
 8006104:	68a3      	ldr	r3, [r4, #8]
 8006106:	6822      	ldr	r2, [r4, #0]
 8006108:	1b9b      	subs	r3, r3, r6
 800610a:	4432      	add	r2, r6
 800610c:	2000      	movs	r0, #0
 800610e:	60a3      	str	r3, [r4, #8]
 8006110:	6022      	str	r2, [r4, #0]
 8006112:	e7db      	b.n	80060cc <__ssputs_r+0x58>
 8006114:	462a      	mov	r2, r5
 8006116:	f000 fac9 	bl	80066ac <_realloc_r>
 800611a:	4606      	mov	r6, r0
 800611c:	2800      	cmp	r0, #0
 800611e:	d1e1      	bne.n	80060e4 <__ssputs_r+0x70>
 8006120:	4650      	mov	r0, sl
 8006122:	6921      	ldr	r1, [r4, #16]
 8006124:	f7ff fec4 	bl	8005eb0 <_free_r>
 8006128:	e7c7      	b.n	80060ba <__ssputs_r+0x46>
	...

0800612c <_svfiprintf_r>:
 800612c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006130:	4698      	mov	r8, r3
 8006132:	898b      	ldrh	r3, [r1, #12]
 8006134:	4607      	mov	r7, r0
 8006136:	061b      	lsls	r3, r3, #24
 8006138:	460d      	mov	r5, r1
 800613a:	4614      	mov	r4, r2
 800613c:	b09d      	sub	sp, #116	; 0x74
 800613e:	d50e      	bpl.n	800615e <_svfiprintf_r+0x32>
 8006140:	690b      	ldr	r3, [r1, #16]
 8006142:	b963      	cbnz	r3, 800615e <_svfiprintf_r+0x32>
 8006144:	2140      	movs	r1, #64	; 0x40
 8006146:	f7ff feff 	bl	8005f48 <_malloc_r>
 800614a:	6028      	str	r0, [r5, #0]
 800614c:	6128      	str	r0, [r5, #16]
 800614e:	b920      	cbnz	r0, 800615a <_svfiprintf_r+0x2e>
 8006150:	230c      	movs	r3, #12
 8006152:	603b      	str	r3, [r7, #0]
 8006154:	f04f 30ff 	mov.w	r0, #4294967295
 8006158:	e0d1      	b.n	80062fe <_svfiprintf_r+0x1d2>
 800615a:	2340      	movs	r3, #64	; 0x40
 800615c:	616b      	str	r3, [r5, #20]
 800615e:	2300      	movs	r3, #0
 8006160:	9309      	str	r3, [sp, #36]	; 0x24
 8006162:	2320      	movs	r3, #32
 8006164:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006168:	2330      	movs	r3, #48	; 0x30
 800616a:	f04f 0901 	mov.w	r9, #1
 800616e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006172:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006318 <_svfiprintf_r+0x1ec>
 8006176:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800617a:	4623      	mov	r3, r4
 800617c:	469a      	mov	sl, r3
 800617e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006182:	b10a      	cbz	r2, 8006188 <_svfiprintf_r+0x5c>
 8006184:	2a25      	cmp	r2, #37	; 0x25
 8006186:	d1f9      	bne.n	800617c <_svfiprintf_r+0x50>
 8006188:	ebba 0b04 	subs.w	fp, sl, r4
 800618c:	d00b      	beq.n	80061a6 <_svfiprintf_r+0x7a>
 800618e:	465b      	mov	r3, fp
 8006190:	4622      	mov	r2, r4
 8006192:	4629      	mov	r1, r5
 8006194:	4638      	mov	r0, r7
 8006196:	f7ff ff6d 	bl	8006074 <__ssputs_r>
 800619a:	3001      	adds	r0, #1
 800619c:	f000 80aa 	beq.w	80062f4 <_svfiprintf_r+0x1c8>
 80061a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061a2:	445a      	add	r2, fp
 80061a4:	9209      	str	r2, [sp, #36]	; 0x24
 80061a6:	f89a 3000 	ldrb.w	r3, [sl]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	f000 80a2 	beq.w	80062f4 <_svfiprintf_r+0x1c8>
 80061b0:	2300      	movs	r3, #0
 80061b2:	f04f 32ff 	mov.w	r2, #4294967295
 80061b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061ba:	f10a 0a01 	add.w	sl, sl, #1
 80061be:	9304      	str	r3, [sp, #16]
 80061c0:	9307      	str	r3, [sp, #28]
 80061c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80061c6:	931a      	str	r3, [sp, #104]	; 0x68
 80061c8:	4654      	mov	r4, sl
 80061ca:	2205      	movs	r2, #5
 80061cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061d0:	4851      	ldr	r0, [pc, #324]	; (8006318 <_svfiprintf_r+0x1ec>)
 80061d2:	f000 fa43 	bl	800665c <memchr>
 80061d6:	9a04      	ldr	r2, [sp, #16]
 80061d8:	b9d8      	cbnz	r0, 8006212 <_svfiprintf_r+0xe6>
 80061da:	06d0      	lsls	r0, r2, #27
 80061dc:	bf44      	itt	mi
 80061de:	2320      	movmi	r3, #32
 80061e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061e4:	0711      	lsls	r1, r2, #28
 80061e6:	bf44      	itt	mi
 80061e8:	232b      	movmi	r3, #43	; 0x2b
 80061ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061ee:	f89a 3000 	ldrb.w	r3, [sl]
 80061f2:	2b2a      	cmp	r3, #42	; 0x2a
 80061f4:	d015      	beq.n	8006222 <_svfiprintf_r+0xf6>
 80061f6:	4654      	mov	r4, sl
 80061f8:	2000      	movs	r0, #0
 80061fa:	f04f 0c0a 	mov.w	ip, #10
 80061fe:	9a07      	ldr	r2, [sp, #28]
 8006200:	4621      	mov	r1, r4
 8006202:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006206:	3b30      	subs	r3, #48	; 0x30
 8006208:	2b09      	cmp	r3, #9
 800620a:	d94e      	bls.n	80062aa <_svfiprintf_r+0x17e>
 800620c:	b1b0      	cbz	r0, 800623c <_svfiprintf_r+0x110>
 800620e:	9207      	str	r2, [sp, #28]
 8006210:	e014      	b.n	800623c <_svfiprintf_r+0x110>
 8006212:	eba0 0308 	sub.w	r3, r0, r8
 8006216:	fa09 f303 	lsl.w	r3, r9, r3
 800621a:	4313      	orrs	r3, r2
 800621c:	46a2      	mov	sl, r4
 800621e:	9304      	str	r3, [sp, #16]
 8006220:	e7d2      	b.n	80061c8 <_svfiprintf_r+0x9c>
 8006222:	9b03      	ldr	r3, [sp, #12]
 8006224:	1d19      	adds	r1, r3, #4
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	9103      	str	r1, [sp, #12]
 800622a:	2b00      	cmp	r3, #0
 800622c:	bfbb      	ittet	lt
 800622e:	425b      	neglt	r3, r3
 8006230:	f042 0202 	orrlt.w	r2, r2, #2
 8006234:	9307      	strge	r3, [sp, #28]
 8006236:	9307      	strlt	r3, [sp, #28]
 8006238:	bfb8      	it	lt
 800623a:	9204      	strlt	r2, [sp, #16]
 800623c:	7823      	ldrb	r3, [r4, #0]
 800623e:	2b2e      	cmp	r3, #46	; 0x2e
 8006240:	d10c      	bne.n	800625c <_svfiprintf_r+0x130>
 8006242:	7863      	ldrb	r3, [r4, #1]
 8006244:	2b2a      	cmp	r3, #42	; 0x2a
 8006246:	d135      	bne.n	80062b4 <_svfiprintf_r+0x188>
 8006248:	9b03      	ldr	r3, [sp, #12]
 800624a:	3402      	adds	r4, #2
 800624c:	1d1a      	adds	r2, r3, #4
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	9203      	str	r2, [sp, #12]
 8006252:	2b00      	cmp	r3, #0
 8006254:	bfb8      	it	lt
 8006256:	f04f 33ff 	movlt.w	r3, #4294967295
 800625a:	9305      	str	r3, [sp, #20]
 800625c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006328 <_svfiprintf_r+0x1fc>
 8006260:	2203      	movs	r2, #3
 8006262:	4650      	mov	r0, sl
 8006264:	7821      	ldrb	r1, [r4, #0]
 8006266:	f000 f9f9 	bl	800665c <memchr>
 800626a:	b140      	cbz	r0, 800627e <_svfiprintf_r+0x152>
 800626c:	2340      	movs	r3, #64	; 0x40
 800626e:	eba0 000a 	sub.w	r0, r0, sl
 8006272:	fa03 f000 	lsl.w	r0, r3, r0
 8006276:	9b04      	ldr	r3, [sp, #16]
 8006278:	3401      	adds	r4, #1
 800627a:	4303      	orrs	r3, r0
 800627c:	9304      	str	r3, [sp, #16]
 800627e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006282:	2206      	movs	r2, #6
 8006284:	4825      	ldr	r0, [pc, #148]	; (800631c <_svfiprintf_r+0x1f0>)
 8006286:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800628a:	f000 f9e7 	bl	800665c <memchr>
 800628e:	2800      	cmp	r0, #0
 8006290:	d038      	beq.n	8006304 <_svfiprintf_r+0x1d8>
 8006292:	4b23      	ldr	r3, [pc, #140]	; (8006320 <_svfiprintf_r+0x1f4>)
 8006294:	bb1b      	cbnz	r3, 80062de <_svfiprintf_r+0x1b2>
 8006296:	9b03      	ldr	r3, [sp, #12]
 8006298:	3307      	adds	r3, #7
 800629a:	f023 0307 	bic.w	r3, r3, #7
 800629e:	3308      	adds	r3, #8
 80062a0:	9303      	str	r3, [sp, #12]
 80062a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062a4:	4433      	add	r3, r6
 80062a6:	9309      	str	r3, [sp, #36]	; 0x24
 80062a8:	e767      	b.n	800617a <_svfiprintf_r+0x4e>
 80062aa:	460c      	mov	r4, r1
 80062ac:	2001      	movs	r0, #1
 80062ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80062b2:	e7a5      	b.n	8006200 <_svfiprintf_r+0xd4>
 80062b4:	2300      	movs	r3, #0
 80062b6:	f04f 0c0a 	mov.w	ip, #10
 80062ba:	4619      	mov	r1, r3
 80062bc:	3401      	adds	r4, #1
 80062be:	9305      	str	r3, [sp, #20]
 80062c0:	4620      	mov	r0, r4
 80062c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062c6:	3a30      	subs	r2, #48	; 0x30
 80062c8:	2a09      	cmp	r2, #9
 80062ca:	d903      	bls.n	80062d4 <_svfiprintf_r+0x1a8>
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d0c5      	beq.n	800625c <_svfiprintf_r+0x130>
 80062d0:	9105      	str	r1, [sp, #20]
 80062d2:	e7c3      	b.n	800625c <_svfiprintf_r+0x130>
 80062d4:	4604      	mov	r4, r0
 80062d6:	2301      	movs	r3, #1
 80062d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80062dc:	e7f0      	b.n	80062c0 <_svfiprintf_r+0x194>
 80062de:	ab03      	add	r3, sp, #12
 80062e0:	9300      	str	r3, [sp, #0]
 80062e2:	462a      	mov	r2, r5
 80062e4:	4638      	mov	r0, r7
 80062e6:	4b0f      	ldr	r3, [pc, #60]	; (8006324 <_svfiprintf_r+0x1f8>)
 80062e8:	a904      	add	r1, sp, #16
 80062ea:	f3af 8000 	nop.w
 80062ee:	1c42      	adds	r2, r0, #1
 80062f0:	4606      	mov	r6, r0
 80062f2:	d1d6      	bne.n	80062a2 <_svfiprintf_r+0x176>
 80062f4:	89ab      	ldrh	r3, [r5, #12]
 80062f6:	065b      	lsls	r3, r3, #25
 80062f8:	f53f af2c 	bmi.w	8006154 <_svfiprintf_r+0x28>
 80062fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80062fe:	b01d      	add	sp, #116	; 0x74
 8006300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006304:	ab03      	add	r3, sp, #12
 8006306:	9300      	str	r3, [sp, #0]
 8006308:	462a      	mov	r2, r5
 800630a:	4638      	mov	r0, r7
 800630c:	4b05      	ldr	r3, [pc, #20]	; (8006324 <_svfiprintf_r+0x1f8>)
 800630e:	a904      	add	r1, sp, #16
 8006310:	f000 f87c 	bl	800640c <_printf_i>
 8006314:	e7eb      	b.n	80062ee <_svfiprintf_r+0x1c2>
 8006316:	bf00      	nop
 8006318:	08006c60 	.word	0x08006c60
 800631c:	08006c6a 	.word	0x08006c6a
 8006320:	00000000 	.word	0x00000000
 8006324:	08006075 	.word	0x08006075
 8006328:	08006c66 	.word	0x08006c66

0800632c <_printf_common>:
 800632c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006330:	4616      	mov	r6, r2
 8006332:	4699      	mov	r9, r3
 8006334:	688a      	ldr	r2, [r1, #8]
 8006336:	690b      	ldr	r3, [r1, #16]
 8006338:	4607      	mov	r7, r0
 800633a:	4293      	cmp	r3, r2
 800633c:	bfb8      	it	lt
 800633e:	4613      	movlt	r3, r2
 8006340:	6033      	str	r3, [r6, #0]
 8006342:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006346:	460c      	mov	r4, r1
 8006348:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800634c:	b10a      	cbz	r2, 8006352 <_printf_common+0x26>
 800634e:	3301      	adds	r3, #1
 8006350:	6033      	str	r3, [r6, #0]
 8006352:	6823      	ldr	r3, [r4, #0]
 8006354:	0699      	lsls	r1, r3, #26
 8006356:	bf42      	ittt	mi
 8006358:	6833      	ldrmi	r3, [r6, #0]
 800635a:	3302      	addmi	r3, #2
 800635c:	6033      	strmi	r3, [r6, #0]
 800635e:	6825      	ldr	r5, [r4, #0]
 8006360:	f015 0506 	ands.w	r5, r5, #6
 8006364:	d106      	bne.n	8006374 <_printf_common+0x48>
 8006366:	f104 0a19 	add.w	sl, r4, #25
 800636a:	68e3      	ldr	r3, [r4, #12]
 800636c:	6832      	ldr	r2, [r6, #0]
 800636e:	1a9b      	subs	r3, r3, r2
 8006370:	42ab      	cmp	r3, r5
 8006372:	dc28      	bgt.n	80063c6 <_printf_common+0x9a>
 8006374:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006378:	1e13      	subs	r3, r2, #0
 800637a:	6822      	ldr	r2, [r4, #0]
 800637c:	bf18      	it	ne
 800637e:	2301      	movne	r3, #1
 8006380:	0692      	lsls	r2, r2, #26
 8006382:	d42d      	bmi.n	80063e0 <_printf_common+0xb4>
 8006384:	4649      	mov	r1, r9
 8006386:	4638      	mov	r0, r7
 8006388:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800638c:	47c0      	blx	r8
 800638e:	3001      	adds	r0, #1
 8006390:	d020      	beq.n	80063d4 <_printf_common+0xa8>
 8006392:	6823      	ldr	r3, [r4, #0]
 8006394:	68e5      	ldr	r5, [r4, #12]
 8006396:	f003 0306 	and.w	r3, r3, #6
 800639a:	2b04      	cmp	r3, #4
 800639c:	bf18      	it	ne
 800639e:	2500      	movne	r5, #0
 80063a0:	6832      	ldr	r2, [r6, #0]
 80063a2:	f04f 0600 	mov.w	r6, #0
 80063a6:	68a3      	ldr	r3, [r4, #8]
 80063a8:	bf08      	it	eq
 80063aa:	1aad      	subeq	r5, r5, r2
 80063ac:	6922      	ldr	r2, [r4, #16]
 80063ae:	bf08      	it	eq
 80063b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063b4:	4293      	cmp	r3, r2
 80063b6:	bfc4      	itt	gt
 80063b8:	1a9b      	subgt	r3, r3, r2
 80063ba:	18ed      	addgt	r5, r5, r3
 80063bc:	341a      	adds	r4, #26
 80063be:	42b5      	cmp	r5, r6
 80063c0:	d11a      	bne.n	80063f8 <_printf_common+0xcc>
 80063c2:	2000      	movs	r0, #0
 80063c4:	e008      	b.n	80063d8 <_printf_common+0xac>
 80063c6:	2301      	movs	r3, #1
 80063c8:	4652      	mov	r2, sl
 80063ca:	4649      	mov	r1, r9
 80063cc:	4638      	mov	r0, r7
 80063ce:	47c0      	blx	r8
 80063d0:	3001      	adds	r0, #1
 80063d2:	d103      	bne.n	80063dc <_printf_common+0xb0>
 80063d4:	f04f 30ff 	mov.w	r0, #4294967295
 80063d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063dc:	3501      	adds	r5, #1
 80063de:	e7c4      	b.n	800636a <_printf_common+0x3e>
 80063e0:	2030      	movs	r0, #48	; 0x30
 80063e2:	18e1      	adds	r1, r4, r3
 80063e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80063e8:	1c5a      	adds	r2, r3, #1
 80063ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80063ee:	4422      	add	r2, r4
 80063f0:	3302      	adds	r3, #2
 80063f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80063f6:	e7c5      	b.n	8006384 <_printf_common+0x58>
 80063f8:	2301      	movs	r3, #1
 80063fa:	4622      	mov	r2, r4
 80063fc:	4649      	mov	r1, r9
 80063fe:	4638      	mov	r0, r7
 8006400:	47c0      	blx	r8
 8006402:	3001      	adds	r0, #1
 8006404:	d0e6      	beq.n	80063d4 <_printf_common+0xa8>
 8006406:	3601      	adds	r6, #1
 8006408:	e7d9      	b.n	80063be <_printf_common+0x92>
	...

0800640c <_printf_i>:
 800640c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006410:	460c      	mov	r4, r1
 8006412:	7e27      	ldrb	r7, [r4, #24]
 8006414:	4691      	mov	r9, r2
 8006416:	2f78      	cmp	r7, #120	; 0x78
 8006418:	4680      	mov	r8, r0
 800641a:	469a      	mov	sl, r3
 800641c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800641e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006422:	d807      	bhi.n	8006434 <_printf_i+0x28>
 8006424:	2f62      	cmp	r7, #98	; 0x62
 8006426:	d80a      	bhi.n	800643e <_printf_i+0x32>
 8006428:	2f00      	cmp	r7, #0
 800642a:	f000 80d9 	beq.w	80065e0 <_printf_i+0x1d4>
 800642e:	2f58      	cmp	r7, #88	; 0x58
 8006430:	f000 80a4 	beq.w	800657c <_printf_i+0x170>
 8006434:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006438:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800643c:	e03a      	b.n	80064b4 <_printf_i+0xa8>
 800643e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006442:	2b15      	cmp	r3, #21
 8006444:	d8f6      	bhi.n	8006434 <_printf_i+0x28>
 8006446:	a001      	add	r0, pc, #4	; (adr r0, 800644c <_printf_i+0x40>)
 8006448:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800644c:	080064a5 	.word	0x080064a5
 8006450:	080064b9 	.word	0x080064b9
 8006454:	08006435 	.word	0x08006435
 8006458:	08006435 	.word	0x08006435
 800645c:	08006435 	.word	0x08006435
 8006460:	08006435 	.word	0x08006435
 8006464:	080064b9 	.word	0x080064b9
 8006468:	08006435 	.word	0x08006435
 800646c:	08006435 	.word	0x08006435
 8006470:	08006435 	.word	0x08006435
 8006474:	08006435 	.word	0x08006435
 8006478:	080065c7 	.word	0x080065c7
 800647c:	080064e9 	.word	0x080064e9
 8006480:	080065a9 	.word	0x080065a9
 8006484:	08006435 	.word	0x08006435
 8006488:	08006435 	.word	0x08006435
 800648c:	080065e9 	.word	0x080065e9
 8006490:	08006435 	.word	0x08006435
 8006494:	080064e9 	.word	0x080064e9
 8006498:	08006435 	.word	0x08006435
 800649c:	08006435 	.word	0x08006435
 80064a0:	080065b1 	.word	0x080065b1
 80064a4:	680b      	ldr	r3, [r1, #0]
 80064a6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80064aa:	1d1a      	adds	r2, r3, #4
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	600a      	str	r2, [r1, #0]
 80064b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064b4:	2301      	movs	r3, #1
 80064b6:	e0a4      	b.n	8006602 <_printf_i+0x1f6>
 80064b8:	6825      	ldr	r5, [r4, #0]
 80064ba:	6808      	ldr	r0, [r1, #0]
 80064bc:	062e      	lsls	r6, r5, #24
 80064be:	f100 0304 	add.w	r3, r0, #4
 80064c2:	d50a      	bpl.n	80064da <_printf_i+0xce>
 80064c4:	6805      	ldr	r5, [r0, #0]
 80064c6:	600b      	str	r3, [r1, #0]
 80064c8:	2d00      	cmp	r5, #0
 80064ca:	da03      	bge.n	80064d4 <_printf_i+0xc8>
 80064cc:	232d      	movs	r3, #45	; 0x2d
 80064ce:	426d      	negs	r5, r5
 80064d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064d4:	230a      	movs	r3, #10
 80064d6:	485e      	ldr	r0, [pc, #376]	; (8006650 <_printf_i+0x244>)
 80064d8:	e019      	b.n	800650e <_printf_i+0x102>
 80064da:	f015 0f40 	tst.w	r5, #64	; 0x40
 80064de:	6805      	ldr	r5, [r0, #0]
 80064e0:	600b      	str	r3, [r1, #0]
 80064e2:	bf18      	it	ne
 80064e4:	b22d      	sxthne	r5, r5
 80064e6:	e7ef      	b.n	80064c8 <_printf_i+0xbc>
 80064e8:	680b      	ldr	r3, [r1, #0]
 80064ea:	6825      	ldr	r5, [r4, #0]
 80064ec:	1d18      	adds	r0, r3, #4
 80064ee:	6008      	str	r0, [r1, #0]
 80064f0:	0628      	lsls	r0, r5, #24
 80064f2:	d501      	bpl.n	80064f8 <_printf_i+0xec>
 80064f4:	681d      	ldr	r5, [r3, #0]
 80064f6:	e002      	b.n	80064fe <_printf_i+0xf2>
 80064f8:	0669      	lsls	r1, r5, #25
 80064fa:	d5fb      	bpl.n	80064f4 <_printf_i+0xe8>
 80064fc:	881d      	ldrh	r5, [r3, #0]
 80064fe:	2f6f      	cmp	r7, #111	; 0x6f
 8006500:	bf0c      	ite	eq
 8006502:	2308      	moveq	r3, #8
 8006504:	230a      	movne	r3, #10
 8006506:	4852      	ldr	r0, [pc, #328]	; (8006650 <_printf_i+0x244>)
 8006508:	2100      	movs	r1, #0
 800650a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800650e:	6866      	ldr	r6, [r4, #4]
 8006510:	2e00      	cmp	r6, #0
 8006512:	bfa8      	it	ge
 8006514:	6821      	ldrge	r1, [r4, #0]
 8006516:	60a6      	str	r6, [r4, #8]
 8006518:	bfa4      	itt	ge
 800651a:	f021 0104 	bicge.w	r1, r1, #4
 800651e:	6021      	strge	r1, [r4, #0]
 8006520:	b90d      	cbnz	r5, 8006526 <_printf_i+0x11a>
 8006522:	2e00      	cmp	r6, #0
 8006524:	d04d      	beq.n	80065c2 <_printf_i+0x1b6>
 8006526:	4616      	mov	r6, r2
 8006528:	fbb5 f1f3 	udiv	r1, r5, r3
 800652c:	fb03 5711 	mls	r7, r3, r1, r5
 8006530:	5dc7      	ldrb	r7, [r0, r7]
 8006532:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006536:	462f      	mov	r7, r5
 8006538:	42bb      	cmp	r3, r7
 800653a:	460d      	mov	r5, r1
 800653c:	d9f4      	bls.n	8006528 <_printf_i+0x11c>
 800653e:	2b08      	cmp	r3, #8
 8006540:	d10b      	bne.n	800655a <_printf_i+0x14e>
 8006542:	6823      	ldr	r3, [r4, #0]
 8006544:	07df      	lsls	r7, r3, #31
 8006546:	d508      	bpl.n	800655a <_printf_i+0x14e>
 8006548:	6923      	ldr	r3, [r4, #16]
 800654a:	6861      	ldr	r1, [r4, #4]
 800654c:	4299      	cmp	r1, r3
 800654e:	bfde      	ittt	le
 8006550:	2330      	movle	r3, #48	; 0x30
 8006552:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006556:	f106 36ff 	addle.w	r6, r6, #4294967295
 800655a:	1b92      	subs	r2, r2, r6
 800655c:	6122      	str	r2, [r4, #16]
 800655e:	464b      	mov	r3, r9
 8006560:	4621      	mov	r1, r4
 8006562:	4640      	mov	r0, r8
 8006564:	f8cd a000 	str.w	sl, [sp]
 8006568:	aa03      	add	r2, sp, #12
 800656a:	f7ff fedf 	bl	800632c <_printf_common>
 800656e:	3001      	adds	r0, #1
 8006570:	d14c      	bne.n	800660c <_printf_i+0x200>
 8006572:	f04f 30ff 	mov.w	r0, #4294967295
 8006576:	b004      	add	sp, #16
 8006578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800657c:	4834      	ldr	r0, [pc, #208]	; (8006650 <_printf_i+0x244>)
 800657e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006582:	680e      	ldr	r6, [r1, #0]
 8006584:	6823      	ldr	r3, [r4, #0]
 8006586:	f856 5b04 	ldr.w	r5, [r6], #4
 800658a:	061f      	lsls	r7, r3, #24
 800658c:	600e      	str	r6, [r1, #0]
 800658e:	d514      	bpl.n	80065ba <_printf_i+0x1ae>
 8006590:	07d9      	lsls	r1, r3, #31
 8006592:	bf44      	itt	mi
 8006594:	f043 0320 	orrmi.w	r3, r3, #32
 8006598:	6023      	strmi	r3, [r4, #0]
 800659a:	b91d      	cbnz	r5, 80065a4 <_printf_i+0x198>
 800659c:	6823      	ldr	r3, [r4, #0]
 800659e:	f023 0320 	bic.w	r3, r3, #32
 80065a2:	6023      	str	r3, [r4, #0]
 80065a4:	2310      	movs	r3, #16
 80065a6:	e7af      	b.n	8006508 <_printf_i+0xfc>
 80065a8:	6823      	ldr	r3, [r4, #0]
 80065aa:	f043 0320 	orr.w	r3, r3, #32
 80065ae:	6023      	str	r3, [r4, #0]
 80065b0:	2378      	movs	r3, #120	; 0x78
 80065b2:	4828      	ldr	r0, [pc, #160]	; (8006654 <_printf_i+0x248>)
 80065b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80065b8:	e7e3      	b.n	8006582 <_printf_i+0x176>
 80065ba:	065e      	lsls	r6, r3, #25
 80065bc:	bf48      	it	mi
 80065be:	b2ad      	uxthmi	r5, r5
 80065c0:	e7e6      	b.n	8006590 <_printf_i+0x184>
 80065c2:	4616      	mov	r6, r2
 80065c4:	e7bb      	b.n	800653e <_printf_i+0x132>
 80065c6:	680b      	ldr	r3, [r1, #0]
 80065c8:	6826      	ldr	r6, [r4, #0]
 80065ca:	1d1d      	adds	r5, r3, #4
 80065cc:	6960      	ldr	r0, [r4, #20]
 80065ce:	600d      	str	r5, [r1, #0]
 80065d0:	0635      	lsls	r5, r6, #24
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	d501      	bpl.n	80065da <_printf_i+0x1ce>
 80065d6:	6018      	str	r0, [r3, #0]
 80065d8:	e002      	b.n	80065e0 <_printf_i+0x1d4>
 80065da:	0671      	lsls	r1, r6, #25
 80065dc:	d5fb      	bpl.n	80065d6 <_printf_i+0x1ca>
 80065de:	8018      	strh	r0, [r3, #0]
 80065e0:	2300      	movs	r3, #0
 80065e2:	4616      	mov	r6, r2
 80065e4:	6123      	str	r3, [r4, #16]
 80065e6:	e7ba      	b.n	800655e <_printf_i+0x152>
 80065e8:	680b      	ldr	r3, [r1, #0]
 80065ea:	1d1a      	adds	r2, r3, #4
 80065ec:	600a      	str	r2, [r1, #0]
 80065ee:	681e      	ldr	r6, [r3, #0]
 80065f0:	2100      	movs	r1, #0
 80065f2:	4630      	mov	r0, r6
 80065f4:	6862      	ldr	r2, [r4, #4]
 80065f6:	f000 f831 	bl	800665c <memchr>
 80065fa:	b108      	cbz	r0, 8006600 <_printf_i+0x1f4>
 80065fc:	1b80      	subs	r0, r0, r6
 80065fe:	6060      	str	r0, [r4, #4]
 8006600:	6863      	ldr	r3, [r4, #4]
 8006602:	6123      	str	r3, [r4, #16]
 8006604:	2300      	movs	r3, #0
 8006606:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800660a:	e7a8      	b.n	800655e <_printf_i+0x152>
 800660c:	4632      	mov	r2, r6
 800660e:	4649      	mov	r1, r9
 8006610:	4640      	mov	r0, r8
 8006612:	6923      	ldr	r3, [r4, #16]
 8006614:	47d0      	blx	sl
 8006616:	3001      	adds	r0, #1
 8006618:	d0ab      	beq.n	8006572 <_printf_i+0x166>
 800661a:	6823      	ldr	r3, [r4, #0]
 800661c:	079b      	lsls	r3, r3, #30
 800661e:	d413      	bmi.n	8006648 <_printf_i+0x23c>
 8006620:	68e0      	ldr	r0, [r4, #12]
 8006622:	9b03      	ldr	r3, [sp, #12]
 8006624:	4298      	cmp	r0, r3
 8006626:	bfb8      	it	lt
 8006628:	4618      	movlt	r0, r3
 800662a:	e7a4      	b.n	8006576 <_printf_i+0x16a>
 800662c:	2301      	movs	r3, #1
 800662e:	4632      	mov	r2, r6
 8006630:	4649      	mov	r1, r9
 8006632:	4640      	mov	r0, r8
 8006634:	47d0      	blx	sl
 8006636:	3001      	adds	r0, #1
 8006638:	d09b      	beq.n	8006572 <_printf_i+0x166>
 800663a:	3501      	adds	r5, #1
 800663c:	68e3      	ldr	r3, [r4, #12]
 800663e:	9903      	ldr	r1, [sp, #12]
 8006640:	1a5b      	subs	r3, r3, r1
 8006642:	42ab      	cmp	r3, r5
 8006644:	dcf2      	bgt.n	800662c <_printf_i+0x220>
 8006646:	e7eb      	b.n	8006620 <_printf_i+0x214>
 8006648:	2500      	movs	r5, #0
 800664a:	f104 0619 	add.w	r6, r4, #25
 800664e:	e7f5      	b.n	800663c <_printf_i+0x230>
 8006650:	08006c71 	.word	0x08006c71
 8006654:	08006c82 	.word	0x08006c82

08006658 <__retarget_lock_acquire_recursive>:
 8006658:	4770      	bx	lr

0800665a <__retarget_lock_release_recursive>:
 800665a:	4770      	bx	lr

0800665c <memchr>:
 800665c:	4603      	mov	r3, r0
 800665e:	b510      	push	{r4, lr}
 8006660:	b2c9      	uxtb	r1, r1
 8006662:	4402      	add	r2, r0
 8006664:	4293      	cmp	r3, r2
 8006666:	4618      	mov	r0, r3
 8006668:	d101      	bne.n	800666e <memchr+0x12>
 800666a:	2000      	movs	r0, #0
 800666c:	e003      	b.n	8006676 <memchr+0x1a>
 800666e:	7804      	ldrb	r4, [r0, #0]
 8006670:	3301      	adds	r3, #1
 8006672:	428c      	cmp	r4, r1
 8006674:	d1f6      	bne.n	8006664 <memchr+0x8>
 8006676:	bd10      	pop	{r4, pc}

08006678 <memmove>:
 8006678:	4288      	cmp	r0, r1
 800667a:	b510      	push	{r4, lr}
 800667c:	eb01 0402 	add.w	r4, r1, r2
 8006680:	d902      	bls.n	8006688 <memmove+0x10>
 8006682:	4284      	cmp	r4, r0
 8006684:	4623      	mov	r3, r4
 8006686:	d807      	bhi.n	8006698 <memmove+0x20>
 8006688:	1e43      	subs	r3, r0, #1
 800668a:	42a1      	cmp	r1, r4
 800668c:	d008      	beq.n	80066a0 <memmove+0x28>
 800668e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006692:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006696:	e7f8      	b.n	800668a <memmove+0x12>
 8006698:	4601      	mov	r1, r0
 800669a:	4402      	add	r2, r0
 800669c:	428a      	cmp	r2, r1
 800669e:	d100      	bne.n	80066a2 <memmove+0x2a>
 80066a0:	bd10      	pop	{r4, pc}
 80066a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80066a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80066aa:	e7f7      	b.n	800669c <memmove+0x24>

080066ac <_realloc_r>:
 80066ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ae:	4607      	mov	r7, r0
 80066b0:	4614      	mov	r4, r2
 80066b2:	460e      	mov	r6, r1
 80066b4:	b921      	cbnz	r1, 80066c0 <_realloc_r+0x14>
 80066b6:	4611      	mov	r1, r2
 80066b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80066bc:	f7ff bc44 	b.w	8005f48 <_malloc_r>
 80066c0:	b922      	cbnz	r2, 80066cc <_realloc_r+0x20>
 80066c2:	f7ff fbf5 	bl	8005eb0 <_free_r>
 80066c6:	4625      	mov	r5, r4
 80066c8:	4628      	mov	r0, r5
 80066ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066cc:	f000 f814 	bl	80066f8 <_malloc_usable_size_r>
 80066d0:	42a0      	cmp	r0, r4
 80066d2:	d20f      	bcs.n	80066f4 <_realloc_r+0x48>
 80066d4:	4621      	mov	r1, r4
 80066d6:	4638      	mov	r0, r7
 80066d8:	f7ff fc36 	bl	8005f48 <_malloc_r>
 80066dc:	4605      	mov	r5, r0
 80066de:	2800      	cmp	r0, #0
 80066e0:	d0f2      	beq.n	80066c8 <_realloc_r+0x1c>
 80066e2:	4631      	mov	r1, r6
 80066e4:	4622      	mov	r2, r4
 80066e6:	f7ff fbcd 	bl	8005e84 <memcpy>
 80066ea:	4631      	mov	r1, r6
 80066ec:	4638      	mov	r0, r7
 80066ee:	f7ff fbdf 	bl	8005eb0 <_free_r>
 80066f2:	e7e9      	b.n	80066c8 <_realloc_r+0x1c>
 80066f4:	4635      	mov	r5, r6
 80066f6:	e7e7      	b.n	80066c8 <_realloc_r+0x1c>

080066f8 <_malloc_usable_size_r>:
 80066f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066fc:	1f18      	subs	r0, r3, #4
 80066fe:	2b00      	cmp	r3, #0
 8006700:	bfbc      	itt	lt
 8006702:	580b      	ldrlt	r3, [r1, r0]
 8006704:	18c0      	addlt	r0, r0, r3
 8006706:	4770      	bx	lr

08006708 <_init>:
 8006708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800670a:	bf00      	nop
 800670c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800670e:	bc08      	pop	{r3}
 8006710:	469e      	mov	lr, r3
 8006712:	4770      	bx	lr

08006714 <_fini>:
 8006714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006716:	bf00      	nop
 8006718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800671a:	bc08      	pop	{r3}
 800671c:	469e      	mov	lr, r3
 800671e:	4770      	bx	lr
