
ModbusSlave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d2c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  08007e3c  08007e3c  00017e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082cc  080082cc  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  080082cc  080082cc  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080082cc  080082cc  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082cc  080082cc  000182cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082d0  080082d0  000182d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080082d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a0  2000007c  08008350  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000041c  08008350  0002041c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001185f  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027e8  00000000  00000000  00031904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f68  00000000  00000000  000340f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e70  00000000  00000000  00035058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e5e  00000000  00000000  00035ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010adb  00000000  00000000  0004ed26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000911e2  00000000  00000000  0005f801  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f09e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047c0  00000000  00000000  000f0a38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	08007e24 	.word	0x08007e24

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	08007e24 	.word	0x08007e24

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2uiz>:
 80008fc:	004a      	lsls	r2, r1, #1
 80008fe:	d211      	bcs.n	8000924 <__aeabi_d2uiz+0x28>
 8000900:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000904:	d211      	bcs.n	800092a <__aeabi_d2uiz+0x2e>
 8000906:	d50d      	bpl.n	8000924 <__aeabi_d2uiz+0x28>
 8000908:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800090c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000910:	d40e      	bmi.n	8000930 <__aeabi_d2uiz+0x34>
 8000912:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000916:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800091a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091e:	fa23 f002 	lsr.w	r0, r3, r2
 8000922:	4770      	bx	lr
 8000924:	f04f 0000 	mov.w	r0, #0
 8000928:	4770      	bx	lr
 800092a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800092e:	d102      	bne.n	8000936 <__aeabi_d2uiz+0x3a>
 8000930:	f04f 30ff 	mov.w	r0, #4294967295
 8000934:	4770      	bx	lr
 8000936:	f04f 0000 	mov.w	r0, #0
 800093a:	4770      	bx	lr

0800093c <__aeabi_d2f>:
 800093c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000940:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000944:	bf24      	itt	cs
 8000946:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800094a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800094e:	d90d      	bls.n	800096c <__aeabi_d2f+0x30>
 8000950:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000954:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000958:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800095c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000960:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000964:	bf08      	it	eq
 8000966:	f020 0001 	biceq.w	r0, r0, #1
 800096a:	4770      	bx	lr
 800096c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000970:	d121      	bne.n	80009b6 <__aeabi_d2f+0x7a>
 8000972:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000976:	bfbc      	itt	lt
 8000978:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800097c:	4770      	bxlt	lr
 800097e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000982:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000986:	f1c2 0218 	rsb	r2, r2, #24
 800098a:	f1c2 0c20 	rsb	ip, r2, #32
 800098e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000992:	fa20 f002 	lsr.w	r0, r0, r2
 8000996:	bf18      	it	ne
 8000998:	f040 0001 	orrne.w	r0, r0, #1
 800099c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009a4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009a8:	ea40 000c 	orr.w	r0, r0, ip
 80009ac:	fa23 f302 	lsr.w	r3, r3, r2
 80009b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009b4:	e7cc      	b.n	8000950 <__aeabi_d2f+0x14>
 80009b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ba:	d107      	bne.n	80009cc <__aeabi_d2f+0x90>
 80009bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009c0:	bf1e      	ittt	ne
 80009c2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009c6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ca:	4770      	bxne	lr
 80009cc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__aeabi_frsub>:
 80009dc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009e0:	e002      	b.n	80009e8 <__addsf3>
 80009e2:	bf00      	nop

080009e4 <__aeabi_fsub>:
 80009e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009e8 <__addsf3>:
 80009e8:	0042      	lsls	r2, r0, #1
 80009ea:	bf1f      	itttt	ne
 80009ec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009f0:	ea92 0f03 	teqne	r2, r3
 80009f4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009f8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009fc:	d06a      	beq.n	8000ad4 <__addsf3+0xec>
 80009fe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a02:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a06:	bfc1      	itttt	gt
 8000a08:	18d2      	addgt	r2, r2, r3
 8000a0a:	4041      	eorgt	r1, r0
 8000a0c:	4048      	eorgt	r0, r1
 8000a0e:	4041      	eorgt	r1, r0
 8000a10:	bfb8      	it	lt
 8000a12:	425b      	neglt	r3, r3
 8000a14:	2b19      	cmp	r3, #25
 8000a16:	bf88      	it	hi
 8000a18:	4770      	bxhi	lr
 8000a1a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a22:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a2e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a32:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a36:	bf18      	it	ne
 8000a38:	4249      	negne	r1, r1
 8000a3a:	ea92 0f03 	teq	r2, r3
 8000a3e:	d03f      	beq.n	8000ac0 <__addsf3+0xd8>
 8000a40:	f1a2 0201 	sub.w	r2, r2, #1
 8000a44:	fa41 fc03 	asr.w	ip, r1, r3
 8000a48:	eb10 000c 	adds.w	r0, r0, ip
 8000a4c:	f1c3 0320 	rsb	r3, r3, #32
 8000a50:	fa01 f103 	lsl.w	r1, r1, r3
 8000a54:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a58:	d502      	bpl.n	8000a60 <__addsf3+0x78>
 8000a5a:	4249      	negs	r1, r1
 8000a5c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a60:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a64:	d313      	bcc.n	8000a8e <__addsf3+0xa6>
 8000a66:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a6a:	d306      	bcc.n	8000a7a <__addsf3+0x92>
 8000a6c:	0840      	lsrs	r0, r0, #1
 8000a6e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a72:	f102 0201 	add.w	r2, r2, #1
 8000a76:	2afe      	cmp	r2, #254	; 0xfe
 8000a78:	d251      	bcs.n	8000b1e <__addsf3+0x136>
 8000a7a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a82:	bf08      	it	eq
 8000a84:	f020 0001 	biceq.w	r0, r0, #1
 8000a88:	ea40 0003 	orr.w	r0, r0, r3
 8000a8c:	4770      	bx	lr
 8000a8e:	0049      	lsls	r1, r1, #1
 8000a90:	eb40 0000 	adc.w	r0, r0, r0
 8000a94:	3a01      	subs	r2, #1
 8000a96:	bf28      	it	cs
 8000a98:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a9c:	d2ed      	bcs.n	8000a7a <__addsf3+0x92>
 8000a9e:	fab0 fc80 	clz	ip, r0
 8000aa2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000aa6:	ebb2 020c 	subs.w	r2, r2, ip
 8000aaa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000aae:	bfaa      	itet	ge
 8000ab0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ab4:	4252      	neglt	r2, r2
 8000ab6:	4318      	orrge	r0, r3
 8000ab8:	bfbc      	itt	lt
 8000aba:	40d0      	lsrlt	r0, r2
 8000abc:	4318      	orrlt	r0, r3
 8000abe:	4770      	bx	lr
 8000ac0:	f092 0f00 	teq	r2, #0
 8000ac4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ac8:	bf06      	itte	eq
 8000aca:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ace:	3201      	addeq	r2, #1
 8000ad0:	3b01      	subne	r3, #1
 8000ad2:	e7b5      	b.n	8000a40 <__addsf3+0x58>
 8000ad4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ad8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000adc:	bf18      	it	ne
 8000ade:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae2:	d021      	beq.n	8000b28 <__addsf3+0x140>
 8000ae4:	ea92 0f03 	teq	r2, r3
 8000ae8:	d004      	beq.n	8000af4 <__addsf3+0x10c>
 8000aea:	f092 0f00 	teq	r2, #0
 8000aee:	bf08      	it	eq
 8000af0:	4608      	moveq	r0, r1
 8000af2:	4770      	bx	lr
 8000af4:	ea90 0f01 	teq	r0, r1
 8000af8:	bf1c      	itt	ne
 8000afa:	2000      	movne	r0, #0
 8000afc:	4770      	bxne	lr
 8000afe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b02:	d104      	bne.n	8000b0e <__addsf3+0x126>
 8000b04:	0040      	lsls	r0, r0, #1
 8000b06:	bf28      	it	cs
 8000b08:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b0c:	4770      	bx	lr
 8000b0e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b12:	bf3c      	itt	cc
 8000b14:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b18:	4770      	bxcc	lr
 8000b1a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b1e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b26:	4770      	bx	lr
 8000b28:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b2c:	bf16      	itet	ne
 8000b2e:	4608      	movne	r0, r1
 8000b30:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b34:	4601      	movne	r1, r0
 8000b36:	0242      	lsls	r2, r0, #9
 8000b38:	bf06      	itte	eq
 8000b3a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b3e:	ea90 0f01 	teqeq	r0, r1
 8000b42:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_ui2f>:
 8000b48:	f04f 0300 	mov.w	r3, #0
 8000b4c:	e004      	b.n	8000b58 <__aeabi_i2f+0x8>
 8000b4e:	bf00      	nop

08000b50 <__aeabi_i2f>:
 8000b50:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b54:	bf48      	it	mi
 8000b56:	4240      	negmi	r0, r0
 8000b58:	ea5f 0c00 	movs.w	ip, r0
 8000b5c:	bf08      	it	eq
 8000b5e:	4770      	bxeq	lr
 8000b60:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b64:	4601      	mov	r1, r0
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	e01c      	b.n	8000ba6 <__aeabi_l2f+0x2a>

08000b6c <__aeabi_ul2f>:
 8000b6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b70:	bf08      	it	eq
 8000b72:	4770      	bxeq	lr
 8000b74:	f04f 0300 	mov.w	r3, #0
 8000b78:	e00a      	b.n	8000b90 <__aeabi_l2f+0x14>
 8000b7a:	bf00      	nop

08000b7c <__aeabi_l2f>:
 8000b7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b80:	bf08      	it	eq
 8000b82:	4770      	bxeq	lr
 8000b84:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b88:	d502      	bpl.n	8000b90 <__aeabi_l2f+0x14>
 8000b8a:	4240      	negs	r0, r0
 8000b8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b90:	ea5f 0c01 	movs.w	ip, r1
 8000b94:	bf02      	ittt	eq
 8000b96:	4684      	moveq	ip, r0
 8000b98:	4601      	moveq	r1, r0
 8000b9a:	2000      	moveq	r0, #0
 8000b9c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ba6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000baa:	fabc f28c 	clz	r2, ip
 8000bae:	3a08      	subs	r2, #8
 8000bb0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bb4:	db10      	blt.n	8000bd8 <__aeabi_l2f+0x5c>
 8000bb6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bba:	4463      	add	r3, ip
 8000bbc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bc0:	f1c2 0220 	rsb	r2, r2, #32
 8000bc4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bc8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bcc:	eb43 0002 	adc.w	r0, r3, r2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f102 0220 	add.w	r2, r2, #32
 8000bdc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000be0:	f1c2 0220 	rsb	r2, r2, #32
 8000be4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000be8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bec:	eb43 0002 	adc.w	r0, r3, r2
 8000bf0:	bf08      	it	eq
 8000bf2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_fmul>:
 8000bf8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bfc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c00:	bf1e      	ittt	ne
 8000c02:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c06:	ea92 0f0c 	teqne	r2, ip
 8000c0a:	ea93 0f0c 	teqne	r3, ip
 8000c0e:	d06f      	beq.n	8000cf0 <__aeabi_fmul+0xf8>
 8000c10:	441a      	add	r2, r3
 8000c12:	ea80 0c01 	eor.w	ip, r0, r1
 8000c16:	0240      	lsls	r0, r0, #9
 8000c18:	bf18      	it	ne
 8000c1a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c1e:	d01e      	beq.n	8000c5e <__aeabi_fmul+0x66>
 8000c20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c24:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c28:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c2c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c30:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c34:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c38:	bf3e      	ittt	cc
 8000c3a:	0049      	lslcc	r1, r1, #1
 8000c3c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c40:	005b      	lslcc	r3, r3, #1
 8000c42:	ea40 0001 	orr.w	r0, r0, r1
 8000c46:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c4a:	2afd      	cmp	r2, #253	; 0xfd
 8000c4c:	d81d      	bhi.n	8000c8a <__aeabi_fmul+0x92>
 8000c4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c56:	bf08      	it	eq
 8000c58:	f020 0001 	biceq.w	r0, r0, #1
 8000c5c:	4770      	bx	lr
 8000c5e:	f090 0f00 	teq	r0, #0
 8000c62:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c66:	bf08      	it	eq
 8000c68:	0249      	lsleq	r1, r1, #9
 8000c6a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c6e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c72:	3a7f      	subs	r2, #127	; 0x7f
 8000c74:	bfc2      	ittt	gt
 8000c76:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c7a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c7e:	4770      	bxgt	lr
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	3a01      	subs	r2, #1
 8000c8a:	dc5d      	bgt.n	8000d48 <__aeabi_fmul+0x150>
 8000c8c:	f112 0f19 	cmn.w	r2, #25
 8000c90:	bfdc      	itt	le
 8000c92:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c96:	4770      	bxle	lr
 8000c98:	f1c2 0200 	rsb	r2, r2, #0
 8000c9c:	0041      	lsls	r1, r0, #1
 8000c9e:	fa21 f102 	lsr.w	r1, r1, r2
 8000ca2:	f1c2 0220 	rsb	r2, r2, #32
 8000ca6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000caa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cae:	f140 0000 	adc.w	r0, r0, #0
 8000cb2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cb6:	bf08      	it	eq
 8000cb8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cbc:	4770      	bx	lr
 8000cbe:	f092 0f00 	teq	r2, #0
 8000cc2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000cc6:	bf02      	ittt	eq
 8000cc8:	0040      	lsleq	r0, r0, #1
 8000cca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cce:	3a01      	subeq	r2, #1
 8000cd0:	d0f9      	beq.n	8000cc6 <__aeabi_fmul+0xce>
 8000cd2:	ea40 000c 	orr.w	r0, r0, ip
 8000cd6:	f093 0f00 	teq	r3, #0
 8000cda:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cde:	bf02      	ittt	eq
 8000ce0:	0049      	lsleq	r1, r1, #1
 8000ce2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ce6:	3b01      	subeq	r3, #1
 8000ce8:	d0f9      	beq.n	8000cde <__aeabi_fmul+0xe6>
 8000cea:	ea41 010c 	orr.w	r1, r1, ip
 8000cee:	e78f      	b.n	8000c10 <__aeabi_fmul+0x18>
 8000cf0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cf4:	ea92 0f0c 	teq	r2, ip
 8000cf8:	bf18      	it	ne
 8000cfa:	ea93 0f0c 	teqne	r3, ip
 8000cfe:	d00a      	beq.n	8000d16 <__aeabi_fmul+0x11e>
 8000d00:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d04:	bf18      	it	ne
 8000d06:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d0a:	d1d8      	bne.n	8000cbe <__aeabi_fmul+0xc6>
 8000d0c:	ea80 0001 	eor.w	r0, r0, r1
 8000d10:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d14:	4770      	bx	lr
 8000d16:	f090 0f00 	teq	r0, #0
 8000d1a:	bf17      	itett	ne
 8000d1c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d20:	4608      	moveq	r0, r1
 8000d22:	f091 0f00 	teqne	r1, #0
 8000d26:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d2a:	d014      	beq.n	8000d56 <__aeabi_fmul+0x15e>
 8000d2c:	ea92 0f0c 	teq	r2, ip
 8000d30:	d101      	bne.n	8000d36 <__aeabi_fmul+0x13e>
 8000d32:	0242      	lsls	r2, r0, #9
 8000d34:	d10f      	bne.n	8000d56 <__aeabi_fmul+0x15e>
 8000d36:	ea93 0f0c 	teq	r3, ip
 8000d3a:	d103      	bne.n	8000d44 <__aeabi_fmul+0x14c>
 8000d3c:	024b      	lsls	r3, r1, #9
 8000d3e:	bf18      	it	ne
 8000d40:	4608      	movne	r0, r1
 8000d42:	d108      	bne.n	8000d56 <__aeabi_fmul+0x15e>
 8000d44:	ea80 0001 	eor.w	r0, r0, r1
 8000d48:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d54:	4770      	bx	lr
 8000d56:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d5a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d5e:	4770      	bx	lr

08000d60 <__aeabi_fdiv>:
 8000d60:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d64:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d68:	bf1e      	ittt	ne
 8000d6a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d6e:	ea92 0f0c 	teqne	r2, ip
 8000d72:	ea93 0f0c 	teqne	r3, ip
 8000d76:	d069      	beq.n	8000e4c <__aeabi_fdiv+0xec>
 8000d78:	eba2 0203 	sub.w	r2, r2, r3
 8000d7c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d80:	0249      	lsls	r1, r1, #9
 8000d82:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d86:	d037      	beq.n	8000df8 <__aeabi_fdiv+0x98>
 8000d88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d8c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d90:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	bf38      	it	cc
 8000d9c:	005b      	lslcc	r3, r3, #1
 8000d9e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000da2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000da6:	428b      	cmp	r3, r1
 8000da8:	bf24      	itt	cs
 8000daa:	1a5b      	subcs	r3, r3, r1
 8000dac:	ea40 000c 	orrcs.w	r0, r0, ip
 8000db0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000db4:	bf24      	itt	cs
 8000db6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000dba:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dbe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000dc2:	bf24      	itt	cs
 8000dc4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000dc8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dcc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000dd0:	bf24      	itt	cs
 8000dd2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dd6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dda:	011b      	lsls	r3, r3, #4
 8000ddc:	bf18      	it	ne
 8000dde:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000de2:	d1e0      	bne.n	8000da6 <__aeabi_fdiv+0x46>
 8000de4:	2afd      	cmp	r2, #253	; 0xfd
 8000de6:	f63f af50 	bhi.w	8000c8a <__aeabi_fmul+0x92>
 8000dea:	428b      	cmp	r3, r1
 8000dec:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df0:	bf08      	it	eq
 8000df2:	f020 0001 	biceq.w	r0, r0, #1
 8000df6:	4770      	bx	lr
 8000df8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dfc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e00:	327f      	adds	r2, #127	; 0x7f
 8000e02:	bfc2      	ittt	gt
 8000e04:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e08:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0c:	4770      	bxgt	lr
 8000e0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e12:	f04f 0300 	mov.w	r3, #0
 8000e16:	3a01      	subs	r2, #1
 8000e18:	e737      	b.n	8000c8a <__aeabi_fmul+0x92>
 8000e1a:	f092 0f00 	teq	r2, #0
 8000e1e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e22:	bf02      	ittt	eq
 8000e24:	0040      	lsleq	r0, r0, #1
 8000e26:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e2a:	3a01      	subeq	r2, #1
 8000e2c:	d0f9      	beq.n	8000e22 <__aeabi_fdiv+0xc2>
 8000e2e:	ea40 000c 	orr.w	r0, r0, ip
 8000e32:	f093 0f00 	teq	r3, #0
 8000e36:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e3a:	bf02      	ittt	eq
 8000e3c:	0049      	lsleq	r1, r1, #1
 8000e3e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e42:	3b01      	subeq	r3, #1
 8000e44:	d0f9      	beq.n	8000e3a <__aeabi_fdiv+0xda>
 8000e46:	ea41 010c 	orr.w	r1, r1, ip
 8000e4a:	e795      	b.n	8000d78 <__aeabi_fdiv+0x18>
 8000e4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e50:	ea92 0f0c 	teq	r2, ip
 8000e54:	d108      	bne.n	8000e68 <__aeabi_fdiv+0x108>
 8000e56:	0242      	lsls	r2, r0, #9
 8000e58:	f47f af7d 	bne.w	8000d56 <__aeabi_fmul+0x15e>
 8000e5c:	ea93 0f0c 	teq	r3, ip
 8000e60:	f47f af70 	bne.w	8000d44 <__aeabi_fmul+0x14c>
 8000e64:	4608      	mov	r0, r1
 8000e66:	e776      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e68:	ea93 0f0c 	teq	r3, ip
 8000e6c:	d104      	bne.n	8000e78 <__aeabi_fdiv+0x118>
 8000e6e:	024b      	lsls	r3, r1, #9
 8000e70:	f43f af4c 	beq.w	8000d0c <__aeabi_fmul+0x114>
 8000e74:	4608      	mov	r0, r1
 8000e76:	e76e      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e78:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e7c:	bf18      	it	ne
 8000e7e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e82:	d1ca      	bne.n	8000e1a <__aeabi_fdiv+0xba>
 8000e84:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e88:	f47f af5c 	bne.w	8000d44 <__aeabi_fmul+0x14c>
 8000e8c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e90:	f47f af3c 	bne.w	8000d0c <__aeabi_fmul+0x114>
 8000e94:	e75f      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e96:	bf00      	nop

08000e98 <__gesf2>:
 8000e98:	f04f 3cff 	mov.w	ip, #4294967295
 8000e9c:	e006      	b.n	8000eac <__cmpsf2+0x4>
 8000e9e:	bf00      	nop

08000ea0 <__lesf2>:
 8000ea0:	f04f 0c01 	mov.w	ip, #1
 8000ea4:	e002      	b.n	8000eac <__cmpsf2+0x4>
 8000ea6:	bf00      	nop

08000ea8 <__cmpsf2>:
 8000ea8:	f04f 0c01 	mov.w	ip, #1
 8000eac:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000eb0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000eb4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000eb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ebc:	bf18      	it	ne
 8000ebe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ec2:	d011      	beq.n	8000ee8 <__cmpsf2+0x40>
 8000ec4:	b001      	add	sp, #4
 8000ec6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000eca:	bf18      	it	ne
 8000ecc:	ea90 0f01 	teqne	r0, r1
 8000ed0:	bf58      	it	pl
 8000ed2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ed6:	bf88      	it	hi
 8000ed8:	17c8      	asrhi	r0, r1, #31
 8000eda:	bf38      	it	cc
 8000edc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ee0:	bf18      	it	ne
 8000ee2:	f040 0001 	orrne.w	r0, r0, #1
 8000ee6:	4770      	bx	lr
 8000ee8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eec:	d102      	bne.n	8000ef4 <__cmpsf2+0x4c>
 8000eee:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ef2:	d105      	bne.n	8000f00 <__cmpsf2+0x58>
 8000ef4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ef8:	d1e4      	bne.n	8000ec4 <__cmpsf2+0x1c>
 8000efa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000efe:	d0e1      	beq.n	8000ec4 <__cmpsf2+0x1c>
 8000f00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <__aeabi_cfrcmple>:
 8000f08:	4684      	mov	ip, r0
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	4661      	mov	r1, ip
 8000f0e:	e7ff      	b.n	8000f10 <__aeabi_cfcmpeq>

08000f10 <__aeabi_cfcmpeq>:
 8000f10:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f12:	f7ff ffc9 	bl	8000ea8 <__cmpsf2>
 8000f16:	2800      	cmp	r0, #0
 8000f18:	bf48      	it	mi
 8000f1a:	f110 0f00 	cmnmi.w	r0, #0
 8000f1e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f20 <__aeabi_fcmpeq>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff fff4 	bl	8000f10 <__aeabi_cfcmpeq>
 8000f28:	bf0c      	ite	eq
 8000f2a:	2001      	moveq	r0, #1
 8000f2c:	2000      	movne	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_fcmplt>:
 8000f34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f38:	f7ff ffea 	bl	8000f10 <__aeabi_cfcmpeq>
 8000f3c:	bf34      	ite	cc
 8000f3e:	2001      	movcc	r0, #1
 8000f40:	2000      	movcs	r0, #0
 8000f42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f46:	bf00      	nop

08000f48 <__aeabi_fcmple>:
 8000f48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f4c:	f7ff ffe0 	bl	8000f10 <__aeabi_cfcmpeq>
 8000f50:	bf94      	ite	ls
 8000f52:	2001      	movls	r0, #1
 8000f54:	2000      	movhi	r0, #0
 8000f56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5a:	bf00      	nop

08000f5c <__aeabi_fcmpge>:
 8000f5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f60:	f7ff ffd2 	bl	8000f08 <__aeabi_cfrcmple>
 8000f64:	bf94      	ite	ls
 8000f66:	2001      	movls	r0, #1
 8000f68:	2000      	movhi	r0, #0
 8000f6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f6e:	bf00      	nop

08000f70 <__aeabi_fcmpgt>:
 8000f70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f74:	f7ff ffc8 	bl	8000f08 <__aeabi_cfrcmple>
 8000f78:	bf34      	ite	cc
 8000f7a:	2001      	movcc	r0, #1
 8000f7c:	2000      	movcs	r0, #0
 8000f7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f82:	bf00      	nop

08000f84 <__aeabi_fcmpun>:
 8000f84:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f88:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f90:	d102      	bne.n	8000f98 <__aeabi_fcmpun+0x14>
 8000f92:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f96:	d108      	bne.n	8000faa <__aeabi_fcmpun+0x26>
 8000f98:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f9c:	d102      	bne.n	8000fa4 <__aeabi_fcmpun+0x20>
 8000f9e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fa2:	d102      	bne.n	8000faa <__aeabi_fcmpun+0x26>
 8000fa4:	f04f 0000 	mov.w	r0, #0
 8000fa8:	4770      	bx	lr
 8000faa:	f04f 0001 	mov.w	r0, #1
 8000fae:	4770      	bx	lr

08000fb0 <__aeabi_f2uiz>:
 8000fb0:	0042      	lsls	r2, r0, #1
 8000fb2:	d20e      	bcs.n	8000fd2 <__aeabi_f2uiz+0x22>
 8000fb4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fb8:	d30b      	bcc.n	8000fd2 <__aeabi_f2uiz+0x22>
 8000fba:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fbe:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fc2:	d409      	bmi.n	8000fd8 <__aeabi_f2uiz+0x28>
 8000fc4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fcc:	fa23 f002 	lsr.w	r0, r3, r2
 8000fd0:	4770      	bx	lr
 8000fd2:	f04f 0000 	mov.w	r0, #0
 8000fd6:	4770      	bx	lr
 8000fd8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fdc:	d101      	bne.n	8000fe2 <__aeabi_f2uiz+0x32>
 8000fde:	0242      	lsls	r2, r0, #9
 8000fe0:	d102      	bne.n	8000fe8 <__aeabi_f2uiz+0x38>
 8000fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe6:	4770      	bx	lr
 8000fe8:	f04f 0000 	mov.w	r0, #0
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <printMsg>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void printMsg( char *msg,...)
{
 8000ff0:	b40f      	push	{r0, r1, r2, r3}
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b09c      	sub	sp, #112	; 0x70
 8000ff6:	af00      	add	r7, sp, #0
	char buffer[100];

	va_list args;
	va_start(args, msg);
 8000ff8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000ffc:	607b      	str	r3, [r7, #4]
	vsprintf(buffer, msg, args);
 8000ffe:	f107 0308 	add.w	r3, r7, #8
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001006:	4618      	mov	r0, r3
 8001008:	f006 fa54 	bl	80074b4 <vsiprintf>


	for(int j=0; j< strlen(buffer); j++)
 800100c:	2300      	movs	r3, #0
 800100e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001010:	e010      	b.n	8001034 <printMsg+0x44>
	{
		USART1->DR = buffer[j];
 8001012:	f107 0208 	add.w	r2, r7, #8
 8001016:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001018:	4413      	add	r3, r2
 800101a:	781a      	ldrb	r2, [r3, #0]
 800101c:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <printMsg+0x68>)
 800101e:	605a      	str	r2, [r3, #4]
		while(!(USART1->SR & USART_SR_TXE));
 8001020:	bf00      	nop
 8001022:	4b0d      	ldr	r3, [pc, #52]	; (8001058 <printMsg+0x68>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800102a:	2b00      	cmp	r3, #0
 800102c:	d0f9      	beq.n	8001022 <printMsg+0x32>
	for(int j=0; j< strlen(buffer); j++)
 800102e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001030:	3301      	adds	r3, #1
 8001032:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001034:	f107 0308 	add.w	r3, r7, #8
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff f889 	bl	8000150 <strlen>
 800103e:	4602      	mov	r2, r0
 8001040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001042:	429a      	cmp	r2, r3
 8001044:	d8e5      	bhi.n	8001012 <printMsg+0x22>
	}
}
 8001046:	bf00      	nop
 8001048:	bf00      	nop
 800104a:	3770      	adds	r7, #112	; 0x70
 800104c:	46bd      	mov	sp, r7
 800104e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001052:	b004      	add	sp, #16
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	40013800 	.word	0x40013800

0800105c <SelectADCChannel>:

void SelectADCChannel(uint32_t channel)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
	 ADC_ChannelConfTypeDef sConfig = {0};
 8001064:	f107 030c 	add.w	r3, r7, #12
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]

	  //Configure Regular Channel

	  sConfig.Channel = channel;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	60fb      	str	r3, [r7, #12]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001074:	2301      	movs	r3, #1
 8001076:	613b      	str	r3, [r7, #16]
	  sConfig.SamplingTime = ADC_CONVERSIONCLOCKCYCLES_SAMPLETIME_239CYCLES5;
 8001078:	23fc      	movs	r3, #252	; 0xfc
 800107a:	617b      	str	r3, [r7, #20]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	4619      	mov	r1, r3
 8001082:	4806      	ldr	r0, [pc, #24]	; (800109c <SelectADCChannel+0x40>)
 8001084:	f001 fa4e 	bl	8002524 <HAL_ADC_ConfigChannel>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <SelectADCChannel+0x36>
	  {
	    Error_Handler();
 800108e:	f000 fc43 	bl	8001918 <Error_Handler>
	  }

}
 8001092:	bf00      	nop
 8001094:	3718      	adds	r7, #24
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	2000034c 	.word	0x2000034c

080010a0 <GPIOMapping>:

void GPIOMapping()
{
 80010a0:	b598      	push	{r3, r4, r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	// DI1
	if(HAL_GPIO_ReadPin(DI1_GPIO_Port, DI1_Pin))
 80010a4:	2120      	movs	r1, #32
 80010a6:	4870      	ldr	r0, [pc, #448]	; (8001268 <GPIOMapping+0x1c8>)
 80010a8:	f002 f8ac 	bl	8003204 <HAL_GPIO_ReadPin>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d005      	beq.n	80010be <GPIOMapping+0x1e>
	{
		*(MBSlave.CoilsData.CoilsArray) = 1;
 80010b2:	4b6e      	ldr	r3, [pc, #440]	; (800126c <GPIOMapping+0x1cc>)
 80010b4:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 80010b8:	2201      	movs	r2, #1
 80010ba:	701a      	strb	r2, [r3, #0]
 80010bc:	e004      	b.n	80010c8 <GPIOMapping+0x28>
	}
	else
	{
		*(MBSlave.CoilsData.CoilsArray) = 0;
 80010be:	4b6b      	ldr	r3, [pc, #428]	; (800126c <GPIOMapping+0x1cc>)
 80010c0:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 80010c4:	2200      	movs	r2, #0
 80010c6:	701a      	strb	r2, [r3, #0]
	}

	// DI2
	if(HAL_GPIO_ReadPin(DI2_GPIO_Port, DI2_Pin))
 80010c8:	2140      	movs	r1, #64	; 0x40
 80010ca:	4867      	ldr	r0, [pc, #412]	; (8001268 <GPIOMapping+0x1c8>)
 80010cc:	f002 f89a 	bl	8003204 <HAL_GPIO_ReadPin>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d006      	beq.n	80010e4 <GPIOMapping+0x44>
	{
		*(MBSlave.CoilsData.CoilsArray + 1) = 1;
 80010d6:	4b65      	ldr	r3, [pc, #404]	; (800126c <GPIOMapping+0x1cc>)
 80010d8:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 80010dc:	3301      	adds	r3, #1
 80010de:	2201      	movs	r2, #1
 80010e0:	701a      	strb	r2, [r3, #0]
 80010e2:	e005      	b.n	80010f0 <GPIOMapping+0x50>
	}
	else
	{
		*(MBSlave.CoilsData.CoilsArray + 1) = 0;
 80010e4:	4b61      	ldr	r3, [pc, #388]	; (800126c <GPIOMapping+0x1cc>)
 80010e6:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 80010ea:	3301      	adds	r3, #1
 80010ec:	2200      	movs	r2, #0
 80010ee:	701a      	strb	r2, [r3, #0]
	}

	// AI1
	SelectADCChannel(ADC_CHANNEL_0);
 80010f0:	2000      	movs	r0, #0
 80010f2:	f7ff ffb3 	bl	800105c <SelectADCChannel>
	HAL_ADC_Start(&hadc1);
 80010f6:	485e      	ldr	r0, [pc, #376]	; (8001270 <GPIOMapping+0x1d0>)
 80010f8:	f001 f828 	bl	800214c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 300);
 80010fc:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001100:	485b      	ldr	r0, [pc, #364]	; (8001270 <GPIOMapping+0x1d0>)
 8001102:	f001 f8fd 	bl	8002300 <HAL_ADC_PollForConversion>
	*(MBSlave.RegistersData.RegistersArray) = (uint16_t)(ntc_convertToC(HAL_ADC_GetValue(&hadc1))*100);
 8001106:	485a      	ldr	r0, [pc, #360]	; (8001270 <GPIOMapping+0x1d0>)
 8001108:	f001 fa00 	bl	800250c <HAL_ADC_GetValue>
 800110c:	4603      	mov	r3, r0
 800110e:	4618      	mov	r0, r3
 8001110:	f006 f878 	bl	8007204 <ntc_convertToC>
 8001114:	4603      	mov	r3, r0
 8001116:	4957      	ldr	r1, [pc, #348]	; (8001274 <GPIOMapping+0x1d4>)
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff fd6d 	bl	8000bf8 <__aeabi_fmul>
 800111e:	4603      	mov	r3, r0
 8001120:	461a      	mov	r2, r3
 8001122:	4b52      	ldr	r3, [pc, #328]	; (800126c <GPIOMapping+0x1cc>)
 8001124:	f8d3 41bc 	ldr.w	r4, [r3, #444]	; 0x1bc
 8001128:	4610      	mov	r0, r2
 800112a:	f7ff ff41 	bl	8000fb0 <__aeabi_f2uiz>
 800112e:	4603      	mov	r3, r0
 8001130:	b29b      	uxth	r3, r3
 8001132:	8023      	strh	r3, [r4, #0]
	HAL_ADC_Stop(&hadc1);
 8001134:	484e      	ldr	r0, [pc, #312]	; (8001270 <GPIOMapping+0x1d0>)
 8001136:	f001 f8b7 	bl	80022a8 <HAL_ADC_Stop>

	//HAL_ADC_Start_DMA(&hadc1,(tempAnalogValue) ,1);

	// AI1
	SelectADCChannel(ADC_CHANNEL_TEMPSENSOR);
 800113a:	2010      	movs	r0, #16
 800113c:	f7ff ff8e 	bl	800105c <SelectADCChannel>
	HAL_ADC_Start(&hadc1);
 8001140:	484b      	ldr	r0, [pc, #300]	; (8001270 <GPIOMapping+0x1d0>)
 8001142:	f001 f803 	bl	800214c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 300);
 8001146:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800114a:	4849      	ldr	r0, [pc, #292]	; (8001270 <GPIOMapping+0x1d0>)
 800114c:	f001 f8d8 	bl	8002300 <HAL_ADC_PollForConversion>
	*(MBSlave.RegistersData.RegistersArray +1) = (uint16_t)(((1.43-(HAL_ADC_GetValue(&hadc1)*(3.3/4096)))/0.0043+25)*100);
 8001150:	4847      	ldr	r0, [pc, #284]	; (8001270 <GPIOMapping+0x1d0>)
 8001152:	f001 f9db 	bl	800250c <HAL_ADC_GetValue>
 8001156:	4603      	mov	r3, r0
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff f943 	bl	80003e4 <__aeabi_ui2d>
 800115e:	a33c      	add	r3, pc, #240	; (adr r3, 8001250 <GPIOMapping+0x1b0>)
 8001160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001164:	f7ff f9b8 	bl	80004d8 <__aeabi_dmul>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	a13a      	add	r1, pc, #232	; (adr r1, 8001258 <GPIOMapping+0x1b8>)
 800116e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001172:	f7fe fff9 	bl	8000168 <__aeabi_dsub>
 8001176:	4602      	mov	r2, r0
 8001178:	460b      	mov	r3, r1
 800117a:	4610      	mov	r0, r2
 800117c:	4619      	mov	r1, r3
 800117e:	a338      	add	r3, pc, #224	; (adr r3, 8001260 <GPIOMapping+0x1c0>)
 8001180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001184:	f7ff fad2 	bl	800072c <__aeabi_ddiv>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	4610      	mov	r0, r2
 800118e:	4619      	mov	r1, r3
 8001190:	f04f 0200 	mov.w	r2, #0
 8001194:	4b38      	ldr	r3, [pc, #224]	; (8001278 <GPIOMapping+0x1d8>)
 8001196:	f7fe ffe9 	bl	800016c <__adddf3>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	4610      	mov	r0, r2
 80011a0:	4619      	mov	r1, r3
 80011a2:	f04f 0200 	mov.w	r2, #0
 80011a6:	4b35      	ldr	r3, [pc, #212]	; (800127c <GPIOMapping+0x1dc>)
 80011a8:	f7ff f996 	bl	80004d8 <__aeabi_dmul>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4610      	mov	r0, r2
 80011b2:	4619      	mov	r1, r3
 80011b4:	4b2d      	ldr	r3, [pc, #180]	; (800126c <GPIOMapping+0x1cc>)
 80011b6:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 80011ba:	1c9c      	adds	r4, r3, #2
 80011bc:	f7ff fb9e 	bl	80008fc <__aeabi_d2uiz>
 80011c0:	4603      	mov	r3, r0
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	8023      	strh	r3, [r4, #0]
	//HAL_ADC_Start_DMA(&hadc1,(tempAnalogValue) ,1);



	//DO1
	if((*(MBSlave.CoilsData.CoilsArray + 2))==0)
 80011c6:	4b29      	ldr	r3, [pc, #164]	; (800126c <GPIOMapping+0x1cc>)
 80011c8:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 80011cc:	3302      	adds	r3, #2
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d105      	bne.n	80011e0 <GPIOMapping+0x140>
	{
		HAL_GPIO_WritePin(DO1_GPIO_Port, DO1_Pin, GPIO_PIN_RESET);
 80011d4:	2200      	movs	r2, #0
 80011d6:	2108      	movs	r1, #8
 80011d8:	4829      	ldr	r0, [pc, #164]	; (8001280 <GPIOMapping+0x1e0>)
 80011da:	f002 f82a 	bl	8003232 <HAL_GPIO_WritePin>
 80011de:	e004      	b.n	80011ea <GPIOMapping+0x14a>
	}
	else
	{
		HAL_GPIO_WritePin(DO1_GPIO_Port, DO1_Pin, GPIO_PIN_SET);
 80011e0:	2201      	movs	r2, #1
 80011e2:	2108      	movs	r1, #8
 80011e4:	4826      	ldr	r0, [pc, #152]	; (8001280 <GPIOMapping+0x1e0>)
 80011e6:	f002 f824 	bl	8003232 <HAL_GPIO_WritePin>
	}

	//DO2
	if((*(MBSlave.CoilsData.CoilsArray + 3))==0)
 80011ea:	4b20      	ldr	r3, [pc, #128]	; (800126c <GPIOMapping+0x1cc>)
 80011ec:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 80011f0:	3303      	adds	r3, #3
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d105      	bne.n	8001204 <GPIOMapping+0x164>
	{
		HAL_GPIO_WritePin(DO2_GPIO_Port, DO2_Pin, GPIO_PIN_RESET);
 80011f8:	2200      	movs	r2, #0
 80011fa:	2110      	movs	r1, #16
 80011fc:	4820      	ldr	r0, [pc, #128]	; (8001280 <GPIOMapping+0x1e0>)
 80011fe:	f002 f818 	bl	8003232 <HAL_GPIO_WritePin>
 8001202:	e004      	b.n	800120e <GPIOMapping+0x16e>
	}
	else
	{
		HAL_GPIO_WritePin(DO2_GPIO_Port, DO2_Pin, GPIO_PIN_SET);
 8001204:	2201      	movs	r2, #1
 8001206:	2110      	movs	r1, #16
 8001208:	481d      	ldr	r0, [pc, #116]	; (8001280 <GPIOMapping+0x1e0>)
 800120a:	f002 f812 	bl	8003232 <HAL_GPIO_WritePin>
	}

	//DO3
	if((*(MBSlave.CoilsData.CoilsArray + 4))==0)
 800120e:	4b17      	ldr	r3, [pc, #92]	; (800126c <GPIOMapping+0x1cc>)
 8001210:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8001214:	3304      	adds	r3, #4
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d105      	bne.n	8001228 <GPIOMapping+0x188>
	{
		HAL_GPIO_WritePin(DO3_GPIO_Port, DO3_Pin, GPIO_PIN_RESET);
 800121c:	2200      	movs	r2, #0
 800121e:	2120      	movs	r1, #32
 8001220:	4817      	ldr	r0, [pc, #92]	; (8001280 <GPIOMapping+0x1e0>)
 8001222:	f002 f806 	bl	8003232 <HAL_GPIO_WritePin>
 8001226:	e004      	b.n	8001232 <GPIOMapping+0x192>
	}
	else
	{
		HAL_GPIO_WritePin(DO3_GPIO_Port, DO3_Pin, GPIO_PIN_SET);
 8001228:	2201      	movs	r2, #1
 800122a:	2120      	movs	r1, #32
 800122c:	4814      	ldr	r0, [pc, #80]	; (8001280 <GPIOMapping+0x1e0>)
 800122e:	f002 f800 	bl	8003232 <HAL_GPIO_WritePin>
	}

	//AO1
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001232:	2100      	movs	r1, #0
 8001234:	4813      	ldr	r0, [pc, #76]	; (8001284 <GPIOMapping+0x1e4>)
 8001236:	f002 ff25 	bl	8004084 <HAL_TIM_PWM_Start>
	htim1.Instance->CCR1 = *(MBSlave.RegistersData.RegistersArray + 2);
 800123a:	4b0c      	ldr	r3, [pc, #48]	; (800126c <GPIOMapping+0x1cc>)
 800123c:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8001240:	3304      	adds	r3, #4
 8001242:	881a      	ldrh	r2, [r3, #0]
 8001244:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <GPIOMapping+0x1e4>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	635a      	str	r2, [r3, #52]	; 0x34
}
 800124a:	bf00      	nop
 800124c:	bd98      	pop	{r3, r4, r7, pc}
 800124e:	bf00      	nop
 8001250:	66666666 	.word	0x66666666
 8001254:	3f4a6666 	.word	0x3f4a6666
 8001258:	ae147ae1 	.word	0xae147ae1
 800125c:	3ff6e147 	.word	0x3ff6e147
 8001260:	75f6fd22 	.word	0x75f6fd22
 8001264:	3f719ce0 	.word	0x3f719ce0
 8001268:	40010c00 	.word	0x40010c00
 800126c:	200000b0 	.word	0x200000b0
 8001270:	2000034c 	.word	0x2000034c
 8001274:	42c80000 	.word	0x42c80000
 8001278:	40390000 	.word	0x40390000
 800127c:	40590000 	.word	0x40590000
 8001280:	40010800 	.word	0x40010800
 8001284:	200003c0 	.word	0x200003c0

08001288 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08e      	sub	sp, #56	; 0x38
 800128c:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800128e:	f000 fdff 	bl	8001e90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001292:	f000 f8ab 	bl	80013ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001296:	f000 fab7 	bl	8001808 <MX_GPIO_Init>
  MX_TIM3_Init();
 800129a:	f000 f9c5 	bl	8001628 <MX_TIM3_Init>
  MX_TIM4_Init();
 800129e:	f000 fa11 	bl	80016c4 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80012a2:	f000 fa5d 	bl	8001760 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80012a6:	f000 f91f 	bl	80014e8 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 80012aa:	f000 fa83 	bl	80017b4 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80012ae:	f000 f8ed 	bl	800148c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  InitMBSlave(1, &MBSlave, &huart3, &htim3, &htim4, 8, 9600, UART_WORDLENGTH_9B, UART_STOPBITS_1, UART_PARITY_EVEN,
 80012b2:	2305      	movs	r3, #5
 80012b4:	930d      	str	r3, [sp, #52]	; 0x34
 80012b6:	4b3c      	ldr	r3, [pc, #240]	; (80013a8 <main+0x120>)
 80012b8:	930c      	str	r3, [sp, #48]	; 0x30
 80012ba:	2305      	movs	r3, #5
 80012bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80012be:	4b3b      	ldr	r3, [pc, #236]	; (80013ac <main+0x124>)
 80012c0:	930a      	str	r3, [sp, #40]	; 0x28
 80012c2:	2310      	movs	r3, #16
 80012c4:	9309      	str	r3, [sp, #36]	; 0x24
 80012c6:	4b3a      	ldr	r3, [pc, #232]	; (80013b0 <main+0x128>)
 80012c8:	9308      	str	r3, [sp, #32]
 80012ca:	2308      	movs	r3, #8
 80012cc:	9307      	str	r3, [sp, #28]
 80012ce:	4b38      	ldr	r3, [pc, #224]	; (80013b0 <main+0x128>)
 80012d0:	9306      	str	r3, [sp, #24]
 80012d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012d6:	9305      	str	r3, [sp, #20]
 80012d8:	2300      	movs	r3, #0
 80012da:	9304      	str	r3, [sp, #16]
 80012dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e0:	9303      	str	r3, [sp, #12]
 80012e2:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80012e6:	9302      	str	r3, [sp, #8]
 80012e8:	2308      	movs	r3, #8
 80012ea:	9301      	str	r3, [sp, #4]
 80012ec:	4b31      	ldr	r3, [pc, #196]	; (80013b4 <main+0x12c>)
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	4b31      	ldr	r3, [pc, #196]	; (80013b8 <main+0x130>)
 80012f2:	4a32      	ldr	r2, [pc, #200]	; (80013bc <main+0x134>)
 80012f4:	4932      	ldr	r1, [pc, #200]	; (80013c0 <main+0x138>)
 80012f6:	2001      	movs	r0, #1
 80012f8:	f004 fc0e 	bl	8005b18 <InitMBSlave>
		  RE_Pin_GPIO_Port, RE_Pin_Pin, DE_Pin_GPIO_Port, DE_Pin_Pin,
		  MBCoilsData, 5, MBRegistersData, 5);

  StartMBSlave(&MBSlave);
 80012fc:	4830      	ldr	r0, [pc, #192]	; (80013c0 <main+0x138>)
 80012fe:	f004 fc9d 	bl	8005c3c <StartMBSlave>


  HAL_ADCEx_Calibration_Start(&hadc1);
 8001302:	4830      	ldr	r0, [pc, #192]	; (80013c4 <main+0x13c>)
 8001304:	f001 faa2 	bl	800284c <HAL_ADCEx_Calibration_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  GPIOMapping();
 8001308:	f7ff feca 	bl	80010a0 <GPIOMapping>

	  printMsg("----------------------------------------------------------------------\n");
 800130c:	482e      	ldr	r0, [pc, #184]	; (80013c8 <main+0x140>)
 800130e:	f7ff fe6f 	bl	8000ff0 <printMsg>

	  printMsg("-> DI1 (switch 1):%d\n", *(MBSlave.CoilsData.CoilsArray));
 8001312:	4b2b      	ldr	r3, [pc, #172]	; (80013c0 <main+0x138>)
 8001314:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	4619      	mov	r1, r3
 800131c:	482b      	ldr	r0, [pc, #172]	; (80013cc <main+0x144>)
 800131e:	f7ff fe67 	bl	8000ff0 <printMsg>
	  printMsg("-> DI2 (switch 2):%d\n", *(MBSlave.CoilsData.CoilsArray + 1));
 8001322:	4b27      	ldr	r3, [pc, #156]	; (80013c0 <main+0x138>)
 8001324:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8001328:	3301      	adds	r3, #1
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	4619      	mov	r1, r3
 800132e:	4828      	ldr	r0, [pc, #160]	; (80013d0 <main+0x148>)
 8001330:	f7ff fe5e 	bl	8000ff0 <printMsg>
	  printMsg("-> DO1 (LED 1):%d\n", *(MBSlave.CoilsData.CoilsArray + 2));
 8001334:	4b22      	ldr	r3, [pc, #136]	; (80013c0 <main+0x138>)
 8001336:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 800133a:	3302      	adds	r3, #2
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	4619      	mov	r1, r3
 8001340:	4824      	ldr	r0, [pc, #144]	; (80013d4 <main+0x14c>)
 8001342:	f7ff fe55 	bl	8000ff0 <printMsg>
	  printMsg("-> DO2 (LED 2):%d\n", *(MBSlave.CoilsData.CoilsArray + 3));
 8001346:	4b1e      	ldr	r3, [pc, #120]	; (80013c0 <main+0x138>)
 8001348:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 800134c:	3303      	adds	r3, #3
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	4619      	mov	r1, r3
 8001352:	4821      	ldr	r0, [pc, #132]	; (80013d8 <main+0x150>)
 8001354:	f7ff fe4c 	bl	8000ff0 <printMsg>
	  printMsg("-> DO3 (LED 3):%d\n", *(MBSlave.CoilsData.CoilsArray + 4));
 8001358:	4b19      	ldr	r3, [pc, #100]	; (80013c0 <main+0x138>)
 800135a:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 800135e:	3304      	adds	r3, #4
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	4619      	mov	r1, r3
 8001364:	481d      	ldr	r0, [pc, #116]	; (80013dc <main+0x154>)
 8001366:	f7ff fe43 	bl	8000ff0 <printMsg>

	  printMsg("-> AI1 (Ambient temp.):%d Celcius\n", *(MBSlave.RegistersData.RegistersArray));
 800136a:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <main+0x138>)
 800136c:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8001370:	881b      	ldrh	r3, [r3, #0]
 8001372:	4619      	mov	r1, r3
 8001374:	481a      	ldr	r0, [pc, #104]	; (80013e0 <main+0x158>)
 8001376:	f7ff fe3b 	bl	8000ff0 <printMsg>
	  printMsg("-> AI2 (STM32 temp.):%d Celcius\n", *(MBSlave.RegistersData.RegistersArray + 1));
 800137a:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <main+0x138>)
 800137c:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8001380:	3302      	adds	r3, #2
 8001382:	881b      	ldrh	r3, [r3, #0]
 8001384:	4619      	mov	r1, r3
 8001386:	4817      	ldr	r0, [pc, #92]	; (80013e4 <main+0x15c>)
 8001388:	f7ff fe32 	bl	8000ff0 <printMsg>
	  printMsg("-> AO1 (PWM Ton):%d\n", *(MBSlave.RegistersData.RegistersArray + 2));
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <main+0x138>)
 800138e:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8001392:	3304      	adds	r3, #4
 8001394:	881b      	ldrh	r3, [r3, #0]
 8001396:	4619      	mov	r1, r3
 8001398:	4813      	ldr	r0, [pc, #76]	; (80013e8 <main+0x160>)
 800139a:	f7ff fe29 	bl	8000ff0 <printMsg>

	  HAL_Delay(1000);
 800139e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013a2:	f000 fdd7 	bl	8001f54 <HAL_Delay>
	  GPIOMapping();
 80013a6:	e7af      	b.n	8001308 <main+0x80>
 80013a8:	20000098 	.word	0x20000098
 80013ac:	20000000 	.word	0x20000000
 80013b0:	40010c00 	.word	0x40010c00
 80013b4:	20000278 	.word	0x20000278
 80013b8:	20000304 	.word	0x20000304
 80013bc:	200002c0 	.word	0x200002c0
 80013c0:	200000b0 	.word	0x200000b0
 80013c4:	2000034c 	.word	0x2000034c
 80013c8:	08007e3c 	.word	0x08007e3c
 80013cc:	08007e84 	.word	0x08007e84
 80013d0:	08007e9c 	.word	0x08007e9c
 80013d4:	08007eb4 	.word	0x08007eb4
 80013d8:	08007ec8 	.word	0x08007ec8
 80013dc:	08007edc 	.word	0x08007edc
 80013e0:	08007ef0 	.word	0x08007ef0
 80013e4:	08007f14 	.word	0x08007f14
 80013e8:	08007f38 	.word	0x08007f38

080013ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b094      	sub	sp, #80	; 0x50
 80013f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013f6:	2228      	movs	r2, #40	; 0x28
 80013f8:	2100      	movs	r1, #0
 80013fa:	4618      	mov	r0, r3
 80013fc:	f005 ff86 	bl	800730c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800141c:	2302      	movs	r3, #2
 800141e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001420:	2301      	movs	r3, #1
 8001422:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001424:	2310      	movs	r3, #16
 8001426:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001428:	2300      	movs	r3, #0
 800142a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800142c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001430:	4618      	mov	r0, r3
 8001432:	f001 ff17 	bl	8003264 <HAL_RCC_OscConfig>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800143c:	f000 fa6c 	bl	8001918 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001440:	230f      	movs	r3, #15
 8001442:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001444:	2300      	movs	r3, #0
 8001446:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001448:	2300      	movs	r3, #0
 800144a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800144c:	2300      	movs	r3, #0
 800144e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001450:	2300      	movs	r3, #0
 8001452:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	2100      	movs	r1, #0
 800145a:	4618      	mov	r0, r3
 800145c:	f002 f982 	bl	8003764 <HAL_RCC_ClockConfig>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001466:	f000 fa57 	bl	8001918 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800146a:	2302      	movs	r3, #2
 800146c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001472:	1d3b      	adds	r3, r7, #4
 8001474:	4618      	mov	r0, r3
 8001476:	f002 fb0f 	bl	8003a98 <HAL_RCCEx_PeriphCLKConfig>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001480:	f000 fa4a 	bl	8001918 <Error_Handler>
  }
}
 8001484:	bf00      	nop
 8001486:	3750      	adds	r7, #80	; 0x50
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001492:	1d3b      	adds	r3, r7, #4
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800149c:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <MX_ADC1_Init+0x54>)
 800149e:	4a11      	ldr	r2, [pc, #68]	; (80014e4 <MX_ADC1_Init+0x58>)
 80014a0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014a2:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <MX_ADC1_Init+0x54>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80014a8:	4b0d      	ldr	r3, [pc, #52]	; (80014e0 <MX_ADC1_Init+0x54>)
 80014aa:	2201      	movs	r2, #1
 80014ac:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014ae:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <MX_ADC1_Init+0x54>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014b4:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <MX_ADC1_Init+0x54>)
 80014b6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80014ba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014bc:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <MX_ADC1_Init+0x54>)
 80014be:	2200      	movs	r2, #0
 80014c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80014c2:	4b07      	ldr	r3, [pc, #28]	; (80014e0 <MX_ADC1_Init+0x54>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014c8:	4805      	ldr	r0, [pc, #20]	; (80014e0 <MX_ADC1_Init+0x54>)
 80014ca:	f000 fd67 	bl	8001f9c <HAL_ADC_Init>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80014d4:	f000 fa20 	bl	8001918 <Error_Handler>
  }*/
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014d8:	bf00      	nop
 80014da:	3710      	adds	r7, #16
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	2000034c 	.word	0x2000034c
 80014e4:	40012400 	.word	0x40012400

080014e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b096      	sub	sp, #88	; 0x58
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001506:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
 8001514:	611a      	str	r2, [r3, #16]
 8001516:	615a      	str	r2, [r3, #20]
 8001518:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	2220      	movs	r2, #32
 800151e:	2100      	movs	r1, #0
 8001520:	4618      	mov	r0, r3
 8001522:	f005 fef3 	bl	800730c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001526:	4b3e      	ldr	r3, [pc, #248]	; (8001620 <MX_TIM1_Init+0x138>)
 8001528:	4a3e      	ldr	r2, [pc, #248]	; (8001624 <MX_TIM1_Init+0x13c>)
 800152a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800152c:	4b3c      	ldr	r3, [pc, #240]	; (8001620 <MX_TIM1_Init+0x138>)
 800152e:	2200      	movs	r2, #0
 8001530:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001532:	4b3b      	ldr	r3, [pc, #236]	; (8001620 <MX_TIM1_Init+0x138>)
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001538:	4b39      	ldr	r3, [pc, #228]	; (8001620 <MX_TIM1_Init+0x138>)
 800153a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800153e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001540:	4b37      	ldr	r3, [pc, #220]	; (8001620 <MX_TIM1_Init+0x138>)
 8001542:	2200      	movs	r2, #0
 8001544:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001546:	4b36      	ldr	r3, [pc, #216]	; (8001620 <MX_TIM1_Init+0x138>)
 8001548:	2200      	movs	r2, #0
 800154a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800154c:	4b34      	ldr	r3, [pc, #208]	; (8001620 <MX_TIM1_Init+0x138>)
 800154e:	2200      	movs	r2, #0
 8001550:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001552:	4833      	ldr	r0, [pc, #204]	; (8001620 <MX_TIM1_Init+0x138>)
 8001554:	f002 fc1a 	bl	8003d8c <HAL_TIM_Base_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800155e:	f000 f9db 	bl	8001918 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001562:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001566:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001568:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800156c:	4619      	mov	r1, r3
 800156e:	482c      	ldr	r0, [pc, #176]	; (8001620 <MX_TIM1_Init+0x138>)
 8001570:	f002 fff0 	bl	8004554 <HAL_TIM_ConfigClockSource>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800157a:	f000 f9cd 	bl	8001918 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800157e:	4828      	ldr	r0, [pc, #160]	; (8001620 <MX_TIM1_Init+0x138>)
 8001580:	f002 fd28 	bl	8003fd4 <HAL_TIM_PWM_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800158a:	f000 f9c5 	bl	8001918 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800158e:	2300      	movs	r3, #0
 8001590:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001592:	2300      	movs	r3, #0
 8001594:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001596:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800159a:	4619      	mov	r1, r3
 800159c:	4820      	ldr	r0, [pc, #128]	; (8001620 <MX_TIM1_Init+0x138>)
 800159e:	f003 fb73 	bl	8004c88 <HAL_TIMEx_MasterConfigSynchronization>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80015a8:	f000 f9b6 	bl	8001918 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015ac:	2360      	movs	r3, #96	; 0x60
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015b4:	2300      	movs	r3, #0
 80015b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015b8:	2300      	movs	r3, #0
 80015ba:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015bc:	2300      	movs	r3, #0
 80015be:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015c0:	2300      	movs	r3, #0
 80015c2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015c4:	2300      	movs	r3, #0
 80015c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015cc:	2200      	movs	r2, #0
 80015ce:	4619      	mov	r1, r3
 80015d0:	4813      	ldr	r0, [pc, #76]	; (8001620 <MX_TIM1_Init+0x138>)
 80015d2:	f002 ff01 	bl	80043d8 <HAL_TIM_PWM_ConfigChannel>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80015dc:	f000 f99c 	bl	8001918 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015e0:	2300      	movs	r3, #0
 80015e2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015e4:	2300      	movs	r3, #0
 80015e6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015e8:	2300      	movs	r3, #0
 80015ea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015ec:	2300      	movs	r3, #0
 80015ee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015f8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015fa:	2300      	movs	r3, #0
 80015fc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015fe:	1d3b      	adds	r3, r7, #4
 8001600:	4619      	mov	r1, r3
 8001602:	4807      	ldr	r0, [pc, #28]	; (8001620 <MX_TIM1_Init+0x138>)
 8001604:	f003 fb9e 	bl	8004d44 <HAL_TIMEx_ConfigBreakDeadTime>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800160e:	f000 f983 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001612:	4803      	ldr	r0, [pc, #12]	; (8001620 <MX_TIM1_Init+0x138>)
 8001614:	f000 fa4a 	bl	8001aac <HAL_TIM_MspPostInit>

}
 8001618:	bf00      	nop
 800161a:	3758      	adds	r7, #88	; 0x58
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	200003c0 	.word	0x200003c0
 8001624:	40012c00 	.word	0x40012c00

08001628 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800162e:	f107 0308 	add.w	r3, r7, #8
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	605a      	str	r2, [r3, #4]
 8001638:	609a      	str	r2, [r3, #8]
 800163a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800163c:	463b      	mov	r3, r7
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001644:	4b1d      	ldr	r3, [pc, #116]	; (80016bc <MX_TIM3_Init+0x94>)
 8001646:	4a1e      	ldr	r2, [pc, #120]	; (80016c0 <MX_TIM3_Init+0x98>)
 8001648:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800164a:	4b1c      	ldr	r3, [pc, #112]	; (80016bc <MX_TIM3_Init+0x94>)
 800164c:	2200      	movs	r2, #0
 800164e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001650:	4b1a      	ldr	r3, [pc, #104]	; (80016bc <MX_TIM3_Init+0x94>)
 8001652:	2200      	movs	r2, #0
 8001654:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001656:	4b19      	ldr	r3, [pc, #100]	; (80016bc <MX_TIM3_Init+0x94>)
 8001658:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800165c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800165e:	4b17      	ldr	r3, [pc, #92]	; (80016bc <MX_TIM3_Init+0x94>)
 8001660:	2200      	movs	r2, #0
 8001662:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001664:	4b15      	ldr	r3, [pc, #84]	; (80016bc <MX_TIM3_Init+0x94>)
 8001666:	2200      	movs	r2, #0
 8001668:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800166a:	4814      	ldr	r0, [pc, #80]	; (80016bc <MX_TIM3_Init+0x94>)
 800166c:	f002 fb8e 	bl	8003d8c <HAL_TIM_Base_Init>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001676:	f000 f94f 	bl	8001918 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800167a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800167e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001680:	f107 0308 	add.w	r3, r7, #8
 8001684:	4619      	mov	r1, r3
 8001686:	480d      	ldr	r0, [pc, #52]	; (80016bc <MX_TIM3_Init+0x94>)
 8001688:	f002 ff64 	bl	8004554 <HAL_TIM_ConfigClockSource>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001692:	f000 f941 	bl	8001918 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001696:	2300      	movs	r3, #0
 8001698:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800169a:	2300      	movs	r3, #0
 800169c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800169e:	463b      	mov	r3, r7
 80016a0:	4619      	mov	r1, r3
 80016a2:	4806      	ldr	r0, [pc, #24]	; (80016bc <MX_TIM3_Init+0x94>)
 80016a4:	f003 faf0 	bl	8004c88 <HAL_TIMEx_MasterConfigSynchronization>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80016ae:	f000 f933 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80016b2:	bf00      	nop
 80016b4:	3718      	adds	r7, #24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000304 	.word	0x20000304
 80016c0:	40000400 	.word	0x40000400

080016c4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ca:	f107 0308 	add.w	r3, r7, #8
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	609a      	str	r2, [r3, #8]
 80016d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d8:	463b      	mov	r3, r7
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80016e0:	4b1d      	ldr	r3, [pc, #116]	; (8001758 <MX_TIM4_Init+0x94>)
 80016e2:	4a1e      	ldr	r2, [pc, #120]	; (800175c <MX_TIM4_Init+0x98>)
 80016e4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80016e6:	4b1c      	ldr	r3, [pc, #112]	; (8001758 <MX_TIM4_Init+0x94>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ec:	4b1a      	ldr	r3, [pc, #104]	; (8001758 <MX_TIM4_Init+0x94>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80016f2:	4b19      	ldr	r3, [pc, #100]	; (8001758 <MX_TIM4_Init+0x94>)
 80016f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016f8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016fa:	4b17      	ldr	r3, [pc, #92]	; (8001758 <MX_TIM4_Init+0x94>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001700:	4b15      	ldr	r3, [pc, #84]	; (8001758 <MX_TIM4_Init+0x94>)
 8001702:	2200      	movs	r2, #0
 8001704:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001706:	4814      	ldr	r0, [pc, #80]	; (8001758 <MX_TIM4_Init+0x94>)
 8001708:	f002 fb40 	bl	8003d8c <HAL_TIM_Base_Init>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001712:	f000 f901 	bl	8001918 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001716:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800171a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800171c:	f107 0308 	add.w	r3, r7, #8
 8001720:	4619      	mov	r1, r3
 8001722:	480d      	ldr	r0, [pc, #52]	; (8001758 <MX_TIM4_Init+0x94>)
 8001724:	f002 ff16 	bl	8004554 <HAL_TIM_ConfigClockSource>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800172e:	f000 f8f3 	bl	8001918 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001732:	2300      	movs	r3, #0
 8001734:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001736:	2300      	movs	r3, #0
 8001738:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800173a:	463b      	mov	r3, r7
 800173c:	4619      	mov	r1, r3
 800173e:	4806      	ldr	r0, [pc, #24]	; (8001758 <MX_TIM4_Init+0x94>)
 8001740:	f003 faa2 	bl	8004c88 <HAL_TIMEx_MasterConfigSynchronization>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800174a:	f000 f8e5 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800174e:	bf00      	nop
 8001750:	3718      	adds	r7, #24
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20000278 	.word	0x20000278
 800175c:	40000800 	.word	0x40000800

08001760 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001764:	4b11      	ldr	r3, [pc, #68]	; (80017ac <MX_USART1_UART_Init+0x4c>)
 8001766:	4a12      	ldr	r2, [pc, #72]	; (80017b0 <MX_USART1_UART_Init+0x50>)
 8001768:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800176a:	4b10      	ldr	r3, [pc, #64]	; (80017ac <MX_USART1_UART_Init+0x4c>)
 800176c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001770:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001772:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <MX_USART1_UART_Init+0x4c>)
 8001774:	2200      	movs	r2, #0
 8001776:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <MX_USART1_UART_Init+0x4c>)
 800177a:	2200      	movs	r2, #0
 800177c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800177e:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <MX_USART1_UART_Init+0x4c>)
 8001780:	2200      	movs	r2, #0
 8001782:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001784:	4b09      	ldr	r3, [pc, #36]	; (80017ac <MX_USART1_UART_Init+0x4c>)
 8001786:	220c      	movs	r2, #12
 8001788:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800178a:	4b08      	ldr	r3, [pc, #32]	; (80017ac <MX_USART1_UART_Init+0x4c>)
 800178c:	2200      	movs	r2, #0
 800178e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <MX_USART1_UART_Init+0x4c>)
 8001792:	2200      	movs	r2, #0
 8001794:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001796:	4805      	ldr	r0, [pc, #20]	; (80017ac <MX_USART1_UART_Init+0x4c>)
 8001798:	f003 fb37 	bl	8004e0a <HAL_UART_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80017a2:	f000 f8b9 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	2000037c 	.word	0x2000037c
 80017b0:	40013800 	.word	0x40013800

080017b4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017b8:	4b11      	ldr	r3, [pc, #68]	; (8001800 <MX_USART3_UART_Init+0x4c>)
 80017ba:	4a12      	ldr	r2, [pc, #72]	; (8001804 <MX_USART3_UART_Init+0x50>)
 80017bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80017be:	4b10      	ldr	r3, [pc, #64]	; (8001800 <MX_USART3_UART_Init+0x4c>)
 80017c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017c6:	4b0e      	ldr	r3, [pc, #56]	; (8001800 <MX_USART3_UART_Init+0x4c>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017cc:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <MX_USART3_UART_Init+0x4c>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017d2:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <MX_USART3_UART_Init+0x4c>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017d8:	4b09      	ldr	r3, [pc, #36]	; (8001800 <MX_USART3_UART_Init+0x4c>)
 80017da:	220c      	movs	r2, #12
 80017dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017de:	4b08      	ldr	r3, [pc, #32]	; (8001800 <MX_USART3_UART_Init+0x4c>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <MX_USART3_UART_Init+0x4c>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017ea:	4805      	ldr	r0, [pc, #20]	; (8001800 <MX_USART3_UART_Init+0x4c>)
 80017ec:	f003 fb0d 	bl	8004e0a <HAL_UART_Init>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80017f6:	f000 f88f 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	200002c0 	.word	0x200002c0
 8001804:	40004800 	.word	0x40004800

08001808 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180e:	f107 0308 	add.w	r3, r7, #8
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	605a      	str	r2, [r3, #4]
 8001818:	609a      	str	r2, [r3, #8]
 800181a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800181c:	4b26      	ldr	r3, [pc, #152]	; (80018b8 <MX_GPIO_Init+0xb0>)
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	4a25      	ldr	r2, [pc, #148]	; (80018b8 <MX_GPIO_Init+0xb0>)
 8001822:	f043 0304 	orr.w	r3, r3, #4
 8001826:	6193      	str	r3, [r2, #24]
 8001828:	4b23      	ldr	r3, [pc, #140]	; (80018b8 <MX_GPIO_Init+0xb0>)
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	f003 0304 	and.w	r3, r3, #4
 8001830:	607b      	str	r3, [r7, #4]
 8001832:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001834:	4b20      	ldr	r3, [pc, #128]	; (80018b8 <MX_GPIO_Init+0xb0>)
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	4a1f      	ldr	r2, [pc, #124]	; (80018b8 <MX_GPIO_Init+0xb0>)
 800183a:	f043 0308 	orr.w	r3, r3, #8
 800183e:	6193      	str	r3, [r2, #24]
 8001840:	4b1d      	ldr	r3, [pc, #116]	; (80018b8 <MX_GPIO_Init+0xb0>)
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	f003 0308 	and.w	r3, r3, #8
 8001848:	603b      	str	r3, [r7, #0]
 800184a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DO1_Pin|DO2_Pin|DO3_Pin, GPIO_PIN_RESET);
 800184c:	2200      	movs	r2, #0
 800184e:	2138      	movs	r1, #56	; 0x38
 8001850:	481a      	ldr	r0, [pc, #104]	; (80018bc <MX_GPIO_Init+0xb4>)
 8001852:	f001 fcee 	bl	8003232 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RE_Pin_Pin|DE_Pin_Pin, GPIO_PIN_RESET);
 8001856:	2200      	movs	r2, #0
 8001858:	2118      	movs	r1, #24
 800185a:	4819      	ldr	r0, [pc, #100]	; (80018c0 <MX_GPIO_Init+0xb8>)
 800185c:	f001 fce9 	bl	8003232 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DO1_Pin DO2_Pin DO3_Pin */
  GPIO_InitStruct.Pin = DO1_Pin|DO2_Pin|DO3_Pin;
 8001860:	2338      	movs	r3, #56	; 0x38
 8001862:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001864:	2301      	movs	r3, #1
 8001866:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186c:	2302      	movs	r3, #2
 800186e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001870:	f107 0308 	add.w	r3, r7, #8
 8001874:	4619      	mov	r1, r3
 8001876:	4811      	ldr	r0, [pc, #68]	; (80018bc <MX_GPIO_Init+0xb4>)
 8001878:	f001 fa84 	bl	8002d84 <HAL_GPIO_Init>

  /*Configure GPIO pins : RE_Pin_Pin DE_Pin_Pin */
  GPIO_InitStruct.Pin = RE_Pin_Pin|DE_Pin_Pin;
 800187c:	2318      	movs	r3, #24
 800187e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001880:	2301      	movs	r3, #1
 8001882:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001888:	2302      	movs	r3, #2
 800188a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800188c:	f107 0308 	add.w	r3, r7, #8
 8001890:	4619      	mov	r1, r3
 8001892:	480b      	ldr	r0, [pc, #44]	; (80018c0 <MX_GPIO_Init+0xb8>)
 8001894:	f001 fa76 	bl	8002d84 <HAL_GPIO_Init>

  /*Configure GPIO pins : DI1_Pin DI2_Pin */
  GPIO_InitStruct.Pin = DI1_Pin|DI2_Pin;
 8001898:	2360      	movs	r3, #96	; 0x60
 800189a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800189c:	2300      	movs	r3, #0
 800189e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018a0:	2302      	movs	r3, #2
 80018a2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a4:	f107 0308 	add.w	r3, r7, #8
 80018a8:	4619      	mov	r1, r3
 80018aa:	4805      	ldr	r0, [pc, #20]	; (80018c0 <MX_GPIO_Init+0xb8>)
 80018ac:	f001 fa6a 	bl	8002d84 <HAL_GPIO_Init>

}
 80018b0:	bf00      	nop
 80018b2:	3718      	adds	r7, #24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40021000 	.word	0x40021000
 80018bc:	40010800 	.word	0x40010800
 80018c0:	40010c00 	.word	0x40010c00

080018c4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
	MBSlave_HAL_UART_RxCpltCallback(huart, &MBSlave);
 80018cc:	4903      	ldr	r1, [pc, #12]	; (80018dc <HAL_UART_RxCpltCallback+0x18>)
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f004 f9da 	bl	8005c88 <MBSlave_HAL_UART_RxCpltCallback>
}
 80018d4:	bf00      	nop
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	200000b0 	.word	0x200000b0

080018e0 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
	MBUnit_HAL_UART_ErrorCallback(huart, &MBSlave);
 80018e8:	4903      	ldr	r1, [pc, #12]	; (80018f8 <HAL_UART_ErrorCallback+0x18>)
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f004 fa41 	bl	8005d72 <MBUnit_HAL_UART_ErrorCallback>
}
 80018f0:	bf00      	nop
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	200000b0 	.word	0x200000b0

080018fc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
	MBSlave_HAL_TIM_PeriodElapsedCallback(htim, &MBSlave);
 8001904:	4903      	ldr	r1, [pc, #12]	; (8001914 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f004 fa5f 	bl	8005dca <MBSlave_HAL_TIM_PeriodElapsedCallback>
}
 800190c:	bf00      	nop
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	200000b0 	.word	0x200000b0

08001918 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800191c:	b672      	cpsid	i
}
 800191e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001920:	e7fe      	b.n	8001920 <Error_Handler+0x8>
	...

08001924 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800192a:	4b15      	ldr	r3, [pc, #84]	; (8001980 <HAL_MspInit+0x5c>)
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	4a14      	ldr	r2, [pc, #80]	; (8001980 <HAL_MspInit+0x5c>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	6193      	str	r3, [r2, #24]
 8001936:	4b12      	ldr	r3, [pc, #72]	; (8001980 <HAL_MspInit+0x5c>)
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	60bb      	str	r3, [r7, #8]
 8001940:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001942:	4b0f      	ldr	r3, [pc, #60]	; (8001980 <HAL_MspInit+0x5c>)
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	4a0e      	ldr	r2, [pc, #56]	; (8001980 <HAL_MspInit+0x5c>)
 8001948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800194c:	61d3      	str	r3, [r2, #28]
 800194e:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <HAL_MspInit+0x5c>)
 8001950:	69db      	ldr	r3, [r3, #28]
 8001952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001956:	607b      	str	r3, [r7, #4]
 8001958:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800195a:	4b0a      	ldr	r3, [pc, #40]	; (8001984 <HAL_MspInit+0x60>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	4a04      	ldr	r2, [pc, #16]	; (8001984 <HAL_MspInit+0x60>)
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001976:	bf00      	nop
 8001978:	3714      	adds	r7, #20
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr
 8001980:	40021000 	.word	0x40021000
 8001984:	40010000 	.word	0x40010000

08001988 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b088      	sub	sp, #32
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001990:	f107 0310 	add.w	r3, r7, #16
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a14      	ldr	r2, [pc, #80]	; (80019f4 <HAL_ADC_MspInit+0x6c>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d121      	bne.n	80019ec <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019a8:	4b13      	ldr	r3, [pc, #76]	; (80019f8 <HAL_ADC_MspInit+0x70>)
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	4a12      	ldr	r2, [pc, #72]	; (80019f8 <HAL_ADC_MspInit+0x70>)
 80019ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019b2:	6193      	str	r3, [r2, #24]
 80019b4:	4b10      	ldr	r3, [pc, #64]	; (80019f8 <HAL_ADC_MspInit+0x70>)
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c0:	4b0d      	ldr	r3, [pc, #52]	; (80019f8 <HAL_ADC_MspInit+0x70>)
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	4a0c      	ldr	r2, [pc, #48]	; (80019f8 <HAL_ADC_MspInit+0x70>)
 80019c6:	f043 0304 	orr.w	r3, r3, #4
 80019ca:	6193      	str	r3, [r2, #24]
 80019cc:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <HAL_ADC_MspInit+0x70>)
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	f003 0304 	and.w	r3, r3, #4
 80019d4:	60bb      	str	r3, [r7, #8]
 80019d6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = AI1_Pin;
 80019d8:	2301      	movs	r3, #1
 80019da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019dc:	2303      	movs	r3, #3
 80019de:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(AI1_GPIO_Port, &GPIO_InitStruct);
 80019e0:	f107 0310 	add.w	r3, r7, #16
 80019e4:	4619      	mov	r1, r3
 80019e6:	4805      	ldr	r0, [pc, #20]	; (80019fc <HAL_ADC_MspInit+0x74>)
 80019e8:	f001 f9cc 	bl	8002d84 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019ec:	bf00      	nop
 80019ee:	3720      	adds	r7, #32
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40012400 	.word	0x40012400
 80019f8:	40021000 	.word	0x40021000
 80019fc:	40010800 	.word	0x40010800

08001a00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a23      	ldr	r2, [pc, #140]	; (8001a9c <HAL_TIM_Base_MspInit+0x9c>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d10c      	bne.n	8001a2c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a12:	4b23      	ldr	r3, [pc, #140]	; (8001aa0 <HAL_TIM_Base_MspInit+0xa0>)
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	4a22      	ldr	r2, [pc, #136]	; (8001aa0 <HAL_TIM_Base_MspInit+0xa0>)
 8001a18:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a1c:	6193      	str	r3, [r2, #24]
 8001a1e:	4b20      	ldr	r3, [pc, #128]	; (8001aa0 <HAL_TIM_Base_MspInit+0xa0>)
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a26:	617b      	str	r3, [r7, #20]
 8001a28:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001a2a:	e032      	b.n	8001a92 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a1c      	ldr	r2, [pc, #112]	; (8001aa4 <HAL_TIM_Base_MspInit+0xa4>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d114      	bne.n	8001a60 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a36:	4b1a      	ldr	r3, [pc, #104]	; (8001aa0 <HAL_TIM_Base_MspInit+0xa0>)
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	4a19      	ldr	r2, [pc, #100]	; (8001aa0 <HAL_TIM_Base_MspInit+0xa0>)
 8001a3c:	f043 0302 	orr.w	r3, r3, #2
 8001a40:	61d3      	str	r3, [r2, #28]
 8001a42:	4b17      	ldr	r3, [pc, #92]	; (8001aa0 <HAL_TIM_Base_MspInit+0xa0>)
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	613b      	str	r3, [r7, #16]
 8001a4c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	2102      	movs	r1, #2
 8001a52:	201d      	movs	r0, #29
 8001a54:	f001 f8a1 	bl	8002b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a58:	201d      	movs	r0, #29
 8001a5a:	f001 f8ba 	bl	8002bd2 <HAL_NVIC_EnableIRQ>
}
 8001a5e:	e018      	b.n	8001a92 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a10      	ldr	r2, [pc, #64]	; (8001aa8 <HAL_TIM_Base_MspInit+0xa8>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d113      	bne.n	8001a92 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a6a:	4b0d      	ldr	r3, [pc, #52]	; (8001aa0 <HAL_TIM_Base_MspInit+0xa0>)
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	4a0c      	ldr	r2, [pc, #48]	; (8001aa0 <HAL_TIM_Base_MspInit+0xa0>)
 8001a70:	f043 0304 	orr.w	r3, r3, #4
 8001a74:	61d3      	str	r3, [r2, #28]
 8001a76:	4b0a      	ldr	r3, [pc, #40]	; (8001aa0 <HAL_TIM_Base_MspInit+0xa0>)
 8001a78:	69db      	ldr	r3, [r3, #28]
 8001a7a:	f003 0304 	and.w	r3, r3, #4
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8001a82:	2200      	movs	r2, #0
 8001a84:	2101      	movs	r1, #1
 8001a86:	201e      	movs	r0, #30
 8001a88:	f001 f887 	bl	8002b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a8c:	201e      	movs	r0, #30
 8001a8e:	f001 f8a0 	bl	8002bd2 <HAL_NVIC_EnableIRQ>
}
 8001a92:	bf00      	nop
 8001a94:	3718      	adds	r7, #24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40012c00 	.word	0x40012c00
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	40000400 	.word	0x40000400
 8001aa8:	40000800 	.word	0x40000800

08001aac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b088      	sub	sp, #32
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab4:	f107 0310 	add.w	r3, r7, #16
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a10      	ldr	r2, [pc, #64]	; (8001b08 <HAL_TIM_MspPostInit+0x5c>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d118      	bne.n	8001afe <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001acc:	4b0f      	ldr	r3, [pc, #60]	; (8001b0c <HAL_TIM_MspPostInit+0x60>)
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	4a0e      	ldr	r2, [pc, #56]	; (8001b0c <HAL_TIM_MspPostInit+0x60>)
 8001ad2:	f043 0304 	orr.w	r3, r3, #4
 8001ad6:	6193      	str	r3, [r2, #24]
 8001ad8:	4b0c      	ldr	r3, [pc, #48]	; (8001b0c <HAL_TIM_MspPostInit+0x60>)
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	f003 0304 	and.w	r3, r3, #4
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ae4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ae8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aea:	2302      	movs	r3, #2
 8001aec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aee:	2302      	movs	r3, #2
 8001af0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af2:	f107 0310 	add.w	r3, r7, #16
 8001af6:	4619      	mov	r1, r3
 8001af8:	4805      	ldr	r0, [pc, #20]	; (8001b10 <HAL_TIM_MspPostInit+0x64>)
 8001afa:	f001 f943 	bl	8002d84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001afe:	bf00      	nop
 8001b00:	3720      	adds	r7, #32
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40012c00 	.word	0x40012c00
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	40010800 	.word	0x40010800

08001b14 <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a15      	ldr	r2, [pc, #84]	; (8001b78 <HAL_TIM_Base_MspDeInit+0x64>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d106      	bne.n	8001b34 <HAL_TIM_Base_MspDeInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspDeInit 0 */

  /* USER CODE END TIM1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM1_CLK_DISABLE();
 8001b26:	4b15      	ldr	r3, [pc, #84]	; (8001b7c <HAL_TIM_Base_MspDeInit+0x68>)
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	4a14      	ldr	r2, [pc, #80]	; (8001b7c <HAL_TIM_Base_MspDeInit+0x68>)
 8001b2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001b30:	6193      	str	r3, [r2, #24]
  /* USER CODE BEGIN TIM4_MspDeInit 1 */

  /* USER CODE END TIM4_MspDeInit 1 */
  }

}
 8001b32:	e01c      	b.n	8001b6e <HAL_TIM_Base_MspDeInit+0x5a>
  else if(htim_base->Instance==TIM3)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a11      	ldr	r2, [pc, #68]	; (8001b80 <HAL_TIM_Base_MspDeInit+0x6c>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d109      	bne.n	8001b52 <HAL_TIM_Base_MspDeInit+0x3e>
    __HAL_RCC_TIM3_CLK_DISABLE();
 8001b3e:	4b0f      	ldr	r3, [pc, #60]	; (8001b7c <HAL_TIM_Base_MspDeInit+0x68>)
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	4a0e      	ldr	r2, [pc, #56]	; (8001b7c <HAL_TIM_Base_MspDeInit+0x68>)
 8001b44:	f023 0302 	bic.w	r3, r3, #2
 8001b48:	61d3      	str	r3, [r2, #28]
    HAL_NVIC_DisableIRQ(TIM3_IRQn);
 8001b4a:	201d      	movs	r0, #29
 8001b4c:	f001 f84f 	bl	8002bee <HAL_NVIC_DisableIRQ>
}
 8001b50:	e00d      	b.n	8001b6e <HAL_TIM_Base_MspDeInit+0x5a>
  else if(htim_base->Instance==TIM4)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a0b      	ldr	r2, [pc, #44]	; (8001b84 <HAL_TIM_Base_MspDeInit+0x70>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d108      	bne.n	8001b6e <HAL_TIM_Base_MspDeInit+0x5a>
    __HAL_RCC_TIM4_CLK_DISABLE();
 8001b5c:	4b07      	ldr	r3, [pc, #28]	; (8001b7c <HAL_TIM_Base_MspDeInit+0x68>)
 8001b5e:	69db      	ldr	r3, [r3, #28]
 8001b60:	4a06      	ldr	r2, [pc, #24]	; (8001b7c <HAL_TIM_Base_MspDeInit+0x68>)
 8001b62:	f023 0304 	bic.w	r3, r3, #4
 8001b66:	61d3      	str	r3, [r2, #28]
    HAL_NVIC_DisableIRQ(TIM4_IRQn);
 8001b68:	201e      	movs	r0, #30
 8001b6a:	f001 f840 	bl	8002bee <HAL_NVIC_DisableIRQ>
}
 8001b6e:	bf00      	nop
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40012c00 	.word	0x40012c00
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	40000400 	.word	0x40000400
 8001b84:	40000800 	.word	0x40000800

08001b88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08a      	sub	sp, #40	; 0x28
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b90:	f107 0318 	add.w	r3, r7, #24
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a40      	ldr	r2, [pc, #256]	; (8001ca4 <HAL_UART_MspInit+0x11c>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d13a      	bne.n	8001c1e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ba8:	4b3f      	ldr	r3, [pc, #252]	; (8001ca8 <HAL_UART_MspInit+0x120>)
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	4a3e      	ldr	r2, [pc, #248]	; (8001ca8 <HAL_UART_MspInit+0x120>)
 8001bae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bb2:	6193      	str	r3, [r2, #24]
 8001bb4:	4b3c      	ldr	r3, [pc, #240]	; (8001ca8 <HAL_UART_MspInit+0x120>)
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc0:	4b39      	ldr	r3, [pc, #228]	; (8001ca8 <HAL_UART_MspInit+0x120>)
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	4a38      	ldr	r2, [pc, #224]	; (8001ca8 <HAL_UART_MspInit+0x120>)
 8001bc6:	f043 0304 	orr.w	r3, r3, #4
 8001bca:	6193      	str	r3, [r2, #24]
 8001bcc:	4b36      	ldr	r3, [pc, #216]	; (8001ca8 <HAL_UART_MspInit+0x120>)
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	f003 0304 	and.w	r3, r3, #4
 8001bd4:	613b      	str	r3, [r7, #16]
 8001bd6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001bd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bde:	2302      	movs	r3, #2
 8001be0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001be2:	2303      	movs	r3, #3
 8001be4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be6:	f107 0318 	add.w	r3, r7, #24
 8001bea:	4619      	mov	r1, r3
 8001bec:	482f      	ldr	r0, [pc, #188]	; (8001cac <HAL_UART_MspInit+0x124>)
 8001bee:	f001 f8c9 	bl	8002d84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001bf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c00:	f107 0318 	add.w	r3, r7, #24
 8001c04:	4619      	mov	r1, r3
 8001c06:	4829      	ldr	r0, [pc, #164]	; (8001cac <HAL_UART_MspInit+0x124>)
 8001c08:	f001 f8bc 	bl	8002d84 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	2103      	movs	r1, #3
 8001c10:	2025      	movs	r0, #37	; 0x25
 8001c12:	f000 ffc2 	bl	8002b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c16:	2025      	movs	r0, #37	; 0x25
 8001c18:	f000 ffdb 	bl	8002bd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c1c:	e03e      	b.n	8001c9c <HAL_UART_MspInit+0x114>
  else if(huart->Instance==USART3)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a23      	ldr	r2, [pc, #140]	; (8001cb0 <HAL_UART_MspInit+0x128>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d139      	bne.n	8001c9c <HAL_UART_MspInit+0x114>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c28:	4b1f      	ldr	r3, [pc, #124]	; (8001ca8 <HAL_UART_MspInit+0x120>)
 8001c2a:	69db      	ldr	r3, [r3, #28]
 8001c2c:	4a1e      	ldr	r2, [pc, #120]	; (8001ca8 <HAL_UART_MspInit+0x120>)
 8001c2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c32:	61d3      	str	r3, [r2, #28]
 8001c34:	4b1c      	ldr	r3, [pc, #112]	; (8001ca8 <HAL_UART_MspInit+0x120>)
 8001c36:	69db      	ldr	r3, [r3, #28]
 8001c38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c3c:	60fb      	str	r3, [r7, #12]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c40:	4b19      	ldr	r3, [pc, #100]	; (8001ca8 <HAL_UART_MspInit+0x120>)
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	4a18      	ldr	r2, [pc, #96]	; (8001ca8 <HAL_UART_MspInit+0x120>)
 8001c46:	f043 0308 	orr.w	r3, r3, #8
 8001c4a:	6193      	str	r3, [r2, #24]
 8001c4c:	4b16      	ldr	r3, [pc, #88]	; (8001ca8 <HAL_UART_MspInit+0x120>)
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	f003 0308 	and.w	r3, r3, #8
 8001c54:	60bb      	str	r3, [r7, #8]
 8001c56:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c62:	2303      	movs	r3, #3
 8001c64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c66:	f107 0318 	add.w	r3, r7, #24
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4811      	ldr	r0, [pc, #68]	; (8001cb4 <HAL_UART_MspInit+0x12c>)
 8001c6e:	f001 f889 	bl	8002d84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001c72:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c80:	f107 0318 	add.w	r3, r7, #24
 8001c84:	4619      	mov	r1, r3
 8001c86:	480b      	ldr	r0, [pc, #44]	; (8001cb4 <HAL_UART_MspInit+0x12c>)
 8001c88:	f001 f87c 	bl	8002d84 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	2100      	movs	r1, #0
 8001c90:	2027      	movs	r0, #39	; 0x27
 8001c92:	f000 ff82 	bl	8002b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001c96:	2027      	movs	r0, #39	; 0x27
 8001c98:	f000 ff9b 	bl	8002bd2 <HAL_NVIC_EnableIRQ>
}
 8001c9c:	bf00      	nop
 8001c9e:	3728      	adds	r7, #40	; 0x28
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40013800 	.word	0x40013800
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	40010800 	.word	0x40010800
 8001cb0:	40004800 	.word	0x40004800
 8001cb4:	40010c00 	.word	0x40010c00

08001cb8 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a14      	ldr	r2, [pc, #80]	; (8001d18 <HAL_UART_MspDeInit+0x60>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d10e      	bne.n	8001ce8 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8001cca:	4b14      	ldr	r3, [pc, #80]	; (8001d1c <HAL_UART_MspDeInit+0x64>)
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	4a13      	ldr	r2, [pc, #76]	; (8001d1c <HAL_UART_MspDeInit+0x64>)
 8001cd0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001cd4:	6193      	str	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8001cd6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001cda:	4811      	ldr	r0, [pc, #68]	; (8001d20 <HAL_UART_MspDeInit+0x68>)
 8001cdc:	f001 f9d6 	bl	800308c <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8001ce0:	2025      	movs	r0, #37	; 0x25
 8001ce2:	f000 ff84 	bl	8002bee <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 8001ce6:	e012      	b.n	8001d0e <HAL_UART_MspDeInit+0x56>
  else if(huart->Instance==USART3)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a0d      	ldr	r2, [pc, #52]	; (8001d24 <HAL_UART_MspDeInit+0x6c>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d10d      	bne.n	8001d0e <HAL_UART_MspDeInit+0x56>
    __HAL_RCC_USART3_CLK_DISABLE();
 8001cf2:	4b0a      	ldr	r3, [pc, #40]	; (8001d1c <HAL_UART_MspDeInit+0x64>)
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	4a09      	ldr	r2, [pc, #36]	; (8001d1c <HAL_UART_MspDeInit+0x64>)
 8001cf8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cfc:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 8001cfe:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001d02:	4809      	ldr	r0, [pc, #36]	; (8001d28 <HAL_UART_MspDeInit+0x70>)
 8001d04:	f001 f9c2 	bl	800308c <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 8001d08:	2027      	movs	r0, #39	; 0x27
 8001d0a:	f000 ff70 	bl	8002bee <HAL_NVIC_DisableIRQ>
}
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40013800 	.word	0x40013800
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	40010800 	.word	0x40010800
 8001d24:	40004800 	.word	0x40004800
 8001d28:	40010c00 	.word	0x40010c00

08001d2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d30:	e7fe      	b.n	8001d30 <NMI_Handler+0x4>

08001d32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d32:	b480      	push	{r7}
 8001d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d36:	e7fe      	b.n	8001d36 <HardFault_Handler+0x4>

08001d38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d3c:	e7fe      	b.n	8001d3c <MemManage_Handler+0x4>

08001d3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d42:	e7fe      	b.n	8001d42 <BusFault_Handler+0x4>

08001d44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d48:	e7fe      	b.n	8001d48 <UsageFault_Handler+0x4>

08001d4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bc80      	pop	{r7}
 8001d54:	4770      	bx	lr

08001d56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d56:	b480      	push	{r7}
 8001d58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bc80      	pop	{r7}
 8001d60:	4770      	bx	lr

08001d62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d62:	b480      	push	{r7}
 8001d64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d66:	bf00      	nop
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bc80      	pop	{r7}
 8001d6c:	4770      	bx	lr

08001d6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d72:	f000 f8d3 	bl	8001f1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}
	...

08001d7c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d80:	4802      	ldr	r0, [pc, #8]	; (8001d8c <TIM3_IRQHandler+0x10>)
 8001d82:	f002 fa21 	bl	80041c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20000304 	.word	0x20000304

08001d90 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001d94:	4802      	ldr	r0, [pc, #8]	; (8001da0 <TIM4_IRQHandler+0x10>)
 8001d96:	f002 fa17 	bl	80041c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000278 	.word	0x20000278

08001da4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001da8:	4802      	ldr	r0, [pc, #8]	; (8001db4 <USART1_IRQHandler+0x10>)
 8001daa:	f003 fa21 	bl	80051f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	2000037c 	.word	0x2000037c

08001db8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001dbc:	4802      	ldr	r0, [pc, #8]	; (8001dc8 <USART3_IRQHandler+0x10>)
 8001dbe:	f003 fa17 	bl	80051f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	200002c0 	.word	0x200002c0

08001dcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dd4:	4a14      	ldr	r2, [pc, #80]	; (8001e28 <_sbrk+0x5c>)
 8001dd6:	4b15      	ldr	r3, [pc, #84]	; (8001e2c <_sbrk+0x60>)
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001de0:	4b13      	ldr	r3, [pc, #76]	; (8001e30 <_sbrk+0x64>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d102      	bne.n	8001dee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001de8:	4b11      	ldr	r3, [pc, #68]	; (8001e30 <_sbrk+0x64>)
 8001dea:	4a12      	ldr	r2, [pc, #72]	; (8001e34 <_sbrk+0x68>)
 8001dec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dee:	4b10      	ldr	r3, [pc, #64]	; (8001e30 <_sbrk+0x64>)
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4413      	add	r3, r2
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d207      	bcs.n	8001e0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dfc:	f005 fa4e 	bl	800729c <__errno>
 8001e00:	4603      	mov	r3, r0
 8001e02:	220c      	movs	r2, #12
 8001e04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e06:	f04f 33ff 	mov.w	r3, #4294967295
 8001e0a:	e009      	b.n	8001e20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e0c:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <_sbrk+0x64>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e12:	4b07      	ldr	r3, [pc, #28]	; (8001e30 <_sbrk+0x64>)
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4413      	add	r3, r2
 8001e1a:	4a05      	ldr	r2, [pc, #20]	; (8001e30 <_sbrk+0x64>)
 8001e1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3718      	adds	r7, #24
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	20005000 	.word	0x20005000
 8001e2c:	00000400 	.word	0x00000400
 8001e30:	200000a0 	.word	0x200000a0
 8001e34:	20000420 	.word	0x20000420

08001e38 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e3c:	bf00      	nop
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bc80      	pop	{r7}
 8001e42:	4770      	bx	lr

08001e44 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e44:	480c      	ldr	r0, [pc, #48]	; (8001e78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e46:	490d      	ldr	r1, [pc, #52]	; (8001e7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e48:	4a0d      	ldr	r2, [pc, #52]	; (8001e80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e4c:	e002      	b.n	8001e54 <LoopCopyDataInit>

08001e4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e52:	3304      	adds	r3, #4

08001e54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e58:	d3f9      	bcc.n	8001e4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e5a:	4a0a      	ldr	r2, [pc, #40]	; (8001e84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e5c:	4c0a      	ldr	r4, [pc, #40]	; (8001e88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e60:	e001      	b.n	8001e66 <LoopFillZerobss>

08001e62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e64:	3204      	adds	r2, #4

08001e66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e68:	d3fb      	bcc.n	8001e62 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e6a:	f7ff ffe5 	bl	8001e38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e6e:	f005 fa1b 	bl	80072a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e72:	f7ff fa09 	bl	8001288 <main>
  bx lr
 8001e76:	4770      	bx	lr
  ldr r0, =_sdata
 8001e78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e7c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001e80:	080082d4 	.word	0x080082d4
  ldr r2, =_sbss
 8001e84:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001e88:	2000041c 	.word	0x2000041c

08001e8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e8c:	e7fe      	b.n	8001e8c <ADC1_2_IRQHandler>
	...

08001e90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e94:	4b08      	ldr	r3, [pc, #32]	; (8001eb8 <HAL_Init+0x28>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a07      	ldr	r2, [pc, #28]	; (8001eb8 <HAL_Init+0x28>)
 8001e9a:	f043 0310 	orr.w	r3, r3, #16
 8001e9e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ea0:	2003      	movs	r0, #3
 8001ea2:	f000 fe6f 	bl	8002b84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ea6:	2000      	movs	r0, #0
 8001ea8:	f000 f808 	bl	8001ebc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001eac:	f7ff fd3a 	bl	8001924 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40022000 	.word	0x40022000

08001ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ec4:	4b12      	ldr	r3, [pc, #72]	; (8001f10 <HAL_InitTick+0x54>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	4b12      	ldr	r3, [pc, #72]	; (8001f14 <HAL_InitTick+0x58>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	4619      	mov	r1, r3
 8001ece:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ed2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eda:	4618      	mov	r0, r3
 8001edc:	f000 fe95 	bl	8002c0a <HAL_SYSTICK_Config>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e00e      	b.n	8001f08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2b0f      	cmp	r3, #15
 8001eee:	d80a      	bhi.n	8001f06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	6879      	ldr	r1, [r7, #4]
 8001ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef8:	f000 fe4f 	bl	8002b9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001efc:	4a06      	ldr	r2, [pc, #24]	; (8001f18 <HAL_InitTick+0x5c>)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f02:	2300      	movs	r3, #0
 8001f04:	e000      	b.n	8001f08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	20000008 	.word	0x20000008
 8001f14:	20000010 	.word	0x20000010
 8001f18:	2000000c 	.word	0x2000000c

08001f1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f20:	4b05      	ldr	r3, [pc, #20]	; (8001f38 <HAL_IncTick+0x1c>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	461a      	mov	r2, r3
 8001f26:	4b05      	ldr	r3, [pc, #20]	; (8001f3c <HAL_IncTick+0x20>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	4a03      	ldr	r2, [pc, #12]	; (8001f3c <HAL_IncTick+0x20>)
 8001f2e:	6013      	str	r3, [r2, #0]
}
 8001f30:	bf00      	nop
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr
 8001f38:	20000010 	.word	0x20000010
 8001f3c:	20000408 	.word	0x20000408

08001f40 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  return uwTick;
 8001f44:	4b02      	ldr	r3, [pc, #8]	; (8001f50 <HAL_GetTick+0x10>)
 8001f46:	681b      	ldr	r3, [r3, #0]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bc80      	pop	{r7}
 8001f4e:	4770      	bx	lr
 8001f50:	20000408 	.word	0x20000408

08001f54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f5c:	f7ff fff0 	bl	8001f40 <HAL_GetTick>
 8001f60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f6c:	d005      	beq.n	8001f7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f6e:	4b0a      	ldr	r3, [pc, #40]	; (8001f98 <HAL_Delay+0x44>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	461a      	mov	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4413      	add	r3, r2
 8001f78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f7a:	bf00      	nop
 8001f7c:	f7ff ffe0 	bl	8001f40 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d8f7      	bhi.n	8001f7c <HAL_Delay+0x28>
  {
  }
}
 8001f8c:	bf00      	nop
 8001f8e:	bf00      	nop
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20000010 	.word	0x20000010

08001f9c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001fac:	2300      	movs	r3, #0
 8001fae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e0be      	b.n	800213c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d109      	bne.n	8001fe0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7ff fcd4 	bl	8001988 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 fbf1 	bl	80027c8 <ADC_ConversionStop_Disable>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fee:	f003 0310 	and.w	r3, r3, #16
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f040 8099 	bne.w	800212a <HAL_ADC_Init+0x18e>
 8001ff8:	7dfb      	ldrb	r3, [r7, #23]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f040 8095 	bne.w	800212a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002004:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002008:	f023 0302 	bic.w	r3, r3, #2
 800200c:	f043 0202 	orr.w	r2, r3, #2
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800201c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	7b1b      	ldrb	r3, [r3, #12]
 8002022:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002024:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002026:	68ba      	ldr	r2, [r7, #8]
 8002028:	4313      	orrs	r3, r2
 800202a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002034:	d003      	beq.n	800203e <HAL_ADC_Init+0xa2>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d102      	bne.n	8002044 <HAL_ADC_Init+0xa8>
 800203e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002042:	e000      	b.n	8002046 <HAL_ADC_Init+0xaa>
 8002044:	2300      	movs	r3, #0
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	4313      	orrs	r3, r2
 800204a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	7d1b      	ldrb	r3, [r3, #20]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d119      	bne.n	8002088 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	7b1b      	ldrb	r3, [r3, #12]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d109      	bne.n	8002070 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	3b01      	subs	r3, #1
 8002062:	035a      	lsls	r2, r3, #13
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	4313      	orrs	r3, r2
 8002068:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800206c:	613b      	str	r3, [r7, #16]
 800206e:	e00b      	b.n	8002088 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002074:	f043 0220 	orr.w	r2, r3, #32
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002080:	f043 0201 	orr.w	r2, r3, #1
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	430a      	orrs	r2, r1
 800209a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	689a      	ldr	r2, [r3, #8]
 80020a2:	4b28      	ldr	r3, [pc, #160]	; (8002144 <HAL_ADC_Init+0x1a8>)
 80020a4:	4013      	ands	r3, r2
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	6812      	ldr	r2, [r2, #0]
 80020aa:	68b9      	ldr	r1, [r7, #8]
 80020ac:	430b      	orrs	r3, r1
 80020ae:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020b8:	d003      	beq.n	80020c2 <HAL_ADC_Init+0x126>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d104      	bne.n	80020cc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	3b01      	subs	r3, #1
 80020c8:	051b      	lsls	r3, r3, #20
 80020ca:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	430a      	orrs	r2, r1
 80020de:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	689a      	ldr	r2, [r3, #8]
 80020e6:	4b18      	ldr	r3, [pc, #96]	; (8002148 <HAL_ADC_Init+0x1ac>)
 80020e8:	4013      	ands	r3, r2
 80020ea:	68ba      	ldr	r2, [r7, #8]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d10b      	bne.n	8002108 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fa:	f023 0303 	bic.w	r3, r3, #3
 80020fe:	f043 0201 	orr.w	r2, r3, #1
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002106:	e018      	b.n	800213a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210c:	f023 0312 	bic.w	r3, r3, #18
 8002110:	f043 0210 	orr.w	r2, r3, #16
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211c:	f043 0201 	orr.w	r2, r3, #1
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002128:	e007      	b.n	800213a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212e:	f043 0210 	orr.w	r2, r3, #16
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800213a:	7dfb      	ldrb	r3, [r7, #23]
}
 800213c:	4618      	mov	r0, r3
 800213e:	3718      	adds	r7, #24
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	ffe1f7fd 	.word	0xffe1f7fd
 8002148:	ff1f0efe 	.word	0xff1f0efe

0800214c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002154:	2300      	movs	r3, #0
 8002156:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800215e:	2b01      	cmp	r3, #1
 8002160:	d101      	bne.n	8002166 <HAL_ADC_Start+0x1a>
 8002162:	2302      	movs	r3, #2
 8002164:	e098      	b.n	8002298 <HAL_ADC_Start+0x14c>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2201      	movs	r2, #1
 800216a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 fad0 	bl	8002714 <ADC_Enable>
 8002174:	4603      	mov	r3, r0
 8002176:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002178:	7bfb      	ldrb	r3, [r7, #15]
 800217a:	2b00      	cmp	r3, #0
 800217c:	f040 8087 	bne.w	800228e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002184:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002188:	f023 0301 	bic.w	r3, r3, #1
 800218c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a41      	ldr	r2, [pc, #260]	; (80022a0 <HAL_ADC_Start+0x154>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d105      	bne.n	80021aa <HAL_ADC_Start+0x5e>
 800219e:	4b41      	ldr	r3, [pc, #260]	; (80022a4 <HAL_ADC_Start+0x158>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d115      	bne.n	80021d6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d026      	beq.n	8002212 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80021cc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80021d4:	e01d      	b.n	8002212 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a2f      	ldr	r2, [pc, #188]	; (80022a4 <HAL_ADC_Start+0x158>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d004      	beq.n	80021f6 <HAL_ADC_Start+0xaa>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a2b      	ldr	r2, [pc, #172]	; (80022a0 <HAL_ADC_Start+0x154>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d10d      	bne.n	8002212 <HAL_ADC_Start+0xc6>
 80021f6:	4b2b      	ldr	r3, [pc, #172]	; (80022a4 <HAL_ADC_Start+0x158>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d007      	beq.n	8002212 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002206:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800220a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002216:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d006      	beq.n	800222c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002222:	f023 0206 	bic.w	r2, r3, #6
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	62da      	str	r2, [r3, #44]	; 0x2c
 800222a:	e002      	b.n	8002232 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f06f 0202 	mvn.w	r2, #2
 8002242:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800224e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002252:	d113      	bne.n	800227c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002258:	4a11      	ldr	r2, [pc, #68]	; (80022a0 <HAL_ADC_Start+0x154>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d105      	bne.n	800226a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800225e:	4b11      	ldr	r3, [pc, #68]	; (80022a4 <HAL_ADC_Start+0x158>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002266:	2b00      	cmp	r3, #0
 8002268:	d108      	bne.n	800227c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002278:	609a      	str	r2, [r3, #8]
 800227a:	e00c      	b.n	8002296 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	689a      	ldr	r2, [r3, #8]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800228a:	609a      	str	r2, [r3, #8]
 800228c:	e003      	b.n	8002296 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002296:	7bfb      	ldrb	r3, [r7, #15]
}
 8002298:	4618      	mov	r0, r3
 800229a:	3710      	adds	r7, #16
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40012800 	.word	0x40012800
 80022a4:	40012400 	.word	0x40012400

080022a8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022b0:	2300      	movs	r3, #0
 80022b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d101      	bne.n	80022c2 <HAL_ADC_Stop+0x1a>
 80022be:	2302      	movs	r3, #2
 80022c0:	e01a      	b.n	80022f8 <HAL_ADC_Stop+0x50>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2201      	movs	r2, #1
 80022c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 fa7c 	bl	80027c8 <ADC_ConversionStop_Disable>
 80022d0:	4603      	mov	r3, r0
 80022d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80022d4:	7bfb      	ldrb	r3, [r7, #15]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d109      	bne.n	80022ee <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022de:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022e2:	f023 0301 	bic.w	r3, r3, #1
 80022e6:	f043 0201 	orr.w	r2, r3, #1
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3710      	adds	r7, #16
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002300:	b590      	push	{r4, r7, lr}
 8002302:	b087      	sub	sp, #28
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800230a:	2300      	movs	r3, #0
 800230c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800230e:	2300      	movs	r3, #0
 8002310:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002312:	2300      	movs	r3, #0
 8002314:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002316:	f7ff fe13 	bl	8001f40 <HAL_GetTick>
 800231a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002326:	2b00      	cmp	r3, #0
 8002328:	d00b      	beq.n	8002342 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800232e:	f043 0220 	orr.w	r2, r3, #32
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e0d3      	b.n	80024ea <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800234c:	2b00      	cmp	r3, #0
 800234e:	d131      	bne.n	80023b4 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002356:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800235a:	2b00      	cmp	r3, #0
 800235c:	d12a      	bne.n	80023b4 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800235e:	e021      	b.n	80023a4 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002366:	d01d      	beq.n	80023a4 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d007      	beq.n	800237e <HAL_ADC_PollForConversion+0x7e>
 800236e:	f7ff fde7 	bl	8001f40 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	429a      	cmp	r2, r3
 800237c:	d212      	bcs.n	80023a4 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d10b      	bne.n	80023a4 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002390:	f043 0204 	orr.w	r2, r3, #4
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e0a2      	b.n	80024ea <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d0d6      	beq.n	8002360 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80023b2:	e070      	b.n	8002496 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80023b4:	4b4f      	ldr	r3, [pc, #316]	; (80024f4 <HAL_ADC_PollForConversion+0x1f4>)
 80023b6:	681c      	ldr	r4, [r3, #0]
 80023b8:	2002      	movs	r0, #2
 80023ba:	f001 fc23 	bl	8003c04 <HAL_RCCEx_GetPeriphCLKFreq>
 80023be:	4603      	mov	r3, r0
 80023c0:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6919      	ldr	r1, [r3, #16]
 80023ca:	4b4b      	ldr	r3, [pc, #300]	; (80024f8 <HAL_ADC_PollForConversion+0x1f8>)
 80023cc:	400b      	ands	r3, r1
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d118      	bne.n	8002404 <HAL_ADC_PollForConversion+0x104>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68d9      	ldr	r1, [r3, #12]
 80023d8:	4b48      	ldr	r3, [pc, #288]	; (80024fc <HAL_ADC_PollForConversion+0x1fc>)
 80023da:	400b      	ands	r3, r1
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d111      	bne.n	8002404 <HAL_ADC_PollForConversion+0x104>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6919      	ldr	r1, [r3, #16]
 80023e6:	4b46      	ldr	r3, [pc, #280]	; (8002500 <HAL_ADC_PollForConversion+0x200>)
 80023e8:	400b      	ands	r3, r1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d108      	bne.n	8002400 <HAL_ADC_PollForConversion+0x100>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68d9      	ldr	r1, [r3, #12]
 80023f4:	4b43      	ldr	r3, [pc, #268]	; (8002504 <HAL_ADC_PollForConversion+0x204>)
 80023f6:	400b      	ands	r3, r1
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d101      	bne.n	8002400 <HAL_ADC_PollForConversion+0x100>
 80023fc:	2314      	movs	r3, #20
 80023fe:	e020      	b.n	8002442 <HAL_ADC_PollForConversion+0x142>
 8002400:	2329      	movs	r3, #41	; 0x29
 8002402:	e01e      	b.n	8002442 <HAL_ADC_PollForConversion+0x142>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6919      	ldr	r1, [r3, #16]
 800240a:	4b3d      	ldr	r3, [pc, #244]	; (8002500 <HAL_ADC_PollForConversion+0x200>)
 800240c:	400b      	ands	r3, r1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d106      	bne.n	8002420 <HAL_ADC_PollForConversion+0x120>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68d9      	ldr	r1, [r3, #12]
 8002418:	4b3a      	ldr	r3, [pc, #232]	; (8002504 <HAL_ADC_PollForConversion+0x204>)
 800241a:	400b      	ands	r3, r1
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00d      	beq.n	800243c <HAL_ADC_PollForConversion+0x13c>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6919      	ldr	r1, [r3, #16]
 8002426:	4b38      	ldr	r3, [pc, #224]	; (8002508 <HAL_ADC_PollForConversion+0x208>)
 8002428:	400b      	ands	r3, r1
 800242a:	2b00      	cmp	r3, #0
 800242c:	d108      	bne.n	8002440 <HAL_ADC_PollForConversion+0x140>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68d9      	ldr	r1, [r3, #12]
 8002434:	4b34      	ldr	r3, [pc, #208]	; (8002508 <HAL_ADC_PollForConversion+0x208>)
 8002436:	400b      	ands	r3, r1
 8002438:	2b00      	cmp	r3, #0
 800243a:	d101      	bne.n	8002440 <HAL_ADC_PollForConversion+0x140>
 800243c:	2354      	movs	r3, #84	; 0x54
 800243e:	e000      	b.n	8002442 <HAL_ADC_PollForConversion+0x142>
 8002440:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002442:	fb02 f303 	mul.w	r3, r2, r3
 8002446:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002448:	e021      	b.n	800248e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002450:	d01a      	beq.n	8002488 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d007      	beq.n	8002468 <HAL_ADC_PollForConversion+0x168>
 8002458:	f7ff fd72 	bl	8001f40 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	429a      	cmp	r2, r3
 8002466:	d20f      	bcs.n	8002488 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	429a      	cmp	r2, r3
 800246e:	d90b      	bls.n	8002488 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002474:	f043 0204 	orr.w	r2, r3, #4
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e030      	b.n	80024ea <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	3301      	adds	r3, #1
 800248c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	429a      	cmp	r2, r3
 8002494:	d8d9      	bhi.n	800244a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f06f 0212 	mvn.w	r2, #18
 800249e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80024b6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80024ba:	d115      	bne.n	80024e8 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d111      	bne.n	80024e8 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d105      	bne.n	80024e8 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e0:	f043 0201 	orr.w	r2, r3, #1
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	371c      	adds	r7, #28
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd90      	pop	{r4, r7, pc}
 80024f2:	bf00      	nop
 80024f4:	20000008 	.word	0x20000008
 80024f8:	24924924 	.word	0x24924924
 80024fc:	00924924 	.word	0x00924924
 8002500:	12492492 	.word	0x12492492
 8002504:	00492492 	.word	0x00492492
 8002508:	00249249 	.word	0x00249249

0800250c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800251a:	4618      	mov	r0, r3
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	bc80      	pop	{r7}
 8002522:	4770      	bx	lr

08002524 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800252e:	2300      	movs	r3, #0
 8002530:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002532:	2300      	movs	r3, #0
 8002534:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800253c:	2b01      	cmp	r3, #1
 800253e:	d101      	bne.n	8002544 <HAL_ADC_ConfigChannel+0x20>
 8002540:	2302      	movs	r3, #2
 8002542:	e0dc      	b.n	80026fe <HAL_ADC_ConfigChannel+0x1da>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	2b06      	cmp	r3, #6
 8002552:	d81c      	bhi.n	800258e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685a      	ldr	r2, [r3, #4]
 800255e:	4613      	mov	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	4413      	add	r3, r2
 8002564:	3b05      	subs	r3, #5
 8002566:	221f      	movs	r2, #31
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	43db      	mvns	r3, r3
 800256e:	4019      	ands	r1, r3
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	6818      	ldr	r0, [r3, #0]
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685a      	ldr	r2, [r3, #4]
 8002578:	4613      	mov	r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	4413      	add	r3, r2
 800257e:	3b05      	subs	r3, #5
 8002580:	fa00 f203 	lsl.w	r2, r0, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	430a      	orrs	r2, r1
 800258a:	635a      	str	r2, [r3, #52]	; 0x34
 800258c:	e03c      	b.n	8002608 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	2b0c      	cmp	r3, #12
 8002594:	d81c      	bhi.n	80025d0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	4613      	mov	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4413      	add	r3, r2
 80025a6:	3b23      	subs	r3, #35	; 0x23
 80025a8:	221f      	movs	r2, #31
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	43db      	mvns	r3, r3
 80025b0:	4019      	ands	r1, r3
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	6818      	ldr	r0, [r3, #0]
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685a      	ldr	r2, [r3, #4]
 80025ba:	4613      	mov	r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	4413      	add	r3, r2
 80025c0:	3b23      	subs	r3, #35	; 0x23
 80025c2:	fa00 f203 	lsl.w	r2, r0, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	631a      	str	r2, [r3, #48]	; 0x30
 80025ce:	e01b      	b.n	8002608 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	4613      	mov	r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	4413      	add	r3, r2
 80025e0:	3b41      	subs	r3, #65	; 0x41
 80025e2:	221f      	movs	r2, #31
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	43db      	mvns	r3, r3
 80025ea:	4019      	ands	r1, r3
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	6818      	ldr	r0, [r3, #0]
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685a      	ldr	r2, [r3, #4]
 80025f4:	4613      	mov	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4413      	add	r3, r2
 80025fa:	3b41      	subs	r3, #65	; 0x41
 80025fc:	fa00 f203 	lsl.w	r2, r0, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	430a      	orrs	r2, r1
 8002606:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2b09      	cmp	r3, #9
 800260e:	d91c      	bls.n	800264a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68d9      	ldr	r1, [r3, #12]
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	4613      	mov	r3, r2
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	4413      	add	r3, r2
 8002620:	3b1e      	subs	r3, #30
 8002622:	2207      	movs	r2, #7
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	43db      	mvns	r3, r3
 800262a:	4019      	ands	r1, r3
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	6898      	ldr	r0, [r3, #8]
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	4613      	mov	r3, r2
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	4413      	add	r3, r2
 800263a:	3b1e      	subs	r3, #30
 800263c:	fa00 f203 	lsl.w	r2, r0, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	430a      	orrs	r2, r1
 8002646:	60da      	str	r2, [r3, #12]
 8002648:	e019      	b.n	800267e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	6919      	ldr	r1, [r3, #16]
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	4613      	mov	r3, r2
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	4413      	add	r3, r2
 800265a:	2207      	movs	r2, #7
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	43db      	mvns	r3, r3
 8002662:	4019      	ands	r1, r3
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	6898      	ldr	r0, [r3, #8]
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	4613      	mov	r3, r2
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	4413      	add	r3, r2
 8002672:	fa00 f203 	lsl.w	r2, r0, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	430a      	orrs	r2, r1
 800267c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2b10      	cmp	r3, #16
 8002684:	d003      	beq.n	800268e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800268a:	2b11      	cmp	r3, #17
 800268c:	d132      	bne.n	80026f4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a1d      	ldr	r2, [pc, #116]	; (8002708 <HAL_ADC_ConfigChannel+0x1e4>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d125      	bne.n	80026e4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d126      	bne.n	80026f4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80026b4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2b10      	cmp	r3, #16
 80026bc:	d11a      	bne.n	80026f4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026be:	4b13      	ldr	r3, [pc, #76]	; (800270c <HAL_ADC_ConfigChannel+0x1e8>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a13      	ldr	r2, [pc, #76]	; (8002710 <HAL_ADC_ConfigChannel+0x1ec>)
 80026c4:	fba2 2303 	umull	r2, r3, r2, r3
 80026c8:	0c9a      	lsrs	r2, r3, #18
 80026ca:	4613      	mov	r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	4413      	add	r3, r2
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026d4:	e002      	b.n	80026dc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	3b01      	subs	r3, #1
 80026da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1f9      	bne.n	80026d6 <HAL_ADC_ConfigChannel+0x1b2>
 80026e2:	e007      	b.n	80026f4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e8:	f043 0220 	orr.w	r2, r3, #32
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80026fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3714      	adds	r7, #20
 8002702:	46bd      	mov	sp, r7
 8002704:	bc80      	pop	{r7}
 8002706:	4770      	bx	lr
 8002708:	40012400 	.word	0x40012400
 800270c:	20000008 	.word	0x20000008
 8002710:	431bde83 	.word	0x431bde83

08002714 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800271c:	2300      	movs	r3, #0
 800271e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002720:	2300      	movs	r3, #0
 8002722:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b01      	cmp	r3, #1
 8002730:	d040      	beq.n	80027b4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689a      	ldr	r2, [r3, #8]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f042 0201 	orr.w	r2, r2, #1
 8002740:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002742:	4b1f      	ldr	r3, [pc, #124]	; (80027c0 <ADC_Enable+0xac>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a1f      	ldr	r2, [pc, #124]	; (80027c4 <ADC_Enable+0xb0>)
 8002748:	fba2 2303 	umull	r2, r3, r2, r3
 800274c:	0c9b      	lsrs	r3, r3, #18
 800274e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002750:	e002      	b.n	8002758 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	3b01      	subs	r3, #1
 8002756:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1f9      	bne.n	8002752 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800275e:	f7ff fbef 	bl	8001f40 <HAL_GetTick>
 8002762:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002764:	e01f      	b.n	80027a6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002766:	f7ff fbeb 	bl	8001f40 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d918      	bls.n	80027a6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b01      	cmp	r3, #1
 8002780:	d011      	beq.n	80027a6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002786:	f043 0210 	orr.w	r2, r3, #16
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002792:	f043 0201 	orr.w	r2, r3, #1
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e007      	b.n	80027b6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f003 0301 	and.w	r3, r3, #1
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d1d8      	bne.n	8002766 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	20000008 	.word	0x20000008
 80027c4:	431bde83 	.word	0x431bde83

080027c8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027d0:	2300      	movs	r3, #0
 80027d2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d12e      	bne.n	8002840 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 0201 	bic.w	r2, r2, #1
 80027f0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80027f2:	f7ff fba5 	bl	8001f40 <HAL_GetTick>
 80027f6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80027f8:	e01b      	b.n	8002832 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80027fa:	f7ff fba1 	bl	8001f40 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d914      	bls.n	8002832 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b01      	cmp	r3, #1
 8002814:	d10d      	bne.n	8002832 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281a:	f043 0210 	orr.w	r2, r3, #16
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002826:	f043 0201 	orr.w	r2, r3, #1
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e007      	b.n	8002842 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	2b01      	cmp	r3, #1
 800283e:	d0dc      	beq.n	80027fa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3710      	adds	r7, #16
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
	...

0800284c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 800284c:	b590      	push	{r4, r7, lr}
 800284e:	b087      	sub	sp, #28
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002854:	2300      	movs	r3, #0
 8002856:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002858:	2300      	movs	r3, #0
 800285a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002862:	2b01      	cmp	r3, #1
 8002864:	d101      	bne.n	800286a <HAL_ADCEx_Calibration_Start+0x1e>
 8002866:	2302      	movs	r3, #2
 8002868:	e095      	b.n	8002996 <HAL_ADCEx_Calibration_Start+0x14a>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f7ff ffa8 	bl	80027c8 <ADC_ConversionStop_Disable>
 8002878:	4603      	mov	r3, r0
 800287a:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800287c:	7dfb      	ldrb	r3, [r7, #23]
 800287e:	2b00      	cmp	r3, #0
 8002880:	f040 8084 	bne.w	800298c <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002888:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800288c:	f023 0302 	bic.w	r3, r3, #2
 8002890:	f043 0202 	orr.w	r2, r3, #2
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002898:	4b41      	ldr	r3, [pc, #260]	; (80029a0 <HAL_ADCEx_Calibration_Start+0x154>)
 800289a:	681c      	ldr	r4, [r3, #0]
 800289c:	2002      	movs	r0, #2
 800289e:	f001 f9b1 	bl	8003c04 <HAL_RCCEx_GetPeriphCLKFreq>
 80028a2:	4603      	mov	r3, r0
 80028a4:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80028a8:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80028aa:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80028ac:	e002      	b.n	80028b4 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	3b01      	subs	r3, #1
 80028b2:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1f9      	bne.n	80028ae <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f7ff ff2a 	bl	8002714 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689a      	ldr	r2, [r3, #8]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f042 0208 	orr.w	r2, r2, #8
 80028ce:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80028d0:	f7ff fb36 	bl	8001f40 <HAL_GetTick>
 80028d4:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80028d6:	e01b      	b.n	8002910 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80028d8:	f7ff fb32 	bl	8001f40 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b0a      	cmp	r3, #10
 80028e4:	d914      	bls.n	8002910 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f003 0308 	and.w	r3, r3, #8
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d00d      	beq.n	8002910 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f8:	f023 0312 	bic.w	r3, r3, #18
 80028fc:	f043 0210 	orr.w	r2, r3, #16
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e042      	b.n	8002996 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f003 0308 	and.w	r3, r3, #8
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1dc      	bne.n	80028d8 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f042 0204 	orr.w	r2, r2, #4
 800292c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800292e:	f7ff fb07 	bl	8001f40 <HAL_GetTick>
 8002932:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002934:	e01b      	b.n	800296e <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002936:	f7ff fb03 	bl	8001f40 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b0a      	cmp	r3, #10
 8002942:	d914      	bls.n	800296e <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 0304 	and.w	r3, r3, #4
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00d      	beq.n	800296e <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002956:	f023 0312 	bic.w	r3, r3, #18
 800295a:	f043 0210 	orr.w	r2, r3, #16
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e013      	b.n	8002996 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1dc      	bne.n	8002936 <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002980:	f023 0303 	bic.w	r3, r3, #3
 8002984:	f043 0201 	orr.w	r2, r3, #1
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002994:	7dfb      	ldrb	r3, [r7, #23]
}
 8002996:	4618      	mov	r0, r3
 8002998:	371c      	adds	r7, #28
 800299a:	46bd      	mov	sp, r7
 800299c:	bd90      	pop	{r4, r7, pc}
 800299e:	bf00      	nop
 80029a0:	20000008 	.word	0x20000008

080029a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f003 0307 	and.w	r3, r3, #7
 80029b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029b4:	4b0c      	ldr	r3, [pc, #48]	; (80029e8 <__NVIC_SetPriorityGrouping+0x44>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029ba:	68ba      	ldr	r2, [r7, #8]
 80029bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029c0:	4013      	ands	r3, r2
 80029c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029d6:	4a04      	ldr	r2, [pc, #16]	; (80029e8 <__NVIC_SetPriorityGrouping+0x44>)
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	60d3      	str	r3, [r2, #12]
}
 80029dc:	bf00      	nop
 80029de:	3714      	adds	r7, #20
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bc80      	pop	{r7}
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	e000ed00 	.word	0xe000ed00

080029ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029f0:	4b04      	ldr	r3, [pc, #16]	; (8002a04 <__NVIC_GetPriorityGrouping+0x18>)
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	0a1b      	lsrs	r3, r3, #8
 80029f6:	f003 0307 	and.w	r3, r3, #7
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bc80      	pop	{r7}
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	e000ed00 	.word	0xe000ed00

08002a08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	4603      	mov	r3, r0
 8002a10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	db0b      	blt.n	8002a32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a1a:	79fb      	ldrb	r3, [r7, #7]
 8002a1c:	f003 021f 	and.w	r2, r3, #31
 8002a20:	4906      	ldr	r1, [pc, #24]	; (8002a3c <__NVIC_EnableIRQ+0x34>)
 8002a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a26:	095b      	lsrs	r3, r3, #5
 8002a28:	2001      	movs	r0, #1
 8002a2a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bc80      	pop	{r7}
 8002a3a:	4770      	bx	lr
 8002a3c:	e000e100 	.word	0xe000e100

08002a40 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	4603      	mov	r3, r0
 8002a48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	db12      	blt.n	8002a78 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a52:	79fb      	ldrb	r3, [r7, #7]
 8002a54:	f003 021f 	and.w	r2, r3, #31
 8002a58:	490a      	ldr	r1, [pc, #40]	; (8002a84 <__NVIC_DisableIRQ+0x44>)
 8002a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5e:	095b      	lsrs	r3, r3, #5
 8002a60:	2001      	movs	r0, #1
 8002a62:	fa00 f202 	lsl.w	r2, r0, r2
 8002a66:	3320      	adds	r3, #32
 8002a68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002a6c:	f3bf 8f4f 	dsb	sy
}
 8002a70:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002a72:	f3bf 8f6f 	isb	sy
}
 8002a76:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bc80      	pop	{r7}
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	e000e100 	.word	0xe000e100

08002a88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	4603      	mov	r3, r0
 8002a90:	6039      	str	r1, [r7, #0]
 8002a92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	db0a      	blt.n	8002ab2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	b2da      	uxtb	r2, r3
 8002aa0:	490c      	ldr	r1, [pc, #48]	; (8002ad4 <__NVIC_SetPriority+0x4c>)
 8002aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa6:	0112      	lsls	r2, r2, #4
 8002aa8:	b2d2      	uxtb	r2, r2
 8002aaa:	440b      	add	r3, r1
 8002aac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ab0:	e00a      	b.n	8002ac8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	b2da      	uxtb	r2, r3
 8002ab6:	4908      	ldr	r1, [pc, #32]	; (8002ad8 <__NVIC_SetPriority+0x50>)
 8002ab8:	79fb      	ldrb	r3, [r7, #7]
 8002aba:	f003 030f 	and.w	r3, r3, #15
 8002abe:	3b04      	subs	r3, #4
 8002ac0:	0112      	lsls	r2, r2, #4
 8002ac2:	b2d2      	uxtb	r2, r2
 8002ac4:	440b      	add	r3, r1
 8002ac6:	761a      	strb	r2, [r3, #24]
}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bc80      	pop	{r7}
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	e000e100 	.word	0xe000e100
 8002ad8:	e000ed00 	.word	0xe000ed00

08002adc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b089      	sub	sp, #36	; 0x24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f003 0307 	and.w	r3, r3, #7
 8002aee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	f1c3 0307 	rsb	r3, r3, #7
 8002af6:	2b04      	cmp	r3, #4
 8002af8:	bf28      	it	cs
 8002afa:	2304      	movcs	r3, #4
 8002afc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	3304      	adds	r3, #4
 8002b02:	2b06      	cmp	r3, #6
 8002b04:	d902      	bls.n	8002b0c <NVIC_EncodePriority+0x30>
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	3b03      	subs	r3, #3
 8002b0a:	e000      	b.n	8002b0e <NVIC_EncodePriority+0x32>
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b10:	f04f 32ff 	mov.w	r2, #4294967295
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	43da      	mvns	r2, r3
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	401a      	ands	r2, r3
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b24:	f04f 31ff 	mov.w	r1, #4294967295
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b2e:	43d9      	mvns	r1, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b34:	4313      	orrs	r3, r2
         );
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3724      	adds	r7, #36	; 0x24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bc80      	pop	{r7}
 8002b3e:	4770      	bx	lr

08002b40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b50:	d301      	bcc.n	8002b56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b52:	2301      	movs	r3, #1
 8002b54:	e00f      	b.n	8002b76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b56:	4a0a      	ldr	r2, [pc, #40]	; (8002b80 <SysTick_Config+0x40>)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b5e:	210f      	movs	r1, #15
 8002b60:	f04f 30ff 	mov.w	r0, #4294967295
 8002b64:	f7ff ff90 	bl	8002a88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b68:	4b05      	ldr	r3, [pc, #20]	; (8002b80 <SysTick_Config+0x40>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b6e:	4b04      	ldr	r3, [pc, #16]	; (8002b80 <SysTick_Config+0x40>)
 8002b70:	2207      	movs	r2, #7
 8002b72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	e000e010 	.word	0xe000e010

08002b84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f7ff ff09 	bl	80029a4 <__NVIC_SetPriorityGrouping>
}
 8002b92:	bf00      	nop
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b086      	sub	sp, #24
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	60b9      	str	r1, [r7, #8]
 8002ba4:	607a      	str	r2, [r7, #4]
 8002ba6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bac:	f7ff ff1e 	bl	80029ec <__NVIC_GetPriorityGrouping>
 8002bb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	68b9      	ldr	r1, [r7, #8]
 8002bb6:	6978      	ldr	r0, [r7, #20]
 8002bb8:	f7ff ff90 	bl	8002adc <NVIC_EncodePriority>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bc2:	4611      	mov	r1, r2
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff ff5f 	bl	8002a88 <__NVIC_SetPriority>
}
 8002bca:	bf00      	nop
 8002bcc:	3718      	adds	r7, #24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b082      	sub	sp, #8
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	4603      	mov	r3, r0
 8002bda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff ff11 	bl	8002a08 <__NVIC_EnableIRQ>
}
 8002be6:	bf00      	nop
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b082      	sub	sp, #8
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7ff ff1f 	bl	8002a40 <__NVIC_DisableIRQ>
}
 8002c02:	bf00      	nop
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b082      	sub	sp, #8
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f7ff ff94 	bl	8002b40 <SysTick_Config>
 8002c18:	4603      	mov	r3, r0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c22:	b480      	push	{r7}
 8002c24:	b085      	sub	sp, #20
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d008      	beq.n	8002c4a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2204      	movs	r2, #4
 8002c3c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e020      	b.n	8002c8c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f022 020e 	bic.w	r2, r2, #14
 8002c58:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 0201 	bic.w	r2, r2, #1
 8002c68:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c72:	2101      	movs	r1, #1
 8002c74:	fa01 f202 	lsl.w	r2, r1, r2
 8002c78:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3714      	adds	r7, #20
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bc80      	pop	{r7}
 8002c94:	4770      	bx	lr
	...

08002c98 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d005      	beq.n	8002cba <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2204      	movs	r2, #4
 8002cb2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	73fb      	strb	r3, [r7, #15]
 8002cb8:	e051      	b.n	8002d5e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f022 020e 	bic.w	r2, r2, #14
 8002cc8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f022 0201 	bic.w	r2, r2, #1
 8002cd8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a22      	ldr	r2, [pc, #136]	; (8002d68 <HAL_DMA_Abort_IT+0xd0>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d029      	beq.n	8002d38 <HAL_DMA_Abort_IT+0xa0>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a20      	ldr	r2, [pc, #128]	; (8002d6c <HAL_DMA_Abort_IT+0xd4>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d022      	beq.n	8002d34 <HAL_DMA_Abort_IT+0x9c>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a1f      	ldr	r2, [pc, #124]	; (8002d70 <HAL_DMA_Abort_IT+0xd8>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d01a      	beq.n	8002d2e <HAL_DMA_Abort_IT+0x96>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a1d      	ldr	r2, [pc, #116]	; (8002d74 <HAL_DMA_Abort_IT+0xdc>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d012      	beq.n	8002d28 <HAL_DMA_Abort_IT+0x90>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a1c      	ldr	r2, [pc, #112]	; (8002d78 <HAL_DMA_Abort_IT+0xe0>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d00a      	beq.n	8002d22 <HAL_DMA_Abort_IT+0x8a>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a1a      	ldr	r2, [pc, #104]	; (8002d7c <HAL_DMA_Abort_IT+0xe4>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d102      	bne.n	8002d1c <HAL_DMA_Abort_IT+0x84>
 8002d16:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002d1a:	e00e      	b.n	8002d3a <HAL_DMA_Abort_IT+0xa2>
 8002d1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d20:	e00b      	b.n	8002d3a <HAL_DMA_Abort_IT+0xa2>
 8002d22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d26:	e008      	b.n	8002d3a <HAL_DMA_Abort_IT+0xa2>
 8002d28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d2c:	e005      	b.n	8002d3a <HAL_DMA_Abort_IT+0xa2>
 8002d2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d32:	e002      	b.n	8002d3a <HAL_DMA_Abort_IT+0xa2>
 8002d34:	2310      	movs	r3, #16
 8002d36:	e000      	b.n	8002d3a <HAL_DMA_Abort_IT+0xa2>
 8002d38:	2301      	movs	r3, #1
 8002d3a:	4a11      	ldr	r2, [pc, #68]	; (8002d80 <HAL_DMA_Abort_IT+0xe8>)
 8002d3c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	4798      	blx	r3
    } 
  }
  return status;
 8002d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3710      	adds	r7, #16
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40020008 	.word	0x40020008
 8002d6c:	4002001c 	.word	0x4002001c
 8002d70:	40020030 	.word	0x40020030
 8002d74:	40020044 	.word	0x40020044
 8002d78:	40020058 	.word	0x40020058
 8002d7c:	4002006c 	.word	0x4002006c
 8002d80:	40020000 	.word	0x40020000

08002d84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b08b      	sub	sp, #44	; 0x2c
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d92:	2300      	movs	r3, #0
 8002d94:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d96:	e169      	b.n	800306c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002d98:	2201      	movs	r2, #1
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	69fa      	ldr	r2, [r7, #28]
 8002da8:	4013      	ands	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	f040 8158 	bne.w	8003066 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	4a9a      	ldr	r2, [pc, #616]	; (8003024 <HAL_GPIO_Init+0x2a0>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d05e      	beq.n	8002e7e <HAL_GPIO_Init+0xfa>
 8002dc0:	4a98      	ldr	r2, [pc, #608]	; (8003024 <HAL_GPIO_Init+0x2a0>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d875      	bhi.n	8002eb2 <HAL_GPIO_Init+0x12e>
 8002dc6:	4a98      	ldr	r2, [pc, #608]	; (8003028 <HAL_GPIO_Init+0x2a4>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d058      	beq.n	8002e7e <HAL_GPIO_Init+0xfa>
 8002dcc:	4a96      	ldr	r2, [pc, #600]	; (8003028 <HAL_GPIO_Init+0x2a4>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d86f      	bhi.n	8002eb2 <HAL_GPIO_Init+0x12e>
 8002dd2:	4a96      	ldr	r2, [pc, #600]	; (800302c <HAL_GPIO_Init+0x2a8>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d052      	beq.n	8002e7e <HAL_GPIO_Init+0xfa>
 8002dd8:	4a94      	ldr	r2, [pc, #592]	; (800302c <HAL_GPIO_Init+0x2a8>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d869      	bhi.n	8002eb2 <HAL_GPIO_Init+0x12e>
 8002dde:	4a94      	ldr	r2, [pc, #592]	; (8003030 <HAL_GPIO_Init+0x2ac>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d04c      	beq.n	8002e7e <HAL_GPIO_Init+0xfa>
 8002de4:	4a92      	ldr	r2, [pc, #584]	; (8003030 <HAL_GPIO_Init+0x2ac>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d863      	bhi.n	8002eb2 <HAL_GPIO_Init+0x12e>
 8002dea:	4a92      	ldr	r2, [pc, #584]	; (8003034 <HAL_GPIO_Init+0x2b0>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d046      	beq.n	8002e7e <HAL_GPIO_Init+0xfa>
 8002df0:	4a90      	ldr	r2, [pc, #576]	; (8003034 <HAL_GPIO_Init+0x2b0>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d85d      	bhi.n	8002eb2 <HAL_GPIO_Init+0x12e>
 8002df6:	2b12      	cmp	r3, #18
 8002df8:	d82a      	bhi.n	8002e50 <HAL_GPIO_Init+0xcc>
 8002dfa:	2b12      	cmp	r3, #18
 8002dfc:	d859      	bhi.n	8002eb2 <HAL_GPIO_Init+0x12e>
 8002dfe:	a201      	add	r2, pc, #4	; (adr r2, 8002e04 <HAL_GPIO_Init+0x80>)
 8002e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e04:	08002e7f 	.word	0x08002e7f
 8002e08:	08002e59 	.word	0x08002e59
 8002e0c:	08002e6b 	.word	0x08002e6b
 8002e10:	08002ead 	.word	0x08002ead
 8002e14:	08002eb3 	.word	0x08002eb3
 8002e18:	08002eb3 	.word	0x08002eb3
 8002e1c:	08002eb3 	.word	0x08002eb3
 8002e20:	08002eb3 	.word	0x08002eb3
 8002e24:	08002eb3 	.word	0x08002eb3
 8002e28:	08002eb3 	.word	0x08002eb3
 8002e2c:	08002eb3 	.word	0x08002eb3
 8002e30:	08002eb3 	.word	0x08002eb3
 8002e34:	08002eb3 	.word	0x08002eb3
 8002e38:	08002eb3 	.word	0x08002eb3
 8002e3c:	08002eb3 	.word	0x08002eb3
 8002e40:	08002eb3 	.word	0x08002eb3
 8002e44:	08002eb3 	.word	0x08002eb3
 8002e48:	08002e61 	.word	0x08002e61
 8002e4c:	08002e75 	.word	0x08002e75
 8002e50:	4a79      	ldr	r2, [pc, #484]	; (8003038 <HAL_GPIO_Init+0x2b4>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d013      	beq.n	8002e7e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002e56:	e02c      	b.n	8002eb2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	623b      	str	r3, [r7, #32]
          break;
 8002e5e:	e029      	b.n	8002eb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	3304      	adds	r3, #4
 8002e66:	623b      	str	r3, [r7, #32]
          break;
 8002e68:	e024      	b.n	8002eb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	3308      	adds	r3, #8
 8002e70:	623b      	str	r3, [r7, #32]
          break;
 8002e72:	e01f      	b.n	8002eb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	330c      	adds	r3, #12
 8002e7a:	623b      	str	r3, [r7, #32]
          break;
 8002e7c:	e01a      	b.n	8002eb4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d102      	bne.n	8002e8c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e86:	2304      	movs	r3, #4
 8002e88:	623b      	str	r3, [r7, #32]
          break;
 8002e8a:	e013      	b.n	8002eb4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d105      	bne.n	8002ea0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e94:	2308      	movs	r3, #8
 8002e96:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	69fa      	ldr	r2, [r7, #28]
 8002e9c:	611a      	str	r2, [r3, #16]
          break;
 8002e9e:	e009      	b.n	8002eb4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ea0:	2308      	movs	r3, #8
 8002ea2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	69fa      	ldr	r2, [r7, #28]
 8002ea8:	615a      	str	r2, [r3, #20]
          break;
 8002eaa:	e003      	b.n	8002eb4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002eac:	2300      	movs	r3, #0
 8002eae:	623b      	str	r3, [r7, #32]
          break;
 8002eb0:	e000      	b.n	8002eb4 <HAL_GPIO_Init+0x130>
          break;
 8002eb2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	2bff      	cmp	r3, #255	; 0xff
 8002eb8:	d801      	bhi.n	8002ebe <HAL_GPIO_Init+0x13a>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	e001      	b.n	8002ec2 <HAL_GPIO_Init+0x13e>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	3304      	adds	r3, #4
 8002ec2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	2bff      	cmp	r3, #255	; 0xff
 8002ec8:	d802      	bhi.n	8002ed0 <HAL_GPIO_Init+0x14c>
 8002eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	e002      	b.n	8002ed6 <HAL_GPIO_Init+0x152>
 8002ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed2:	3b08      	subs	r3, #8
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	210f      	movs	r1, #15
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	401a      	ands	r2, r3
 8002ee8:	6a39      	ldr	r1, [r7, #32]
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef0:	431a      	orrs	r2, r3
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	f000 80b1 	beq.w	8003066 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f04:	4b4d      	ldr	r3, [pc, #308]	; (800303c <HAL_GPIO_Init+0x2b8>)
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	4a4c      	ldr	r2, [pc, #304]	; (800303c <HAL_GPIO_Init+0x2b8>)
 8002f0a:	f043 0301 	orr.w	r3, r3, #1
 8002f0e:	6193      	str	r3, [r2, #24]
 8002f10:	4b4a      	ldr	r3, [pc, #296]	; (800303c <HAL_GPIO_Init+0x2b8>)
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	f003 0301 	and.w	r3, r3, #1
 8002f18:	60bb      	str	r3, [r7, #8]
 8002f1a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002f1c:	4a48      	ldr	r2, [pc, #288]	; (8003040 <HAL_GPIO_Init+0x2bc>)
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f20:	089b      	lsrs	r3, r3, #2
 8002f22:	3302      	adds	r3, #2
 8002f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f28:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2c:	f003 0303 	and.w	r3, r3, #3
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	220f      	movs	r2, #15
 8002f34:	fa02 f303 	lsl.w	r3, r2, r3
 8002f38:	43db      	mvns	r3, r3
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a40      	ldr	r2, [pc, #256]	; (8003044 <HAL_GPIO_Init+0x2c0>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d013      	beq.n	8002f70 <HAL_GPIO_Init+0x1ec>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a3f      	ldr	r2, [pc, #252]	; (8003048 <HAL_GPIO_Init+0x2c4>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d00d      	beq.n	8002f6c <HAL_GPIO_Init+0x1e8>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a3e      	ldr	r2, [pc, #248]	; (800304c <HAL_GPIO_Init+0x2c8>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d007      	beq.n	8002f68 <HAL_GPIO_Init+0x1e4>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a3d      	ldr	r2, [pc, #244]	; (8003050 <HAL_GPIO_Init+0x2cc>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d101      	bne.n	8002f64 <HAL_GPIO_Init+0x1e0>
 8002f60:	2303      	movs	r3, #3
 8002f62:	e006      	b.n	8002f72 <HAL_GPIO_Init+0x1ee>
 8002f64:	2304      	movs	r3, #4
 8002f66:	e004      	b.n	8002f72 <HAL_GPIO_Init+0x1ee>
 8002f68:	2302      	movs	r3, #2
 8002f6a:	e002      	b.n	8002f72 <HAL_GPIO_Init+0x1ee>
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e000      	b.n	8002f72 <HAL_GPIO_Init+0x1ee>
 8002f70:	2300      	movs	r3, #0
 8002f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f74:	f002 0203 	and.w	r2, r2, #3
 8002f78:	0092      	lsls	r2, r2, #2
 8002f7a:	4093      	lsls	r3, r2
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002f82:	492f      	ldr	r1, [pc, #188]	; (8003040 <HAL_GPIO_Init+0x2bc>)
 8002f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f86:	089b      	lsrs	r3, r3, #2
 8002f88:	3302      	adds	r3, #2
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d006      	beq.n	8002faa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002f9c:	4b2d      	ldr	r3, [pc, #180]	; (8003054 <HAL_GPIO_Init+0x2d0>)
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	492c      	ldr	r1, [pc, #176]	; (8003054 <HAL_GPIO_Init+0x2d0>)
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	600b      	str	r3, [r1, #0]
 8002fa8:	e006      	b.n	8002fb8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002faa:	4b2a      	ldr	r3, [pc, #168]	; (8003054 <HAL_GPIO_Init+0x2d0>)
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	43db      	mvns	r3, r3
 8002fb2:	4928      	ldr	r1, [pc, #160]	; (8003054 <HAL_GPIO_Init+0x2d0>)
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d006      	beq.n	8002fd2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002fc4:	4b23      	ldr	r3, [pc, #140]	; (8003054 <HAL_GPIO_Init+0x2d0>)
 8002fc6:	685a      	ldr	r2, [r3, #4]
 8002fc8:	4922      	ldr	r1, [pc, #136]	; (8003054 <HAL_GPIO_Init+0x2d0>)
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	604b      	str	r3, [r1, #4]
 8002fd0:	e006      	b.n	8002fe0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002fd2:	4b20      	ldr	r3, [pc, #128]	; (8003054 <HAL_GPIO_Init+0x2d0>)
 8002fd4:	685a      	ldr	r2, [r3, #4]
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	43db      	mvns	r3, r3
 8002fda:	491e      	ldr	r1, [pc, #120]	; (8003054 <HAL_GPIO_Init+0x2d0>)
 8002fdc:	4013      	ands	r3, r2
 8002fde:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d006      	beq.n	8002ffa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002fec:	4b19      	ldr	r3, [pc, #100]	; (8003054 <HAL_GPIO_Init+0x2d0>)
 8002fee:	689a      	ldr	r2, [r3, #8]
 8002ff0:	4918      	ldr	r1, [pc, #96]	; (8003054 <HAL_GPIO_Init+0x2d0>)
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	608b      	str	r3, [r1, #8]
 8002ff8:	e006      	b.n	8003008 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002ffa:	4b16      	ldr	r3, [pc, #88]	; (8003054 <HAL_GPIO_Init+0x2d0>)
 8002ffc:	689a      	ldr	r2, [r3, #8]
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	43db      	mvns	r3, r3
 8003002:	4914      	ldr	r1, [pc, #80]	; (8003054 <HAL_GPIO_Init+0x2d0>)
 8003004:	4013      	ands	r3, r2
 8003006:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d021      	beq.n	8003058 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003014:	4b0f      	ldr	r3, [pc, #60]	; (8003054 <HAL_GPIO_Init+0x2d0>)
 8003016:	68da      	ldr	r2, [r3, #12]
 8003018:	490e      	ldr	r1, [pc, #56]	; (8003054 <HAL_GPIO_Init+0x2d0>)
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	4313      	orrs	r3, r2
 800301e:	60cb      	str	r3, [r1, #12]
 8003020:	e021      	b.n	8003066 <HAL_GPIO_Init+0x2e2>
 8003022:	bf00      	nop
 8003024:	10320000 	.word	0x10320000
 8003028:	10310000 	.word	0x10310000
 800302c:	10220000 	.word	0x10220000
 8003030:	10210000 	.word	0x10210000
 8003034:	10120000 	.word	0x10120000
 8003038:	10110000 	.word	0x10110000
 800303c:	40021000 	.word	0x40021000
 8003040:	40010000 	.word	0x40010000
 8003044:	40010800 	.word	0x40010800
 8003048:	40010c00 	.word	0x40010c00
 800304c:	40011000 	.word	0x40011000
 8003050:	40011400 	.word	0x40011400
 8003054:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003058:	4b0b      	ldr	r3, [pc, #44]	; (8003088 <HAL_GPIO_Init+0x304>)
 800305a:	68da      	ldr	r2, [r3, #12]
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	43db      	mvns	r3, r3
 8003060:	4909      	ldr	r1, [pc, #36]	; (8003088 <HAL_GPIO_Init+0x304>)
 8003062:	4013      	ands	r3, r2
 8003064:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003068:	3301      	adds	r3, #1
 800306a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003072:	fa22 f303 	lsr.w	r3, r2, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	f47f ae8e 	bne.w	8002d98 <HAL_GPIO_Init+0x14>
  }
}
 800307c:	bf00      	nop
 800307e:	bf00      	nop
 8003080:	372c      	adds	r7, #44	; 0x2c
 8003082:	46bd      	mov	sp, r7
 8003084:	bc80      	pop	{r7}
 8003086:	4770      	bx	lr
 8003088:	40010400 	.word	0x40010400

0800308c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800308c:	b480      	push	{r7}
 800308e:	b089      	sub	sp, #36	; 0x24
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003096:	2300      	movs	r3, #0
 8003098:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800309a:	e09a      	b.n	80031d2 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800309c:	2201      	movs	r2, #1
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	4013      	ands	r3, r2
 80030a8:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f000 808d 	beq.w	80031cc <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 80030b2:	4a4e      	ldr	r2, [pc, #312]	; (80031ec <HAL_GPIO_DeInit+0x160>)
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	089b      	lsrs	r3, r3, #2
 80030b8:	3302      	adds	r3, #2
 80030ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030be:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	f003 0303 	and.w	r3, r3, #3
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	220f      	movs	r2, #15
 80030ca:	fa02 f303 	lsl.w	r3, r2, r3
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	4013      	ands	r3, r2
 80030d2:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a46      	ldr	r2, [pc, #280]	; (80031f0 <HAL_GPIO_DeInit+0x164>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d013      	beq.n	8003104 <HAL_GPIO_DeInit+0x78>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a45      	ldr	r2, [pc, #276]	; (80031f4 <HAL_GPIO_DeInit+0x168>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d00d      	beq.n	8003100 <HAL_GPIO_DeInit+0x74>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a44      	ldr	r2, [pc, #272]	; (80031f8 <HAL_GPIO_DeInit+0x16c>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d007      	beq.n	80030fc <HAL_GPIO_DeInit+0x70>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a43      	ldr	r2, [pc, #268]	; (80031fc <HAL_GPIO_DeInit+0x170>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d101      	bne.n	80030f8 <HAL_GPIO_DeInit+0x6c>
 80030f4:	2303      	movs	r3, #3
 80030f6:	e006      	b.n	8003106 <HAL_GPIO_DeInit+0x7a>
 80030f8:	2304      	movs	r3, #4
 80030fa:	e004      	b.n	8003106 <HAL_GPIO_DeInit+0x7a>
 80030fc:	2302      	movs	r3, #2
 80030fe:	e002      	b.n	8003106 <HAL_GPIO_DeInit+0x7a>
 8003100:	2301      	movs	r3, #1
 8003102:	e000      	b.n	8003106 <HAL_GPIO_DeInit+0x7a>
 8003104:	2300      	movs	r3, #0
 8003106:	69fa      	ldr	r2, [r7, #28]
 8003108:	f002 0203 	and.w	r2, r2, #3
 800310c:	0092      	lsls	r2, r2, #2
 800310e:	4093      	lsls	r3, r2
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	429a      	cmp	r2, r3
 8003114:	d132      	bne.n	800317c <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	f003 0303 	and.w	r3, r3, #3
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	220f      	movs	r2, #15
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8003126:	4a31      	ldr	r2, [pc, #196]	; (80031ec <HAL_GPIO_DeInit+0x160>)
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	089b      	lsrs	r3, r3, #2
 800312c:	3302      	adds	r3, #2
 800312e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	43da      	mvns	r2, r3
 8003136:	482d      	ldr	r0, [pc, #180]	; (80031ec <HAL_GPIO_DeInit+0x160>)
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	089b      	lsrs	r3, r3, #2
 800313c:	400a      	ands	r2, r1
 800313e:	3302      	adds	r3, #2
 8003140:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8003144:	4b2e      	ldr	r3, [pc, #184]	; (8003200 <HAL_GPIO_DeInit+0x174>)
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	43db      	mvns	r3, r3
 800314c:	492c      	ldr	r1, [pc, #176]	; (8003200 <HAL_GPIO_DeInit+0x174>)
 800314e:	4013      	ands	r3, r2
 8003150:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8003152:	4b2b      	ldr	r3, [pc, #172]	; (8003200 <HAL_GPIO_DeInit+0x174>)
 8003154:	685a      	ldr	r2, [r3, #4]
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	43db      	mvns	r3, r3
 800315a:	4929      	ldr	r1, [pc, #164]	; (8003200 <HAL_GPIO_DeInit+0x174>)
 800315c:	4013      	ands	r3, r2
 800315e:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8003160:	4b27      	ldr	r3, [pc, #156]	; (8003200 <HAL_GPIO_DeInit+0x174>)
 8003162:	689a      	ldr	r2, [r3, #8]
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	43db      	mvns	r3, r3
 8003168:	4925      	ldr	r1, [pc, #148]	; (8003200 <HAL_GPIO_DeInit+0x174>)
 800316a:	4013      	ands	r3, r2
 800316c:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800316e:	4b24      	ldr	r3, [pc, #144]	; (8003200 <HAL_GPIO_DeInit+0x174>)
 8003170:	68da      	ldr	r2, [r3, #12]
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	43db      	mvns	r3, r3
 8003176:	4922      	ldr	r1, [pc, #136]	; (8003200 <HAL_GPIO_DeInit+0x174>)
 8003178:	4013      	ands	r3, r2
 800317a:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	2bff      	cmp	r3, #255	; 0xff
 8003180:	d801      	bhi.n	8003186 <HAL_GPIO_DeInit+0xfa>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	e001      	b.n	800318a <HAL_GPIO_DeInit+0xfe>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	3304      	adds	r3, #4
 800318a:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	2bff      	cmp	r3, #255	; 0xff
 8003190:	d802      	bhi.n	8003198 <HAL_GPIO_DeInit+0x10c>
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	e002      	b.n	800319e <HAL_GPIO_DeInit+0x112>
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	3b08      	subs	r3, #8
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	210f      	movs	r1, #15
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	fa01 f303 	lsl.w	r3, r1, r3
 80031ac:	43db      	mvns	r3, r3
 80031ae:	401a      	ands	r2, r3
 80031b0:	2104      	movs	r1, #4
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	fa01 f303 	lsl.w	r3, r1, r3
 80031b8:	431a      	orrs	r2, r3
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68da      	ldr	r2, [r3, #12]
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	43db      	mvns	r3, r3
 80031c6:	401a      	ands	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	60da      	str	r2, [r3, #12]
    }

    position++;
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	3301      	adds	r3, #1
 80031d0:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	fa22 f303 	lsr.w	r3, r2, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f47f af5e 	bne.w	800309c <HAL_GPIO_DeInit+0x10>
  }
}
 80031e0:	bf00      	nop
 80031e2:	bf00      	nop
 80031e4:	3724      	adds	r7, #36	; 0x24
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bc80      	pop	{r7}
 80031ea:	4770      	bx	lr
 80031ec:	40010000 	.word	0x40010000
 80031f0:	40010800 	.word	0x40010800
 80031f4:	40010c00 	.word	0x40010c00
 80031f8:	40011000 	.word	0x40011000
 80031fc:	40011400 	.word	0x40011400
 8003200:	40010400 	.word	0x40010400

08003204 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	460b      	mov	r3, r1
 800320e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689a      	ldr	r2, [r3, #8]
 8003214:	887b      	ldrh	r3, [r7, #2]
 8003216:	4013      	ands	r3, r2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d002      	beq.n	8003222 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800321c:	2301      	movs	r3, #1
 800321e:	73fb      	strb	r3, [r7, #15]
 8003220:	e001      	b.n	8003226 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003222:	2300      	movs	r3, #0
 8003224:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003226:	7bfb      	ldrb	r3, [r7, #15]
}
 8003228:	4618      	mov	r0, r3
 800322a:	3714      	adds	r7, #20
 800322c:	46bd      	mov	sp, r7
 800322e:	bc80      	pop	{r7}
 8003230:	4770      	bx	lr

08003232 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003232:	b480      	push	{r7}
 8003234:	b083      	sub	sp, #12
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
 800323a:	460b      	mov	r3, r1
 800323c:	807b      	strh	r3, [r7, #2]
 800323e:	4613      	mov	r3, r2
 8003240:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003242:	787b      	ldrb	r3, [r7, #1]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d003      	beq.n	8003250 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003248:	887a      	ldrh	r2, [r7, #2]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800324e:	e003      	b.n	8003258 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003250:	887b      	ldrh	r3, [r7, #2]
 8003252:	041a      	lsls	r2, r3, #16
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	611a      	str	r2, [r3, #16]
}
 8003258:	bf00      	nop
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	bc80      	pop	{r7}
 8003260:	4770      	bx	lr
	...

08003264 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e26c      	b.n	8003750 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	f000 8087 	beq.w	8003392 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003284:	4b92      	ldr	r3, [pc, #584]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f003 030c 	and.w	r3, r3, #12
 800328c:	2b04      	cmp	r3, #4
 800328e:	d00c      	beq.n	80032aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003290:	4b8f      	ldr	r3, [pc, #572]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f003 030c 	and.w	r3, r3, #12
 8003298:	2b08      	cmp	r3, #8
 800329a:	d112      	bne.n	80032c2 <HAL_RCC_OscConfig+0x5e>
 800329c:	4b8c      	ldr	r3, [pc, #560]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032a8:	d10b      	bne.n	80032c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032aa:	4b89      	ldr	r3, [pc, #548]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d06c      	beq.n	8003390 <HAL_RCC_OscConfig+0x12c>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d168      	bne.n	8003390 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e246      	b.n	8003750 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ca:	d106      	bne.n	80032da <HAL_RCC_OscConfig+0x76>
 80032cc:	4b80      	ldr	r3, [pc, #512]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a7f      	ldr	r2, [pc, #508]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 80032d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032d6:	6013      	str	r3, [r2, #0]
 80032d8:	e02e      	b.n	8003338 <HAL_RCC_OscConfig+0xd4>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10c      	bne.n	80032fc <HAL_RCC_OscConfig+0x98>
 80032e2:	4b7b      	ldr	r3, [pc, #492]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a7a      	ldr	r2, [pc, #488]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 80032e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ec:	6013      	str	r3, [r2, #0]
 80032ee:	4b78      	ldr	r3, [pc, #480]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a77      	ldr	r2, [pc, #476]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 80032f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032f8:	6013      	str	r3, [r2, #0]
 80032fa:	e01d      	b.n	8003338 <HAL_RCC_OscConfig+0xd4>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003304:	d10c      	bne.n	8003320 <HAL_RCC_OscConfig+0xbc>
 8003306:	4b72      	ldr	r3, [pc, #456]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a71      	ldr	r2, [pc, #452]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 800330c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003310:	6013      	str	r3, [r2, #0]
 8003312:	4b6f      	ldr	r3, [pc, #444]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a6e      	ldr	r2, [pc, #440]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 8003318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800331c:	6013      	str	r3, [r2, #0]
 800331e:	e00b      	b.n	8003338 <HAL_RCC_OscConfig+0xd4>
 8003320:	4b6b      	ldr	r3, [pc, #428]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a6a      	ldr	r2, [pc, #424]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 8003326:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800332a:	6013      	str	r3, [r2, #0]
 800332c:	4b68      	ldr	r3, [pc, #416]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a67      	ldr	r2, [pc, #412]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 8003332:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003336:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d013      	beq.n	8003368 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003340:	f7fe fdfe 	bl	8001f40 <HAL_GetTick>
 8003344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003346:	e008      	b.n	800335a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003348:	f7fe fdfa 	bl	8001f40 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b64      	cmp	r3, #100	; 0x64
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e1fa      	b.n	8003750 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800335a:	4b5d      	ldr	r3, [pc, #372]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d0f0      	beq.n	8003348 <HAL_RCC_OscConfig+0xe4>
 8003366:	e014      	b.n	8003392 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003368:	f7fe fdea 	bl	8001f40 <HAL_GetTick>
 800336c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800336e:	e008      	b.n	8003382 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003370:	f7fe fde6 	bl	8001f40 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b64      	cmp	r3, #100	; 0x64
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e1e6      	b.n	8003750 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003382:	4b53      	ldr	r3, [pc, #332]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1f0      	bne.n	8003370 <HAL_RCC_OscConfig+0x10c>
 800338e:	e000      	b.n	8003392 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003390:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d063      	beq.n	8003466 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800339e:	4b4c      	ldr	r3, [pc, #304]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f003 030c 	and.w	r3, r3, #12
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00b      	beq.n	80033c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80033aa:	4b49      	ldr	r3, [pc, #292]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f003 030c 	and.w	r3, r3, #12
 80033b2:	2b08      	cmp	r3, #8
 80033b4:	d11c      	bne.n	80033f0 <HAL_RCC_OscConfig+0x18c>
 80033b6:	4b46      	ldr	r3, [pc, #280]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d116      	bne.n	80033f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033c2:	4b43      	ldr	r3, [pc, #268]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d005      	beq.n	80033da <HAL_RCC_OscConfig+0x176>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d001      	beq.n	80033da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e1ba      	b.n	8003750 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033da:	4b3d      	ldr	r3, [pc, #244]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	4939      	ldr	r1, [pc, #228]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ee:	e03a      	b.n	8003466 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d020      	beq.n	800343a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033f8:	4b36      	ldr	r3, [pc, #216]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 80033fa:	2201      	movs	r2, #1
 80033fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fe:	f7fe fd9f 	bl	8001f40 <HAL_GetTick>
 8003402:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003404:	e008      	b.n	8003418 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003406:	f7fe fd9b 	bl	8001f40 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	2b02      	cmp	r3, #2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e19b      	b.n	8003750 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003418:	4b2d      	ldr	r3, [pc, #180]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d0f0      	beq.n	8003406 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003424:	4b2a      	ldr	r3, [pc, #168]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	695b      	ldr	r3, [r3, #20]
 8003430:	00db      	lsls	r3, r3, #3
 8003432:	4927      	ldr	r1, [pc, #156]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 8003434:	4313      	orrs	r3, r2
 8003436:	600b      	str	r3, [r1, #0]
 8003438:	e015      	b.n	8003466 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800343a:	4b26      	ldr	r3, [pc, #152]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 800343c:	2200      	movs	r2, #0
 800343e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003440:	f7fe fd7e 	bl	8001f40 <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003448:	f7fe fd7a 	bl	8001f40 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e17a      	b.n	8003750 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800345a:	4b1d      	ldr	r3, [pc, #116]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1f0      	bne.n	8003448 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0308 	and.w	r3, r3, #8
 800346e:	2b00      	cmp	r3, #0
 8003470:	d03a      	beq.n	80034e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d019      	beq.n	80034ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800347a:	4b17      	ldr	r3, [pc, #92]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 800347c:	2201      	movs	r2, #1
 800347e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003480:	f7fe fd5e 	bl	8001f40 <HAL_GetTick>
 8003484:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003486:	e008      	b.n	800349a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003488:	f7fe fd5a 	bl	8001f40 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b02      	cmp	r3, #2
 8003494:	d901      	bls.n	800349a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e15a      	b.n	8003750 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800349a:	4b0d      	ldr	r3, [pc, #52]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 800349c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d0f0      	beq.n	8003488 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80034a6:	2001      	movs	r0, #1
 80034a8:	f000 fad8 	bl	8003a5c <RCC_Delay>
 80034ac:	e01c      	b.n	80034e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034ae:	4b0a      	ldr	r3, [pc, #40]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034b4:	f7fe fd44 	bl	8001f40 <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034ba:	e00f      	b.n	80034dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034bc:	f7fe fd40 	bl	8001f40 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d908      	bls.n	80034dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e140      	b.n	8003750 <HAL_RCC_OscConfig+0x4ec>
 80034ce:	bf00      	nop
 80034d0:	40021000 	.word	0x40021000
 80034d4:	42420000 	.word	0x42420000
 80034d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034dc:	4b9e      	ldr	r3, [pc, #632]	; (8003758 <HAL_RCC_OscConfig+0x4f4>)
 80034de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1e9      	bne.n	80034bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0304 	and.w	r3, r3, #4
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f000 80a6 	beq.w	8003642 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034f6:	2300      	movs	r3, #0
 80034f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034fa:	4b97      	ldr	r3, [pc, #604]	; (8003758 <HAL_RCC_OscConfig+0x4f4>)
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10d      	bne.n	8003522 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003506:	4b94      	ldr	r3, [pc, #592]	; (8003758 <HAL_RCC_OscConfig+0x4f4>)
 8003508:	69db      	ldr	r3, [r3, #28]
 800350a:	4a93      	ldr	r2, [pc, #588]	; (8003758 <HAL_RCC_OscConfig+0x4f4>)
 800350c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003510:	61d3      	str	r3, [r2, #28]
 8003512:	4b91      	ldr	r3, [pc, #580]	; (8003758 <HAL_RCC_OscConfig+0x4f4>)
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800351a:	60bb      	str	r3, [r7, #8]
 800351c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800351e:	2301      	movs	r3, #1
 8003520:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003522:	4b8e      	ldr	r3, [pc, #568]	; (800375c <HAL_RCC_OscConfig+0x4f8>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800352a:	2b00      	cmp	r3, #0
 800352c:	d118      	bne.n	8003560 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800352e:	4b8b      	ldr	r3, [pc, #556]	; (800375c <HAL_RCC_OscConfig+0x4f8>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a8a      	ldr	r2, [pc, #552]	; (800375c <HAL_RCC_OscConfig+0x4f8>)
 8003534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003538:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800353a:	f7fe fd01 	bl	8001f40 <HAL_GetTick>
 800353e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003540:	e008      	b.n	8003554 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003542:	f7fe fcfd 	bl	8001f40 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b64      	cmp	r3, #100	; 0x64
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e0fd      	b.n	8003750 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003554:	4b81      	ldr	r3, [pc, #516]	; (800375c <HAL_RCC_OscConfig+0x4f8>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0f0      	beq.n	8003542 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d106      	bne.n	8003576 <HAL_RCC_OscConfig+0x312>
 8003568:	4b7b      	ldr	r3, [pc, #492]	; (8003758 <HAL_RCC_OscConfig+0x4f4>)
 800356a:	6a1b      	ldr	r3, [r3, #32]
 800356c:	4a7a      	ldr	r2, [pc, #488]	; (8003758 <HAL_RCC_OscConfig+0x4f4>)
 800356e:	f043 0301 	orr.w	r3, r3, #1
 8003572:	6213      	str	r3, [r2, #32]
 8003574:	e02d      	b.n	80035d2 <HAL_RCC_OscConfig+0x36e>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10c      	bne.n	8003598 <HAL_RCC_OscConfig+0x334>
 800357e:	4b76      	ldr	r3, [pc, #472]	; (8003758 <HAL_RCC_OscConfig+0x4f4>)
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	4a75      	ldr	r2, [pc, #468]	; (8003758 <HAL_RCC_OscConfig+0x4f4>)
 8003584:	f023 0301 	bic.w	r3, r3, #1
 8003588:	6213      	str	r3, [r2, #32]
 800358a:	4b73      	ldr	r3, [pc, #460]	; (8003758 <HAL_RCC_OscConfig+0x4f4>)
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	4a72      	ldr	r2, [pc, #456]	; (8003758 <HAL_RCC_OscConfig+0x4f4>)
 8003590:	f023 0304 	bic.w	r3, r3, #4
 8003594:	6213      	str	r3, [r2, #32]
 8003596:	e01c      	b.n	80035d2 <HAL_RCC_OscConfig+0x36e>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	2b05      	cmp	r3, #5
 800359e:	d10c      	bne.n	80035ba <HAL_RCC_OscConfig+0x356>
 80035a0:	4b6d      	ldr	r3, [pc, #436]	; (8003758 <HAL_RCC_OscConfig+0x4f4>)
 80035a2:	6a1b      	ldr	r3, [r3, #32]
 80035a4:	4a6c      	ldr	r2, [pc, #432]	; (8003758 <HAL_RCC_OscConfig+0x4f4>)
 80035a6:	f043 0304 	orr.w	r3, r3, #4
 80035aa:	6213      	str	r3, [r2, #32]
 80035ac:	4b6a      	ldr	r3, [pc, #424]	; (8003758 <HAL_RCC_OscConfig+0x4f4>)
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	4a69      	ldr	r2, [pc, #420]	; (8003758 <HAL_RCC_OscConfig+0x4f4>)
 80035b2:	f043 0301 	orr.w	r3, r3, #1
 80035b6:	6213      	str	r3, [r2, #32]
 80035b8:	e00b      	b.n	80035d2 <HAL_RCC_OscConfig+0x36e>
 80035ba:	4b67      	ldr	r3, [pc, #412]	; (8003758 <HAL_RCC_OscConfig+0x4f4>)
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	4a66      	ldr	r2, [pc, #408]	; (8003758 <HAL_RCC_OscConfig+0x4f4>)
 80035c0:	f023 0301 	bic.w	r3, r3, #1
 80035c4:	6213      	str	r3, [r2, #32]
 80035c6:	4b64      	ldr	r3, [pc, #400]	; (8003758 <HAL_RCC_OscConfig+0x4f4>)
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	4a63      	ldr	r2, [pc, #396]	; (8003758 <HAL_RCC_OscConfig+0x4f4>)
 80035cc:	f023 0304 	bic.w	r3, r3, #4
 80035d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d015      	beq.n	8003606 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035da:	f7fe fcb1 	bl	8001f40 <HAL_GetTick>
 80035de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035e0:	e00a      	b.n	80035f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035e2:	f7fe fcad 	bl	8001f40 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e0ab      	b.n	8003750 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f8:	4b57      	ldr	r3, [pc, #348]	; (8003758 <HAL_RCC_OscConfig+0x4f4>)
 80035fa:	6a1b      	ldr	r3, [r3, #32]
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d0ee      	beq.n	80035e2 <HAL_RCC_OscConfig+0x37e>
 8003604:	e014      	b.n	8003630 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003606:	f7fe fc9b 	bl	8001f40 <HAL_GetTick>
 800360a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800360c:	e00a      	b.n	8003624 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800360e:	f7fe fc97 	bl	8001f40 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	f241 3288 	movw	r2, #5000	; 0x1388
 800361c:	4293      	cmp	r3, r2
 800361e:	d901      	bls.n	8003624 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e095      	b.n	8003750 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003624:	4b4c      	ldr	r3, [pc, #304]	; (8003758 <HAL_RCC_OscConfig+0x4f4>)
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d1ee      	bne.n	800360e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003630:	7dfb      	ldrb	r3, [r7, #23]
 8003632:	2b01      	cmp	r3, #1
 8003634:	d105      	bne.n	8003642 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003636:	4b48      	ldr	r3, [pc, #288]	; (8003758 <HAL_RCC_OscConfig+0x4f4>)
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	4a47      	ldr	r2, [pc, #284]	; (8003758 <HAL_RCC_OscConfig+0x4f4>)
 800363c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003640:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	69db      	ldr	r3, [r3, #28]
 8003646:	2b00      	cmp	r3, #0
 8003648:	f000 8081 	beq.w	800374e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800364c:	4b42      	ldr	r3, [pc, #264]	; (8003758 <HAL_RCC_OscConfig+0x4f4>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f003 030c 	and.w	r3, r3, #12
 8003654:	2b08      	cmp	r3, #8
 8003656:	d061      	beq.n	800371c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	69db      	ldr	r3, [r3, #28]
 800365c:	2b02      	cmp	r3, #2
 800365e:	d146      	bne.n	80036ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003660:	4b3f      	ldr	r3, [pc, #252]	; (8003760 <HAL_RCC_OscConfig+0x4fc>)
 8003662:	2200      	movs	r2, #0
 8003664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003666:	f7fe fc6b 	bl	8001f40 <HAL_GetTick>
 800366a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800366c:	e008      	b.n	8003680 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800366e:	f7fe fc67 	bl	8001f40 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d901      	bls.n	8003680 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e067      	b.n	8003750 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003680:	4b35      	ldr	r3, [pc, #212]	; (8003758 <HAL_RCC_OscConfig+0x4f4>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1f0      	bne.n	800366e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a1b      	ldr	r3, [r3, #32]
 8003690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003694:	d108      	bne.n	80036a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003696:	4b30      	ldr	r3, [pc, #192]	; (8003758 <HAL_RCC_OscConfig+0x4f4>)
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	492d      	ldr	r1, [pc, #180]	; (8003758 <HAL_RCC_OscConfig+0x4f4>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036a8:	4b2b      	ldr	r3, [pc, #172]	; (8003758 <HAL_RCC_OscConfig+0x4f4>)
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a19      	ldr	r1, [r3, #32]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b8:	430b      	orrs	r3, r1
 80036ba:	4927      	ldr	r1, [pc, #156]	; (8003758 <HAL_RCC_OscConfig+0x4f4>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036c0:	4b27      	ldr	r3, [pc, #156]	; (8003760 <HAL_RCC_OscConfig+0x4fc>)
 80036c2:	2201      	movs	r2, #1
 80036c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c6:	f7fe fc3b 	bl	8001f40 <HAL_GetTick>
 80036ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036cc:	e008      	b.n	80036e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ce:	f7fe fc37 	bl	8001f40 <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d901      	bls.n	80036e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e037      	b.n	8003750 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036e0:	4b1d      	ldr	r3, [pc, #116]	; (8003758 <HAL_RCC_OscConfig+0x4f4>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d0f0      	beq.n	80036ce <HAL_RCC_OscConfig+0x46a>
 80036ec:	e02f      	b.n	800374e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ee:	4b1c      	ldr	r3, [pc, #112]	; (8003760 <HAL_RCC_OscConfig+0x4fc>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f4:	f7fe fc24 	bl	8001f40 <HAL_GetTick>
 80036f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036fa:	e008      	b.n	800370e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036fc:	f7fe fc20 	bl	8001f40 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b02      	cmp	r3, #2
 8003708:	d901      	bls.n	800370e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e020      	b.n	8003750 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800370e:	4b12      	ldr	r3, [pc, #72]	; (8003758 <HAL_RCC_OscConfig+0x4f4>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1f0      	bne.n	80036fc <HAL_RCC_OscConfig+0x498>
 800371a:	e018      	b.n	800374e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	69db      	ldr	r3, [r3, #28]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d101      	bne.n	8003728 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e013      	b.n	8003750 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003728:	4b0b      	ldr	r3, [pc, #44]	; (8003758 <HAL_RCC_OscConfig+0x4f4>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	429a      	cmp	r2, r3
 800373a:	d106      	bne.n	800374a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003746:	429a      	cmp	r2, r3
 8003748:	d001      	beq.n	800374e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e000      	b.n	8003750 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	3718      	adds	r7, #24
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	40021000 	.word	0x40021000
 800375c:	40007000 	.word	0x40007000
 8003760:	42420060 	.word	0x42420060

08003764 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d101      	bne.n	8003778 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e0d0      	b.n	800391a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003778:	4b6a      	ldr	r3, [pc, #424]	; (8003924 <HAL_RCC_ClockConfig+0x1c0>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0307 	and.w	r3, r3, #7
 8003780:	683a      	ldr	r2, [r7, #0]
 8003782:	429a      	cmp	r2, r3
 8003784:	d910      	bls.n	80037a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003786:	4b67      	ldr	r3, [pc, #412]	; (8003924 <HAL_RCC_ClockConfig+0x1c0>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f023 0207 	bic.w	r2, r3, #7
 800378e:	4965      	ldr	r1, [pc, #404]	; (8003924 <HAL_RCC_ClockConfig+0x1c0>)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	4313      	orrs	r3, r2
 8003794:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003796:	4b63      	ldr	r3, [pc, #396]	; (8003924 <HAL_RCC_ClockConfig+0x1c0>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0307 	and.w	r3, r3, #7
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d001      	beq.n	80037a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e0b8      	b.n	800391a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0302 	and.w	r3, r3, #2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d020      	beq.n	80037f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0304 	and.w	r3, r3, #4
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d005      	beq.n	80037cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037c0:	4b59      	ldr	r3, [pc, #356]	; (8003928 <HAL_RCC_ClockConfig+0x1c4>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	4a58      	ldr	r2, [pc, #352]	; (8003928 <HAL_RCC_ClockConfig+0x1c4>)
 80037c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80037ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0308 	and.w	r3, r3, #8
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d005      	beq.n	80037e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037d8:	4b53      	ldr	r3, [pc, #332]	; (8003928 <HAL_RCC_ClockConfig+0x1c4>)
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	4a52      	ldr	r2, [pc, #328]	; (8003928 <HAL_RCC_ClockConfig+0x1c4>)
 80037de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80037e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037e4:	4b50      	ldr	r3, [pc, #320]	; (8003928 <HAL_RCC_ClockConfig+0x1c4>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	494d      	ldr	r1, [pc, #308]	; (8003928 <HAL_RCC_ClockConfig+0x1c4>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d040      	beq.n	8003884 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d107      	bne.n	800381a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800380a:	4b47      	ldr	r3, [pc, #284]	; (8003928 <HAL_RCC_ClockConfig+0x1c4>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d115      	bne.n	8003842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e07f      	b.n	800391a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	2b02      	cmp	r3, #2
 8003820:	d107      	bne.n	8003832 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003822:	4b41      	ldr	r3, [pc, #260]	; (8003928 <HAL_RCC_ClockConfig+0x1c4>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d109      	bne.n	8003842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e073      	b.n	800391a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003832:	4b3d      	ldr	r3, [pc, #244]	; (8003928 <HAL_RCC_ClockConfig+0x1c4>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e06b      	b.n	800391a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003842:	4b39      	ldr	r3, [pc, #228]	; (8003928 <HAL_RCC_ClockConfig+0x1c4>)
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f023 0203 	bic.w	r2, r3, #3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	4936      	ldr	r1, [pc, #216]	; (8003928 <HAL_RCC_ClockConfig+0x1c4>)
 8003850:	4313      	orrs	r3, r2
 8003852:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003854:	f7fe fb74 	bl	8001f40 <HAL_GetTick>
 8003858:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800385a:	e00a      	b.n	8003872 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800385c:	f7fe fb70 	bl	8001f40 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	f241 3288 	movw	r2, #5000	; 0x1388
 800386a:	4293      	cmp	r3, r2
 800386c:	d901      	bls.n	8003872 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e053      	b.n	800391a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003872:	4b2d      	ldr	r3, [pc, #180]	; (8003928 <HAL_RCC_ClockConfig+0x1c4>)
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f003 020c 	and.w	r2, r3, #12
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	429a      	cmp	r2, r3
 8003882:	d1eb      	bne.n	800385c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003884:	4b27      	ldr	r3, [pc, #156]	; (8003924 <HAL_RCC_ClockConfig+0x1c0>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0307 	and.w	r3, r3, #7
 800388c:	683a      	ldr	r2, [r7, #0]
 800388e:	429a      	cmp	r2, r3
 8003890:	d210      	bcs.n	80038b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003892:	4b24      	ldr	r3, [pc, #144]	; (8003924 <HAL_RCC_ClockConfig+0x1c0>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f023 0207 	bic.w	r2, r3, #7
 800389a:	4922      	ldr	r1, [pc, #136]	; (8003924 <HAL_RCC_ClockConfig+0x1c0>)
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	4313      	orrs	r3, r2
 80038a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038a2:	4b20      	ldr	r3, [pc, #128]	; (8003924 <HAL_RCC_ClockConfig+0x1c0>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0307 	and.w	r3, r3, #7
 80038aa:	683a      	ldr	r2, [r7, #0]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d001      	beq.n	80038b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e032      	b.n	800391a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0304 	and.w	r3, r3, #4
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d008      	beq.n	80038d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038c0:	4b19      	ldr	r3, [pc, #100]	; (8003928 <HAL_RCC_ClockConfig+0x1c4>)
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	4916      	ldr	r1, [pc, #88]	; (8003928 <HAL_RCC_ClockConfig+0x1c4>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0308 	and.w	r3, r3, #8
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d009      	beq.n	80038f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038de:	4b12      	ldr	r3, [pc, #72]	; (8003928 <HAL_RCC_ClockConfig+0x1c4>)
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	00db      	lsls	r3, r3, #3
 80038ec:	490e      	ldr	r1, [pc, #56]	; (8003928 <HAL_RCC_ClockConfig+0x1c4>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038f2:	f000 f821 	bl	8003938 <HAL_RCC_GetSysClockFreq>
 80038f6:	4602      	mov	r2, r0
 80038f8:	4b0b      	ldr	r3, [pc, #44]	; (8003928 <HAL_RCC_ClockConfig+0x1c4>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	091b      	lsrs	r3, r3, #4
 80038fe:	f003 030f 	and.w	r3, r3, #15
 8003902:	490a      	ldr	r1, [pc, #40]	; (800392c <HAL_RCC_ClockConfig+0x1c8>)
 8003904:	5ccb      	ldrb	r3, [r1, r3]
 8003906:	fa22 f303 	lsr.w	r3, r2, r3
 800390a:	4a09      	ldr	r2, [pc, #36]	; (8003930 <HAL_RCC_ClockConfig+0x1cc>)
 800390c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800390e:	4b09      	ldr	r3, [pc, #36]	; (8003934 <HAL_RCC_ClockConfig+0x1d0>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4618      	mov	r0, r3
 8003914:	f7fe fad2 	bl	8001ebc <HAL_InitTick>

  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3710      	adds	r7, #16
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	40022000 	.word	0x40022000
 8003928:	40021000 	.word	0x40021000
 800392c:	08008280 	.word	0x08008280
 8003930:	20000008 	.word	0x20000008
 8003934:	2000000c 	.word	0x2000000c

08003938 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003938:	b490      	push	{r4, r7}
 800393a:	b08a      	sub	sp, #40	; 0x28
 800393c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800393e:	4b2a      	ldr	r3, [pc, #168]	; (80039e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003940:	1d3c      	adds	r4, r7, #4
 8003942:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003944:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003948:	f240 2301 	movw	r3, #513	; 0x201
 800394c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800394e:	2300      	movs	r3, #0
 8003950:	61fb      	str	r3, [r7, #28]
 8003952:	2300      	movs	r3, #0
 8003954:	61bb      	str	r3, [r7, #24]
 8003956:	2300      	movs	r3, #0
 8003958:	627b      	str	r3, [r7, #36]	; 0x24
 800395a:	2300      	movs	r3, #0
 800395c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800395e:	2300      	movs	r3, #0
 8003960:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003962:	4b22      	ldr	r3, [pc, #136]	; (80039ec <HAL_RCC_GetSysClockFreq+0xb4>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	f003 030c 	and.w	r3, r3, #12
 800396e:	2b04      	cmp	r3, #4
 8003970:	d002      	beq.n	8003978 <HAL_RCC_GetSysClockFreq+0x40>
 8003972:	2b08      	cmp	r3, #8
 8003974:	d003      	beq.n	800397e <HAL_RCC_GetSysClockFreq+0x46>
 8003976:	e02d      	b.n	80039d4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003978:	4b1d      	ldr	r3, [pc, #116]	; (80039f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800397a:	623b      	str	r3, [r7, #32]
      break;
 800397c:	e02d      	b.n	80039da <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	0c9b      	lsrs	r3, r3, #18
 8003982:	f003 030f 	and.w	r3, r3, #15
 8003986:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800398a:	4413      	add	r3, r2
 800398c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003990:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d013      	beq.n	80039c4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800399c:	4b13      	ldr	r3, [pc, #76]	; (80039ec <HAL_RCC_GetSysClockFreq+0xb4>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	0c5b      	lsrs	r3, r3, #17
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80039aa:	4413      	add	r3, r2
 80039ac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80039b0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	4a0e      	ldr	r2, [pc, #56]	; (80039f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039b6:	fb02 f203 	mul.w	r2, r2, r3
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c0:	627b      	str	r3, [r7, #36]	; 0x24
 80039c2:	e004      	b.n	80039ce <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	4a0b      	ldr	r2, [pc, #44]	; (80039f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80039c8:	fb02 f303 	mul.w	r3, r2, r3
 80039cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80039ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d0:	623b      	str	r3, [r7, #32]
      break;
 80039d2:	e002      	b.n	80039da <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80039d4:	4b06      	ldr	r3, [pc, #24]	; (80039f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039d6:	623b      	str	r3, [r7, #32]
      break;
 80039d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039da:	6a3b      	ldr	r3, [r7, #32]
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3728      	adds	r7, #40	; 0x28
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bc90      	pop	{r4, r7}
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	08007f50 	.word	0x08007f50
 80039ec:	40021000 	.word	0x40021000
 80039f0:	007a1200 	.word	0x007a1200
 80039f4:	003d0900 	.word	0x003d0900

080039f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039f8:	b480      	push	{r7}
 80039fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039fc:	4b02      	ldr	r3, [pc, #8]	; (8003a08 <HAL_RCC_GetHCLKFreq+0x10>)
 80039fe:	681b      	ldr	r3, [r3, #0]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bc80      	pop	{r7}
 8003a06:	4770      	bx	lr
 8003a08:	20000008 	.word	0x20000008

08003a0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a10:	f7ff fff2 	bl	80039f8 <HAL_RCC_GetHCLKFreq>
 8003a14:	4602      	mov	r2, r0
 8003a16:	4b05      	ldr	r3, [pc, #20]	; (8003a2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	0a1b      	lsrs	r3, r3, #8
 8003a1c:	f003 0307 	and.w	r3, r3, #7
 8003a20:	4903      	ldr	r1, [pc, #12]	; (8003a30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a22:	5ccb      	ldrb	r3, [r1, r3]
 8003a24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	40021000 	.word	0x40021000
 8003a30:	08008290 	.word	0x08008290

08003a34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a38:	f7ff ffde 	bl	80039f8 <HAL_RCC_GetHCLKFreq>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	4b05      	ldr	r3, [pc, #20]	; (8003a54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	0adb      	lsrs	r3, r3, #11
 8003a44:	f003 0307 	and.w	r3, r3, #7
 8003a48:	4903      	ldr	r1, [pc, #12]	; (8003a58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a4a:	5ccb      	ldrb	r3, [r1, r3]
 8003a4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	40021000 	.word	0x40021000
 8003a58:	08008290 	.word	0x08008290

08003a5c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a64:	4b0a      	ldr	r3, [pc, #40]	; (8003a90 <RCC_Delay+0x34>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a0a      	ldr	r2, [pc, #40]	; (8003a94 <RCC_Delay+0x38>)
 8003a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a6e:	0a5b      	lsrs	r3, r3, #9
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	fb02 f303 	mul.w	r3, r2, r3
 8003a76:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a78:	bf00      	nop
  }
  while (Delay --);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	1e5a      	subs	r2, r3, #1
 8003a7e:	60fa      	str	r2, [r7, #12]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1f9      	bne.n	8003a78 <RCC_Delay+0x1c>
}
 8003a84:	bf00      	nop
 8003a86:	bf00      	nop
 8003a88:	3714      	adds	r7, #20
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bc80      	pop	{r7}
 8003a8e:	4770      	bx	lr
 8003a90:	20000008 	.word	0x20000008
 8003a94:	10624dd3 	.word	0x10624dd3

08003a98 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b086      	sub	sp, #24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	613b      	str	r3, [r7, #16]
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0301 	and.w	r3, r3, #1
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d07d      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ab8:	4b4f      	ldr	r3, [pc, #316]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aba:	69db      	ldr	r3, [r3, #28]
 8003abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d10d      	bne.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ac4:	4b4c      	ldr	r3, [pc, #304]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ac6:	69db      	ldr	r3, [r3, #28]
 8003ac8:	4a4b      	ldr	r2, [pc, #300]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ace:	61d3      	str	r3, [r2, #28]
 8003ad0:	4b49      	ldr	r3, [pc, #292]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ad2:	69db      	ldr	r3, [r3, #28]
 8003ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad8:	60bb      	str	r3, [r7, #8]
 8003ada:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003adc:	2301      	movs	r3, #1
 8003ade:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ae0:	4b46      	ldr	r3, [pc, #280]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d118      	bne.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003aec:	4b43      	ldr	r3, [pc, #268]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a42      	ldr	r2, [pc, #264]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003af2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003af6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003af8:	f7fe fa22 	bl	8001f40 <HAL_GetTick>
 8003afc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003afe:	e008      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b00:	f7fe fa1e 	bl	8001f40 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b64      	cmp	r3, #100	; 0x64
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e06d      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b12:	4b3a      	ldr	r3, [pc, #232]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d0f0      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b1e:	4b36      	ldr	r3, [pc, #216]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b26:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d02e      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d027      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b3c:	4b2e      	ldr	r3, [pc, #184]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b3e:	6a1b      	ldr	r3, [r3, #32]
 8003b40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b44:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b46:	4b2e      	ldr	r3, [pc, #184]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b48:	2201      	movs	r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b4c:	4b2c      	ldr	r3, [pc, #176]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b52:	4a29      	ldr	r2, [pc, #164]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d014      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b62:	f7fe f9ed 	bl	8001f40 <HAL_GetTick>
 8003b66:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b68:	e00a      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b6a:	f7fe f9e9 	bl	8001f40 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d901      	bls.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e036      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b80:	4b1d      	ldr	r3, [pc, #116]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b82:	6a1b      	ldr	r3, [r3, #32]
 8003b84:	f003 0302 	and.w	r3, r3, #2
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d0ee      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b8c:	4b1a      	ldr	r3, [pc, #104]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b8e:	6a1b      	ldr	r3, [r3, #32]
 8003b90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	4917      	ldr	r1, [pc, #92]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b9e:	7dfb      	ldrb	r3, [r7, #23]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d105      	bne.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ba4:	4b14      	ldr	r3, [pc, #80]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ba6:	69db      	ldr	r3, [r3, #28]
 8003ba8:	4a13      	ldr	r2, [pc, #76]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003baa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0302 	and.w	r3, r3, #2
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d008      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bbc:	4b0e      	ldr	r3, [pc, #56]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	490b      	ldr	r1, [pc, #44]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0310 	and.w	r3, r3, #16
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d008      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bda:	4b07      	ldr	r3, [pc, #28]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	4904      	ldr	r1, [pc, #16]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3718      	adds	r7, #24
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	40021000 	.word	0x40021000
 8003bfc:	40007000 	.word	0x40007000
 8003c00:	42420440 	.word	0x42420440

08003c04 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003c04:	b590      	push	{r4, r7, lr}
 8003c06:	b08d      	sub	sp, #52	; 0x34
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003c0c:	4b5a      	ldr	r3, [pc, #360]	; (8003d78 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003c0e:	f107 040c 	add.w	r4, r7, #12
 8003c12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003c18:	f240 2301 	movw	r3, #513	; 0x201
 8003c1c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	627b      	str	r3, [r7, #36]	; 0x24
 8003c22:	2300      	movs	r3, #0
 8003c24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c26:	2300      	movs	r3, #0
 8003c28:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	61fb      	str	r3, [r7, #28]
 8003c2e:	2300      	movs	r3, #0
 8003c30:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2b10      	cmp	r3, #16
 8003c36:	d00a      	beq.n	8003c4e <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b10      	cmp	r3, #16
 8003c3c:	f200 8091 	bhi.w	8003d62 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d04c      	beq.n	8003ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d07c      	beq.n	8003d46 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003c4c:	e089      	b.n	8003d62 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8003c4e:	4b4b      	ldr	r3, [pc, #300]	; (8003d7c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003c54:	4b49      	ldr	r3, [pc, #292]	; (8003d7c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f000 8082 	beq.w	8003d66 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	0c9b      	lsrs	r3, r3, #18
 8003c66:	f003 030f 	and.w	r3, r3, #15
 8003c6a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003c6e:	4413      	add	r3, r2
 8003c70:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003c74:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d018      	beq.n	8003cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c80:	4b3e      	ldr	r3, [pc, #248]	; (8003d7c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	0c5b      	lsrs	r3, r3, #17
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003c8e:	4413      	add	r3, r2
 8003c90:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003c94:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00d      	beq.n	8003cbc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003ca0:	4a37      	ldr	r2, [pc, #220]	; (8003d80 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ca8:	6a3b      	ldr	r3, [r7, #32]
 8003caa:	fb02 f303 	mul.w	r3, r2, r3
 8003cae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cb0:	e004      	b.n	8003cbc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003cb2:	6a3b      	ldr	r3, [r7, #32]
 8003cb4:	4a33      	ldr	r2, [pc, #204]	; (8003d84 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8003cb6:	fb02 f303 	mul.w	r3, r2, r3
 8003cba:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003cbc:	4b2f      	ldr	r3, [pc, #188]	; (8003d7c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cc8:	d102      	bne.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8003cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ccc:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003cce:	e04a      	b.n	8003d66 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8003cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	4a2c      	ldr	r2, [pc, #176]	; (8003d88 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8003cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cda:	085b      	lsrs	r3, r3, #1
 8003cdc:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003cde:	e042      	b.n	8003d66 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8003ce0:	4b26      	ldr	r3, [pc, #152]	; (8003d7c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cf0:	d108      	bne.n	8003d04 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	f003 0302 	and.w	r3, r3, #2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d003      	beq.n	8003d04 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8003cfc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d00:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d02:	e01f      	b.n	8003d44 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d0e:	d109      	bne.n	8003d24 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8003d10:	4b1a      	ldr	r3, [pc, #104]	; (8003d7c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d003      	beq.n	8003d24 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8003d1c:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003d20:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d22:	e00f      	b.n	8003d44 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d2e:	d11c      	bne.n	8003d6a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8003d30:	4b12      	ldr	r3, [pc, #72]	; (8003d7c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d016      	beq.n	8003d6a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8003d3c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003d40:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003d42:	e012      	b.n	8003d6a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8003d44:	e011      	b.n	8003d6a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003d46:	f7ff fe75 	bl	8003a34 <HAL_RCC_GetPCLK2Freq>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	4b0b      	ldr	r3, [pc, #44]	; (8003d7c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	0b9b      	lsrs	r3, r3, #14
 8003d52:	f003 0303 	and.w	r3, r3, #3
 8003d56:	3301      	adds	r3, #1
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d5e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003d60:	e004      	b.n	8003d6c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8003d62:	bf00      	nop
 8003d64:	e002      	b.n	8003d6c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8003d66:	bf00      	nop
 8003d68:	e000      	b.n	8003d6c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8003d6a:	bf00      	nop
    }
  }
  return (frequency);
 8003d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3734      	adds	r7, #52	; 0x34
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd90      	pop	{r4, r7, pc}
 8003d76:	bf00      	nop
 8003d78:	08007f60 	.word	0x08007f60
 8003d7c:	40021000 	.word	0x40021000
 8003d80:	007a1200 	.word	0x007a1200
 8003d84:	003d0900 	.word	0x003d0900
 8003d88:	aaaaaaab 	.word	0xaaaaaaab

08003d8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e041      	b.n	8003e22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d106      	bne.n	8003db8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f7fd fe24 	bl	8001a00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2202      	movs	r2, #2
 8003dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	3304      	adds	r3, #4
 8003dc8:	4619      	mov	r1, r3
 8003dca:	4610      	mov	r0, r2
 8003dcc:	f000 fcb8 	bl	8004740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3708      	adds	r7, #8
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b082      	sub	sp, #8
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2202      	movs	r2, #2
 8003e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	6a1a      	ldr	r2, [r3, #32]
 8003e40:	f241 1311 	movw	r3, #4369	; 0x1111
 8003e44:	4013      	ands	r3, r2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10f      	bne.n	8003e6a <HAL_TIM_Base_DeInit+0x40>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	6a1a      	ldr	r2, [r3, #32]
 8003e50:	f240 4344 	movw	r3, #1092	; 0x444
 8003e54:	4013      	ands	r3, r2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d107      	bne.n	8003e6a <HAL_TIM_Base_DeInit+0x40>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f022 0201 	bic.w	r2, r2, #1
 8003e68:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f7fd fe52 	bl	8001b14 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3708      	adds	r7, #8
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
	...

08003ed4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d001      	beq.n	8003eec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e03a      	b.n	8003f62 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2202      	movs	r2, #2
 8003ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68da      	ldr	r2, [r3, #12]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f042 0201 	orr.w	r2, r2, #1
 8003f02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a18      	ldr	r2, [pc, #96]	; (8003f6c <HAL_TIM_Base_Start_IT+0x98>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d00e      	beq.n	8003f2c <HAL_TIM_Base_Start_IT+0x58>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f16:	d009      	beq.n	8003f2c <HAL_TIM_Base_Start_IT+0x58>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a14      	ldr	r2, [pc, #80]	; (8003f70 <HAL_TIM_Base_Start_IT+0x9c>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d004      	beq.n	8003f2c <HAL_TIM_Base_Start_IT+0x58>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a13      	ldr	r2, [pc, #76]	; (8003f74 <HAL_TIM_Base_Start_IT+0xa0>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d111      	bne.n	8003f50 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f003 0307 	and.w	r3, r3, #7
 8003f36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2b06      	cmp	r3, #6
 8003f3c:	d010      	beq.n	8003f60 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f042 0201 	orr.w	r2, r2, #1
 8003f4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f4e:	e007      	b.n	8003f60 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f042 0201 	orr.w	r2, r2, #1
 8003f5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3714      	adds	r7, #20
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bc80      	pop	{r7}
 8003f6a:	4770      	bx	lr
 8003f6c:	40012c00 	.word	0x40012c00
 8003f70:	40000400 	.word	0x40000400
 8003f74:	40000800 	.word	0x40000800

08003f78 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68da      	ldr	r2, [r3, #12]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 0201 	bic.w	r2, r2, #1
 8003f8e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	6a1a      	ldr	r2, [r3, #32]
 8003f96:	f241 1311 	movw	r3, #4369	; 0x1111
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d10f      	bne.n	8003fc0 <HAL_TIM_Base_Stop_IT+0x48>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	6a1a      	ldr	r2, [r3, #32]
 8003fa6:	f240 4344 	movw	r3, #1092	; 0x444
 8003faa:	4013      	ands	r3, r2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d107      	bne.n	8003fc0 <HAL_TIM_Base_Stop_IT+0x48>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f022 0201 	bic.w	r2, r2, #1
 8003fbe:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bc80      	pop	{r7}
 8003fd2:	4770      	bx	lr

08003fd4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e041      	b.n	800406a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d106      	bne.n	8004000 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 f839 	bl	8004072 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2202      	movs	r2, #2
 8004004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	3304      	adds	r3, #4
 8004010:	4619      	mov	r1, r3
 8004012:	4610      	mov	r0, r2
 8004014:	f000 fb94 	bl	8004740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3708      	adds	r7, #8
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004072:	b480      	push	{r7}
 8004074:	b083      	sub	sp, #12
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800407a:	bf00      	nop
 800407c:	370c      	adds	r7, #12
 800407e:	46bd      	mov	sp, r7
 8004080:	bc80      	pop	{r7}
 8004082:	4770      	bx	lr

08004084 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d109      	bne.n	80040a8 <HAL_TIM_PWM_Start+0x24>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b01      	cmp	r3, #1
 800409e:	bf14      	ite	ne
 80040a0:	2301      	movne	r3, #1
 80040a2:	2300      	moveq	r3, #0
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	e022      	b.n	80040ee <HAL_TIM_PWM_Start+0x6a>
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	2b04      	cmp	r3, #4
 80040ac:	d109      	bne.n	80040c2 <HAL_TIM_PWM_Start+0x3e>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	bf14      	ite	ne
 80040ba:	2301      	movne	r3, #1
 80040bc:	2300      	moveq	r3, #0
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	e015      	b.n	80040ee <HAL_TIM_PWM_Start+0x6a>
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	2b08      	cmp	r3, #8
 80040c6:	d109      	bne.n	80040dc <HAL_TIM_PWM_Start+0x58>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	bf14      	ite	ne
 80040d4:	2301      	movne	r3, #1
 80040d6:	2300      	moveq	r3, #0
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	e008      	b.n	80040ee <HAL_TIM_PWM_Start+0x6a>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	bf14      	ite	ne
 80040e8:	2301      	movne	r3, #1
 80040ea:	2300      	moveq	r3, #0
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e05e      	b.n	80041b4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d104      	bne.n	8004106 <HAL_TIM_PWM_Start+0x82>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2202      	movs	r2, #2
 8004100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004104:	e013      	b.n	800412e <HAL_TIM_PWM_Start+0xaa>
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	2b04      	cmp	r3, #4
 800410a:	d104      	bne.n	8004116 <HAL_TIM_PWM_Start+0x92>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2202      	movs	r2, #2
 8004110:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004114:	e00b      	b.n	800412e <HAL_TIM_PWM_Start+0xaa>
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	2b08      	cmp	r3, #8
 800411a:	d104      	bne.n	8004126 <HAL_TIM_PWM_Start+0xa2>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2202      	movs	r2, #2
 8004120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004124:	e003      	b.n	800412e <HAL_TIM_PWM_Start+0xaa>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2202      	movs	r2, #2
 800412a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2201      	movs	r2, #1
 8004134:	6839      	ldr	r1, [r7, #0]
 8004136:	4618      	mov	r0, r3
 8004138:	f000 fd82 	bl	8004c40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a1e      	ldr	r2, [pc, #120]	; (80041bc <HAL_TIM_PWM_Start+0x138>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d107      	bne.n	8004156 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004154:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a18      	ldr	r2, [pc, #96]	; (80041bc <HAL_TIM_PWM_Start+0x138>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d00e      	beq.n	800417e <HAL_TIM_PWM_Start+0xfa>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004168:	d009      	beq.n	800417e <HAL_TIM_PWM_Start+0xfa>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a14      	ldr	r2, [pc, #80]	; (80041c0 <HAL_TIM_PWM_Start+0x13c>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d004      	beq.n	800417e <HAL_TIM_PWM_Start+0xfa>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a12      	ldr	r2, [pc, #72]	; (80041c4 <HAL_TIM_PWM_Start+0x140>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d111      	bne.n	80041a2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f003 0307 	and.w	r3, r3, #7
 8004188:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2b06      	cmp	r3, #6
 800418e:	d010      	beq.n	80041b2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f042 0201 	orr.w	r2, r2, #1
 800419e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041a0:	e007      	b.n	80041b2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f042 0201 	orr.w	r2, r2, #1
 80041b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3710      	adds	r7, #16
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	40012c00 	.word	0x40012c00
 80041c0:	40000400 	.word	0x40000400
 80041c4:	40000800 	.word	0x40000800

080041c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d122      	bne.n	8004224 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	f003 0302 	and.w	r3, r3, #2
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d11b      	bne.n	8004224 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f06f 0202 	mvn.w	r2, #2
 80041f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2201      	movs	r2, #1
 80041fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	f003 0303 	and.w	r3, r3, #3
 8004206:	2b00      	cmp	r3, #0
 8004208:	d003      	beq.n	8004212 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 fa6f 	bl	80046ee <HAL_TIM_IC_CaptureCallback>
 8004210:	e005      	b.n	800421e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 fa62 	bl	80046dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 fa71 	bl	8004700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	f003 0304 	and.w	r3, r3, #4
 800422e:	2b04      	cmp	r3, #4
 8004230:	d122      	bne.n	8004278 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	f003 0304 	and.w	r3, r3, #4
 800423c:	2b04      	cmp	r3, #4
 800423e:	d11b      	bne.n	8004278 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f06f 0204 	mvn.w	r2, #4
 8004248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2202      	movs	r2, #2
 800424e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800425a:	2b00      	cmp	r3, #0
 800425c:	d003      	beq.n	8004266 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 fa45 	bl	80046ee <HAL_TIM_IC_CaptureCallback>
 8004264:	e005      	b.n	8004272 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 fa38 	bl	80046dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 fa47 	bl	8004700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	f003 0308 	and.w	r3, r3, #8
 8004282:	2b08      	cmp	r3, #8
 8004284:	d122      	bne.n	80042cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	f003 0308 	and.w	r3, r3, #8
 8004290:	2b08      	cmp	r3, #8
 8004292:	d11b      	bne.n	80042cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f06f 0208 	mvn.w	r2, #8
 800429c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2204      	movs	r2, #4
 80042a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	69db      	ldr	r3, [r3, #28]
 80042aa:	f003 0303 	and.w	r3, r3, #3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d003      	beq.n	80042ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 fa1b 	bl	80046ee <HAL_TIM_IC_CaptureCallback>
 80042b8:	e005      	b.n	80042c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 fa0e 	bl	80046dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 fa1d 	bl	8004700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	f003 0310 	and.w	r3, r3, #16
 80042d6:	2b10      	cmp	r3, #16
 80042d8:	d122      	bne.n	8004320 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	f003 0310 	and.w	r3, r3, #16
 80042e4:	2b10      	cmp	r3, #16
 80042e6:	d11b      	bne.n	8004320 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f06f 0210 	mvn.w	r2, #16
 80042f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2208      	movs	r2, #8
 80042f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	69db      	ldr	r3, [r3, #28]
 80042fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004302:	2b00      	cmp	r3, #0
 8004304:	d003      	beq.n	800430e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 f9f1 	bl	80046ee <HAL_TIM_IC_CaptureCallback>
 800430c:	e005      	b.n	800431a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 f9e4 	bl	80046dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f000 f9f3 	bl	8004700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b01      	cmp	r3, #1
 800432c:	d10e      	bne.n	800434c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	f003 0301 	and.w	r3, r3, #1
 8004338:	2b01      	cmp	r3, #1
 800433a:	d107      	bne.n	800434c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f06f 0201 	mvn.w	r2, #1
 8004344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f7fd fad8 	bl	80018fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004356:	2b80      	cmp	r3, #128	; 0x80
 8004358:	d10e      	bne.n	8004378 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004364:	2b80      	cmp	r3, #128	; 0x80
 8004366:	d107      	bne.n	8004378 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 fd40 	bl	8004df8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004382:	2b40      	cmp	r3, #64	; 0x40
 8004384:	d10e      	bne.n	80043a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004390:	2b40      	cmp	r3, #64	; 0x40
 8004392:	d107      	bne.n	80043a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800439c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 f9b7 	bl	8004712 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	f003 0320 	and.w	r3, r3, #32
 80043ae:	2b20      	cmp	r3, #32
 80043b0:	d10e      	bne.n	80043d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	f003 0320 	and.w	r3, r3, #32
 80043bc:	2b20      	cmp	r3, #32
 80043be:	d107      	bne.n	80043d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f06f 0220 	mvn.w	r2, #32
 80043c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 fd0b 	bl	8004de6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043d0:	bf00      	nop
 80043d2:	3708      	adds	r7, #8
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d101      	bne.n	80043f2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80043ee:	2302      	movs	r3, #2
 80043f0:	e0ac      	b.n	800454c <HAL_TIM_PWM_ConfigChannel+0x174>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2b0c      	cmp	r3, #12
 80043fe:	f200 809f 	bhi.w	8004540 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004402:	a201      	add	r2, pc, #4	; (adr r2, 8004408 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004408:	0800443d 	.word	0x0800443d
 800440c:	08004541 	.word	0x08004541
 8004410:	08004541 	.word	0x08004541
 8004414:	08004541 	.word	0x08004541
 8004418:	0800447d 	.word	0x0800447d
 800441c:	08004541 	.word	0x08004541
 8004420:	08004541 	.word	0x08004541
 8004424:	08004541 	.word	0x08004541
 8004428:	080044bf 	.word	0x080044bf
 800442c:	08004541 	.word	0x08004541
 8004430:	08004541 	.word	0x08004541
 8004434:	08004541 	.word	0x08004541
 8004438:	080044ff 	.word	0x080044ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68b9      	ldr	r1, [r7, #8]
 8004442:	4618      	mov	r0, r3
 8004444:	f000 f9de 	bl	8004804 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	699a      	ldr	r2, [r3, #24]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f042 0208 	orr.w	r2, r2, #8
 8004456:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	699a      	ldr	r2, [r3, #24]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f022 0204 	bic.w	r2, r2, #4
 8004466:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	6999      	ldr	r1, [r3, #24]
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	691a      	ldr	r2, [r3, #16]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	430a      	orrs	r2, r1
 8004478:	619a      	str	r2, [r3, #24]
      break;
 800447a:	e062      	b.n	8004542 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68b9      	ldr	r1, [r7, #8]
 8004482:	4618      	mov	r0, r3
 8004484:	f000 fa24 	bl	80048d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	699a      	ldr	r2, [r3, #24]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004496:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	699a      	ldr	r2, [r3, #24]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	6999      	ldr	r1, [r3, #24]
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	021a      	lsls	r2, r3, #8
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	430a      	orrs	r2, r1
 80044ba:	619a      	str	r2, [r3, #24]
      break;
 80044bc:	e041      	b.n	8004542 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68b9      	ldr	r1, [r7, #8]
 80044c4:	4618      	mov	r0, r3
 80044c6:	f000 fa6d 	bl	80049a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	69da      	ldr	r2, [r3, #28]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f042 0208 	orr.w	r2, r2, #8
 80044d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	69da      	ldr	r2, [r3, #28]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f022 0204 	bic.w	r2, r2, #4
 80044e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	69d9      	ldr	r1, [r3, #28]
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	691a      	ldr	r2, [r3, #16]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	430a      	orrs	r2, r1
 80044fa:	61da      	str	r2, [r3, #28]
      break;
 80044fc:	e021      	b.n	8004542 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68b9      	ldr	r1, [r7, #8]
 8004504:	4618      	mov	r0, r3
 8004506:	f000 fab7 	bl	8004a78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	69da      	ldr	r2, [r3, #28]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004518:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	69da      	ldr	r2, [r3, #28]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004528:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	69d9      	ldr	r1, [r3, #28]
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	021a      	lsls	r2, r3, #8
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	430a      	orrs	r2, r1
 800453c:	61da      	str	r2, [r3, #28]
      break;
 800453e:	e000      	b.n	8004542 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004540:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004564:	2b01      	cmp	r3, #1
 8004566:	d101      	bne.n	800456c <HAL_TIM_ConfigClockSource+0x18>
 8004568:	2302      	movs	r3, #2
 800456a:	e0b3      	b.n	80046d4 <HAL_TIM_ConfigClockSource+0x180>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2202      	movs	r2, #2
 8004578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800458a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004592:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045a4:	d03e      	beq.n	8004624 <HAL_TIM_ConfigClockSource+0xd0>
 80045a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045aa:	f200 8087 	bhi.w	80046bc <HAL_TIM_ConfigClockSource+0x168>
 80045ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045b2:	f000 8085 	beq.w	80046c0 <HAL_TIM_ConfigClockSource+0x16c>
 80045b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045ba:	d87f      	bhi.n	80046bc <HAL_TIM_ConfigClockSource+0x168>
 80045bc:	2b70      	cmp	r3, #112	; 0x70
 80045be:	d01a      	beq.n	80045f6 <HAL_TIM_ConfigClockSource+0xa2>
 80045c0:	2b70      	cmp	r3, #112	; 0x70
 80045c2:	d87b      	bhi.n	80046bc <HAL_TIM_ConfigClockSource+0x168>
 80045c4:	2b60      	cmp	r3, #96	; 0x60
 80045c6:	d050      	beq.n	800466a <HAL_TIM_ConfigClockSource+0x116>
 80045c8:	2b60      	cmp	r3, #96	; 0x60
 80045ca:	d877      	bhi.n	80046bc <HAL_TIM_ConfigClockSource+0x168>
 80045cc:	2b50      	cmp	r3, #80	; 0x50
 80045ce:	d03c      	beq.n	800464a <HAL_TIM_ConfigClockSource+0xf6>
 80045d0:	2b50      	cmp	r3, #80	; 0x50
 80045d2:	d873      	bhi.n	80046bc <HAL_TIM_ConfigClockSource+0x168>
 80045d4:	2b40      	cmp	r3, #64	; 0x40
 80045d6:	d058      	beq.n	800468a <HAL_TIM_ConfigClockSource+0x136>
 80045d8:	2b40      	cmp	r3, #64	; 0x40
 80045da:	d86f      	bhi.n	80046bc <HAL_TIM_ConfigClockSource+0x168>
 80045dc:	2b30      	cmp	r3, #48	; 0x30
 80045de:	d064      	beq.n	80046aa <HAL_TIM_ConfigClockSource+0x156>
 80045e0:	2b30      	cmp	r3, #48	; 0x30
 80045e2:	d86b      	bhi.n	80046bc <HAL_TIM_ConfigClockSource+0x168>
 80045e4:	2b20      	cmp	r3, #32
 80045e6:	d060      	beq.n	80046aa <HAL_TIM_ConfigClockSource+0x156>
 80045e8:	2b20      	cmp	r3, #32
 80045ea:	d867      	bhi.n	80046bc <HAL_TIM_ConfigClockSource+0x168>
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d05c      	beq.n	80046aa <HAL_TIM_ConfigClockSource+0x156>
 80045f0:	2b10      	cmp	r3, #16
 80045f2:	d05a      	beq.n	80046aa <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80045f4:	e062      	b.n	80046bc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6818      	ldr	r0, [r3, #0]
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	6899      	ldr	r1, [r3, #8]
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	685a      	ldr	r2, [r3, #4]
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	f000 fafc 	bl	8004c02 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004618:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	609a      	str	r2, [r3, #8]
      break;
 8004622:	e04e      	b.n	80046c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6818      	ldr	r0, [r3, #0]
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	6899      	ldr	r1, [r3, #8]
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	685a      	ldr	r2, [r3, #4]
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	f000 fae5 	bl	8004c02 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	689a      	ldr	r2, [r3, #8]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004646:	609a      	str	r2, [r3, #8]
      break;
 8004648:	e03b      	b.n	80046c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6818      	ldr	r0, [r3, #0]
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	6859      	ldr	r1, [r3, #4]
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	461a      	mov	r2, r3
 8004658:	f000 fa5c 	bl	8004b14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2150      	movs	r1, #80	; 0x50
 8004662:	4618      	mov	r0, r3
 8004664:	f000 fab3 	bl	8004bce <TIM_ITRx_SetConfig>
      break;
 8004668:	e02b      	b.n	80046c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6818      	ldr	r0, [r3, #0]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	6859      	ldr	r1, [r3, #4]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	461a      	mov	r2, r3
 8004678:	f000 fa7a 	bl	8004b70 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2160      	movs	r1, #96	; 0x60
 8004682:	4618      	mov	r0, r3
 8004684:	f000 faa3 	bl	8004bce <TIM_ITRx_SetConfig>
      break;
 8004688:	e01b      	b.n	80046c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6818      	ldr	r0, [r3, #0]
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	6859      	ldr	r1, [r3, #4]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	461a      	mov	r2, r3
 8004698:	f000 fa3c 	bl	8004b14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2140      	movs	r1, #64	; 0x40
 80046a2:	4618      	mov	r0, r3
 80046a4:	f000 fa93 	bl	8004bce <TIM_ITRx_SetConfig>
      break;
 80046a8:	e00b      	b.n	80046c2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4619      	mov	r1, r3
 80046b4:	4610      	mov	r0, r2
 80046b6:	f000 fa8a 	bl	8004bce <TIM_ITRx_SetConfig>
        break;
 80046ba:	e002      	b.n	80046c2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80046bc:	bf00      	nop
 80046be:	e000      	b.n	80046c2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80046c0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3710      	adds	r7, #16
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046e4:	bf00      	nop
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bc80      	pop	{r7}
 80046ec:	4770      	bx	lr

080046ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046ee:	b480      	push	{r7}
 80046f0:	b083      	sub	sp, #12
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046f6:	bf00      	nop
 80046f8:	370c      	adds	r7, #12
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bc80      	pop	{r7}
 80046fe:	4770      	bx	lr

08004700 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004708:	bf00      	nop
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	bc80      	pop	{r7}
 8004710:	4770      	bx	lr

08004712 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004712:	b480      	push	{r7}
 8004714:	b083      	sub	sp, #12
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800471a:	bf00      	nop
 800471c:	370c      	adds	r7, #12
 800471e:	46bd      	mov	sp, r7
 8004720:	bc80      	pop	{r7}
 8004722:	4770      	bx	lr

08004724 <HAL_TIM_Base_GetState>:
  * @brief  Return the TIM Base handle state.
  * @param  htim TIM Base handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(TIM_HandleTypeDef *htim)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  return htim->State;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004732:	b2db      	uxtb	r3, r3
}
 8004734:	4618      	mov	r0, r3
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	bc80      	pop	{r7}
 800473c:	4770      	bx	lr
	...

08004740 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a29      	ldr	r2, [pc, #164]	; (80047f8 <TIM_Base_SetConfig+0xb8>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d00b      	beq.n	8004770 <TIM_Base_SetConfig+0x30>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800475e:	d007      	beq.n	8004770 <TIM_Base_SetConfig+0x30>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a26      	ldr	r2, [pc, #152]	; (80047fc <TIM_Base_SetConfig+0xbc>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d003      	beq.n	8004770 <TIM_Base_SetConfig+0x30>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a25      	ldr	r2, [pc, #148]	; (8004800 <TIM_Base_SetConfig+0xc0>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d108      	bne.n	8004782 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004776:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	4313      	orrs	r3, r2
 8004780:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a1c      	ldr	r2, [pc, #112]	; (80047f8 <TIM_Base_SetConfig+0xb8>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d00b      	beq.n	80047a2 <TIM_Base_SetConfig+0x62>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004790:	d007      	beq.n	80047a2 <TIM_Base_SetConfig+0x62>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a19      	ldr	r2, [pc, #100]	; (80047fc <TIM_Base_SetConfig+0xbc>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d003      	beq.n	80047a2 <TIM_Base_SetConfig+0x62>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a18      	ldr	r2, [pc, #96]	; (8004800 <TIM_Base_SetConfig+0xc0>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d108      	bne.n	80047b4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	4313      	orrs	r3, r2
 80047c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	689a      	ldr	r2, [r3, #8]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a07      	ldr	r2, [pc, #28]	; (80047f8 <TIM_Base_SetConfig+0xb8>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d103      	bne.n	80047e8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	691a      	ldr	r2, [r3, #16]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	615a      	str	r2, [r3, #20]
}
 80047ee:	bf00      	nop
 80047f0:	3714      	adds	r7, #20
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bc80      	pop	{r7}
 80047f6:	4770      	bx	lr
 80047f8:	40012c00 	.word	0x40012c00
 80047fc:	40000400 	.word	0x40000400
 8004800:	40000800 	.word	0x40000800

08004804 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004804:	b480      	push	{r7}
 8004806:	b087      	sub	sp, #28
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a1b      	ldr	r3, [r3, #32]
 8004812:	f023 0201 	bic.w	r2, r3, #1
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a1b      	ldr	r3, [r3, #32]
 800481e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f023 0303 	bic.w	r3, r3, #3
 800483a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	4313      	orrs	r3, r2
 8004844:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	f023 0302 	bic.w	r3, r3, #2
 800484c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	697a      	ldr	r2, [r7, #20]
 8004854:	4313      	orrs	r3, r2
 8004856:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a1c      	ldr	r2, [pc, #112]	; (80048cc <TIM_OC1_SetConfig+0xc8>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d10c      	bne.n	800487a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	f023 0308 	bic.w	r3, r3, #8
 8004866:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	697a      	ldr	r2, [r7, #20]
 800486e:	4313      	orrs	r3, r2
 8004870:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	f023 0304 	bic.w	r3, r3, #4
 8004878:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a13      	ldr	r2, [pc, #76]	; (80048cc <TIM_OC1_SetConfig+0xc8>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d111      	bne.n	80048a6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004888:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004890:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	693a      	ldr	r2, [r7, #16]
 8004898:	4313      	orrs	r3, r2
 800489a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	699b      	ldr	r3, [r3, #24]
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	685a      	ldr	r2, [r3, #4]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	621a      	str	r2, [r3, #32]
}
 80048c0:	bf00      	nop
 80048c2:	371c      	adds	r7, #28
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bc80      	pop	{r7}
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	40012c00 	.word	0x40012c00

080048d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b087      	sub	sp, #28
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	f023 0210 	bic.w	r2, r3, #16
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004906:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	021b      	lsls	r3, r3, #8
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	4313      	orrs	r3, r2
 8004912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	f023 0320 	bic.w	r3, r3, #32
 800491a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	011b      	lsls	r3, r3, #4
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	4313      	orrs	r3, r2
 8004926:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a1d      	ldr	r2, [pc, #116]	; (80049a0 <TIM_OC2_SetConfig+0xd0>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d10d      	bne.n	800494c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004936:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	011b      	lsls	r3, r3, #4
 800493e:	697a      	ldr	r2, [r7, #20]
 8004940:	4313      	orrs	r3, r2
 8004942:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800494a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a14      	ldr	r2, [pc, #80]	; (80049a0 <TIM_OC2_SetConfig+0xd0>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d113      	bne.n	800497c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800495a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004962:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	695b      	ldr	r3, [r3, #20]
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	4313      	orrs	r3, r2
 800496e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	693a      	ldr	r2, [r7, #16]
 8004978:	4313      	orrs	r3, r2
 800497a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	693a      	ldr	r2, [r7, #16]
 8004980:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	685a      	ldr	r2, [r3, #4]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	621a      	str	r2, [r3, #32]
}
 8004996:	bf00      	nop
 8004998:	371c      	adds	r7, #28
 800499a:	46bd      	mov	sp, r7
 800499c:	bc80      	pop	{r7}
 800499e:	4770      	bx	lr
 80049a0:	40012c00 	.word	0x40012c00

080049a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b087      	sub	sp, #28
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a1b      	ldr	r3, [r3, #32]
 80049b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a1b      	ldr	r3, [r3, #32]
 80049be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	69db      	ldr	r3, [r3, #28]
 80049ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f023 0303 	bic.w	r3, r3, #3
 80049da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	021b      	lsls	r3, r3, #8
 80049f4:	697a      	ldr	r2, [r7, #20]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a1d      	ldr	r2, [pc, #116]	; (8004a74 <TIM_OC3_SetConfig+0xd0>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d10d      	bne.n	8004a1e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	021b      	lsls	r3, r3, #8
 8004a10:	697a      	ldr	r2, [r7, #20]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a14      	ldr	r2, [pc, #80]	; (8004a74 <TIM_OC3_SetConfig+0xd0>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d113      	bne.n	8004a4e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	011b      	lsls	r3, r3, #4
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	011b      	lsls	r3, r3, #4
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	693a      	ldr	r2, [r7, #16]
 8004a52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	685a      	ldr	r2, [r3, #4]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	621a      	str	r2, [r3, #32]
}
 8004a68:	bf00      	nop
 8004a6a:	371c      	adds	r7, #28
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bc80      	pop	{r7}
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	40012c00 	.word	0x40012c00

08004a78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b087      	sub	sp, #28
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	69db      	ldr	r3, [r3, #28]
 8004a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	021b      	lsls	r3, r3, #8
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ac2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	031b      	lsls	r3, r3, #12
 8004aca:	693a      	ldr	r2, [r7, #16]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a0f      	ldr	r2, [pc, #60]	; (8004b10 <TIM_OC4_SetConfig+0x98>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d109      	bne.n	8004aec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ade:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	695b      	ldr	r3, [r3, #20]
 8004ae4:	019b      	lsls	r3, r3, #6
 8004ae6:	697a      	ldr	r2, [r7, #20]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	685a      	ldr	r2, [r3, #4]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	621a      	str	r2, [r3, #32]
}
 8004b06:	bf00      	nop
 8004b08:	371c      	adds	r7, #28
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bc80      	pop	{r7}
 8004b0e:	4770      	bx	lr
 8004b10:	40012c00 	.word	0x40012c00

08004b14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b087      	sub	sp, #28
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6a1b      	ldr	r3, [r3, #32]
 8004b24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6a1b      	ldr	r3, [r3, #32]
 8004b2a:	f023 0201 	bic.w	r2, r3, #1
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	011b      	lsls	r3, r3, #4
 8004b44:	693a      	ldr	r2, [r7, #16]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	f023 030a 	bic.w	r3, r3, #10
 8004b50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b52:	697a      	ldr	r2, [r7, #20]
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	693a      	ldr	r2, [r7, #16]
 8004b5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	697a      	ldr	r2, [r7, #20]
 8004b64:	621a      	str	r2, [r3, #32]
}
 8004b66:	bf00      	nop
 8004b68:	371c      	adds	r7, #28
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bc80      	pop	{r7}
 8004b6e:	4770      	bx	lr

08004b70 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b087      	sub	sp, #28
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6a1b      	ldr	r3, [r3, #32]
 8004b80:	f023 0210 	bic.w	r2, r3, #16
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	699b      	ldr	r3, [r3, #24]
 8004b8c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6a1b      	ldr	r3, [r3, #32]
 8004b92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b9a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	031b      	lsls	r3, r3, #12
 8004ba0:	697a      	ldr	r2, [r7, #20]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004bac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	011b      	lsls	r3, r3, #4
 8004bb2:	693a      	ldr	r2, [r7, #16]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	693a      	ldr	r2, [r7, #16]
 8004bc2:	621a      	str	r2, [r3, #32]
}
 8004bc4:	bf00      	nop
 8004bc6:	371c      	adds	r7, #28
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bc80      	pop	{r7}
 8004bcc:	4770      	bx	lr

08004bce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bce:	b480      	push	{r7}
 8004bd0:	b085      	sub	sp, #20
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
 8004bd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004be4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004be6:	683a      	ldr	r2, [r7, #0]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	f043 0307 	orr.w	r3, r3, #7
 8004bf0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	609a      	str	r2, [r3, #8]
}
 8004bf8:	bf00      	nop
 8004bfa:	3714      	adds	r7, #20
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bc80      	pop	{r7}
 8004c00:	4770      	bx	lr

08004c02 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c02:	b480      	push	{r7}
 8004c04:	b087      	sub	sp, #28
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	60f8      	str	r0, [r7, #12]
 8004c0a:	60b9      	str	r1, [r7, #8]
 8004c0c:	607a      	str	r2, [r7, #4]
 8004c0e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c1c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	021a      	lsls	r2, r3, #8
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	431a      	orrs	r2, r3
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	697a      	ldr	r2, [r7, #20]
 8004c34:	609a      	str	r2, [r3, #8]
}
 8004c36:	bf00      	nop
 8004c38:	371c      	adds	r7, #28
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bc80      	pop	{r7}
 8004c3e:	4770      	bx	lr

08004c40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b087      	sub	sp, #28
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	f003 031f 	and.w	r3, r3, #31
 8004c52:	2201      	movs	r2, #1
 8004c54:	fa02 f303 	lsl.w	r3, r2, r3
 8004c58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6a1a      	ldr	r2, [r3, #32]
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	43db      	mvns	r3, r3
 8004c62:	401a      	ands	r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6a1a      	ldr	r2, [r3, #32]
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	f003 031f 	and.w	r3, r3, #31
 8004c72:	6879      	ldr	r1, [r7, #4]
 8004c74:	fa01 f303 	lsl.w	r3, r1, r3
 8004c78:	431a      	orrs	r2, r3
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	621a      	str	r2, [r3, #32]
}
 8004c7e:	bf00      	nop
 8004c80:	371c      	adds	r7, #28
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bc80      	pop	{r7}
 8004c86:	4770      	bx	lr

08004c88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b085      	sub	sp, #20
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d101      	bne.n	8004ca0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c9c:	2302      	movs	r3, #2
 8004c9e:	e046      	b.n	8004d2e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2202      	movs	r2, #2
 8004cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a16      	ldr	r2, [pc, #88]	; (8004d38 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d00e      	beq.n	8004d02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cec:	d009      	beq.n	8004d02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a12      	ldr	r2, [pc, #72]	; (8004d3c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d004      	beq.n	8004d02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a10      	ldr	r2, [pc, #64]	; (8004d40 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d10c      	bne.n	8004d1c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	68ba      	ldr	r2, [r7, #8]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	68ba      	ldr	r2, [r7, #8]
 8004d1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3714      	adds	r7, #20
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bc80      	pop	{r7}
 8004d36:	4770      	bx	lr
 8004d38:	40012c00 	.word	0x40012c00
 8004d3c:	40000400 	.word	0x40000400
 8004d40:	40000800 	.word	0x40000800

08004d44 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d101      	bne.n	8004d60 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	e03d      	b.n	8004ddc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	695b      	ldr	r3, [r3, #20]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	69db      	ldr	r3, [r3, #28]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004dda:	2300      	movs	r3, #0
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3714      	adds	r7, #20
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bc80      	pop	{r7}
 8004de4:	4770      	bx	lr

08004de6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004de6:	b480      	push	{r7}
 8004de8:	b083      	sub	sp, #12
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004dee:	bf00      	nop
 8004df0:	370c      	adds	r7, #12
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bc80      	pop	{r7}
 8004df6:	4770      	bx	lr

08004df8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e00:	bf00      	nop
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bc80      	pop	{r7}
 8004e08:	4770      	bx	lr

08004e0a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e0a:	b580      	push	{r7, lr}
 8004e0c:	b082      	sub	sp, #8
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d101      	bne.n	8004e1c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e03f      	b.n	8004e9c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d106      	bne.n	8004e36 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f7fc fea9 	bl	8001b88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2224      	movs	r2, #36	; 0x24
 8004e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68da      	ldr	r2, [r3, #12]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e4c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 fdd4 	bl	80059fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	691a      	ldr	r2, [r3, #16]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e62:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	695a      	ldr	r2, [r3, #20]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e72:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68da      	ldr	r2, [r3, #12]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e82:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2220      	movs	r2, #32
 8004e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2220      	movs	r2, #32
 8004e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3708      	adds	r7, #8
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d101      	bne.n	8004eb6 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e021      	b.n	8004efa <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2224      	movs	r2, #36	; 0x24
 8004eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68da      	ldr	r2, [r3, #12]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ecc:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f7fc fef2 	bl	8001cb8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3708      	adds	r7, #8
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}

08004f02 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f02:	b580      	push	{r7, lr}
 8004f04:	b08a      	sub	sp, #40	; 0x28
 8004f06:	af02      	add	r7, sp, #8
 8004f08:	60f8      	str	r0, [r7, #12]
 8004f0a:	60b9      	str	r1, [r7, #8]
 8004f0c:	603b      	str	r3, [r7, #0]
 8004f0e:	4613      	mov	r3, r2
 8004f10:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004f12:	2300      	movs	r3, #0
 8004f14:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	2b20      	cmp	r3, #32
 8004f20:	d17c      	bne.n	800501c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d002      	beq.n	8004f2e <HAL_UART_Transmit+0x2c>
 8004f28:	88fb      	ldrh	r3, [r7, #6]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d101      	bne.n	8004f32 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e075      	b.n	800501e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d101      	bne.n	8004f40 <HAL_UART_Transmit+0x3e>
 8004f3c:	2302      	movs	r3, #2
 8004f3e:	e06e      	b.n	800501e <HAL_UART_Transmit+0x11c>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2221      	movs	r2, #33	; 0x21
 8004f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f56:	f7fc fff3 	bl	8001f40 <HAL_GetTick>
 8004f5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	88fa      	ldrh	r2, [r7, #6]
 8004f60:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	88fa      	ldrh	r2, [r7, #6]
 8004f66:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f70:	d108      	bne.n	8004f84 <HAL_UART_Transmit+0x82>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d104      	bne.n	8004f84 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	61bb      	str	r3, [r7, #24]
 8004f82:	e003      	b.n	8004f8c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004f94:	e02a      	b.n	8004fec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	9300      	str	r3, [sp, #0]
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	2180      	movs	r1, #128	; 0x80
 8004fa0:	68f8      	ldr	r0, [r7, #12]
 8004fa2:	f000 faf7 	bl	8005594 <UART_WaitOnFlagUntilTimeout>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d001      	beq.n	8004fb0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	e036      	b.n	800501e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d10b      	bne.n	8004fce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	881b      	ldrh	r3, [r3, #0]
 8004fba:	461a      	mov	r2, r3
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fc4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	3302      	adds	r3, #2
 8004fca:	61bb      	str	r3, [r7, #24]
 8004fcc:	e007      	b.n	8004fde <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	781a      	ldrb	r2, [r3, #0]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	3301      	adds	r3, #1
 8004fdc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d1cf      	bne.n	8004f96 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	9300      	str	r3, [sp, #0]
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	2140      	movs	r1, #64	; 0x40
 8005000:	68f8      	ldr	r0, [r7, #12]
 8005002:	f000 fac7 	bl	8005594 <UART_WaitOnFlagUntilTimeout>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d001      	beq.n	8005010 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	e006      	b.n	800501e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2220      	movs	r2, #32
 8005014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005018:	2300      	movs	r3, #0
 800501a:	e000      	b.n	800501e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800501c:	2302      	movs	r3, #2
  }
}
 800501e:	4618      	mov	r0, r3
 8005020:	3720      	adds	r7, #32
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}

08005026 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005026:	b580      	push	{r7, lr}
 8005028:	b084      	sub	sp, #16
 800502a:	af00      	add	r7, sp, #0
 800502c:	60f8      	str	r0, [r7, #12]
 800502e:	60b9      	str	r1, [r7, #8]
 8005030:	4613      	mov	r3, r2
 8005032:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800503a:	b2db      	uxtb	r3, r3
 800503c:	2b20      	cmp	r3, #32
 800503e:	d11d      	bne.n	800507c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d002      	beq.n	800504c <HAL_UART_Receive_IT+0x26>
 8005046:	88fb      	ldrh	r3, [r7, #6]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d101      	bne.n	8005050 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e016      	b.n	800507e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005056:	2b01      	cmp	r3, #1
 8005058:	d101      	bne.n	800505e <HAL_UART_Receive_IT+0x38>
 800505a:	2302      	movs	r3, #2
 800505c:	e00f      	b.n	800507e <HAL_UART_Receive_IT+0x58>
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2201      	movs	r2, #1
 8005062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2200      	movs	r2, #0
 800506a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800506c:	88fb      	ldrh	r3, [r7, #6]
 800506e:	461a      	mov	r2, r3
 8005070:	68b9      	ldr	r1, [r7, #8]
 8005072:	68f8      	ldr	r0, [r7, #12]
 8005074:	f000 fad8 	bl	8005628 <UART_Start_Receive_IT>
 8005078:	4603      	mov	r3, r0
 800507a:	e000      	b.n	800507e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800507c:	2302      	movs	r3, #2
  }
}
 800507e:	4618      	mov	r0, r3
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
	...

08005088 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 8005090:	2301      	movs	r3, #1
 8005092:	60fb      	str	r3, [r7, #12]

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68da      	ldr	r2, [r3, #12]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 80050a2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	695a      	ldr	r2, [r3, #20]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f022 0201 	bic.w	r2, r2, #1
 80050b2:	615a      	str	r2, [r3, #20]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d107      	bne.n	80050cc <HAL_UART_Abort_IT+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68da      	ldr	r2, [r3, #12]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f022 0210 	bic.w	r2, r2, #16
 80050ca:	60da      	str	r2, [r3, #12]
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00f      	beq.n	80050f4 <HAL_UART_Abort_IT+0x6c>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	695b      	ldr	r3, [r3, #20]
 80050da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d004      	beq.n	80050ec <HAL_UART_Abort_IT+0x64>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050e6:	4a40      	ldr	r2, [pc, #256]	; (80051e8 <HAL_UART_Abort_IT+0x160>)
 80050e8:	635a      	str	r2, [r3, #52]	; 0x34
 80050ea:	e003      	b.n	80050f4 <HAL_UART_Abort_IT+0x6c>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050f0:	2200      	movs	r2, #0
 80050f2:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d00f      	beq.n	800511c <HAL_UART_Abort_IT+0x94>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	695b      	ldr	r3, [r3, #20]
 8005102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005106:	2b00      	cmp	r3, #0
 8005108:	d004      	beq.n	8005114 <HAL_UART_Abort_IT+0x8c>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510e:	4a37      	ldr	r2, [pc, #220]	; (80051ec <HAL_UART_Abort_IT+0x164>)
 8005110:	635a      	str	r2, [r3, #52]	; 0x34
 8005112:	e003      	b.n	800511c <HAL_UART_Abort_IT+0x94>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005118:	2200      	movs	r2, #0
 800511a:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005126:	2b00      	cmp	r3, #0
 8005128:	d01a      	beq.n	8005160 <HAL_UART_Abort_IT+0xd8>
  {
    /* Disable DMA Tx at UART level */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	695a      	ldr	r2, [r3, #20]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005138:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00e      	beq.n	8005160 <HAL_UART_Abort_IT+0xd8>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005146:	4618      	mov	r0, r3
 8005148:	f7fd fda6 	bl	8002c98 <HAL_DMA_Abort_IT>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d004      	beq.n	800515c <HAL_UART_Abort_IT+0xd4>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005156:	2200      	movs	r2, #0
 8005158:	635a      	str	r2, [r3, #52]	; 0x34
 800515a:	e001      	b.n	8005160 <HAL_UART_Abort_IT+0xd8>
      }
      else
      {
        AbortCplt = 0x00U;
 800515c:	2300      	movs	r3, #0
 800515e:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800516a:	2b00      	cmp	r3, #0
 800516c:	d01c      	beq.n	80051a8 <HAL_UART_Abort_IT+0x120>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	695a      	ldr	r2, [r3, #20]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800517c:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005182:	2b00      	cmp	r3, #0
 8005184:	d010      	beq.n	80051a8 <HAL_UART_Abort_IT+0x120>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518a:	4618      	mov	r0, r3
 800518c:	f7fd fd84 	bl	8002c98 <HAL_DMA_Abort_IT>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d006      	beq.n	80051a4 <HAL_UART_Abort_IT+0x11c>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519a:	2200      	movs	r2, #0
 800519c:	635a      	str	r2, [r3, #52]	; 0x34
        AbortCplt = 0x01U;
 800519e:	2301      	movs	r3, #1
 80051a0:	60fb      	str	r3, [r7, #12]
 80051a2:	e001      	b.n	80051a8 <HAL_UART_Abort_IT+0x120>
      }
      else
      {
        AbortCplt = 0x00U;
 80051a4:	2300      	movs	r3, #0
 80051a6:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d116      	bne.n	80051dc <HAL_UART_Abort_IT+0x154>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2220      	movs	r2, #32
 80051c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    huart->RxState = HAL_UART_STATE_READY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2220      	movs	r2, #32
 80051cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f9bd 	bl	8005556 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3710      	adds	r7, #16
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	0800571b 	.word	0x0800571b
 80051ec:	0800577b 	.word	0x0800577b

080051f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b08a      	sub	sp, #40	; 0x28
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005210:	2300      	movs	r3, #0
 8005212:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005214:	2300      	movs	r3, #0
 8005216:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521a:	f003 030f 	and.w	r3, r3, #15
 800521e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d10d      	bne.n	8005242 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005228:	f003 0320 	and.w	r3, r3, #32
 800522c:	2b00      	cmp	r3, #0
 800522e:	d008      	beq.n	8005242 <HAL_UART_IRQHandler+0x52>
 8005230:	6a3b      	ldr	r3, [r7, #32]
 8005232:	f003 0320 	and.w	r3, r3, #32
 8005236:	2b00      	cmp	r3, #0
 8005238:	d003      	beq.n	8005242 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 fb34 	bl	80058a8 <UART_Receive_IT>
      return;
 8005240:	e17b      	b.n	800553a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	2b00      	cmp	r3, #0
 8005246:	f000 80b1 	beq.w	80053ac <HAL_UART_IRQHandler+0x1bc>
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	f003 0301 	and.w	r3, r3, #1
 8005250:	2b00      	cmp	r3, #0
 8005252:	d105      	bne.n	8005260 <HAL_UART_IRQHandler+0x70>
 8005254:	6a3b      	ldr	r3, [r7, #32]
 8005256:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800525a:	2b00      	cmp	r3, #0
 800525c:	f000 80a6 	beq.w	80053ac <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005262:	f003 0301 	and.w	r3, r3, #1
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00a      	beq.n	8005280 <HAL_UART_IRQHandler+0x90>
 800526a:	6a3b      	ldr	r3, [r7, #32]
 800526c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005270:	2b00      	cmp	r3, #0
 8005272:	d005      	beq.n	8005280 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005278:	f043 0201 	orr.w	r2, r3, #1
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005282:	f003 0304 	and.w	r3, r3, #4
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00a      	beq.n	80052a0 <HAL_UART_IRQHandler+0xb0>
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	f003 0301 	and.w	r3, r3, #1
 8005290:	2b00      	cmp	r3, #0
 8005292:	d005      	beq.n	80052a0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005298:	f043 0202 	orr.w	r2, r3, #2
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a2:	f003 0302 	and.w	r3, r3, #2
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00a      	beq.n	80052c0 <HAL_UART_IRQHandler+0xd0>
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	f003 0301 	and.w	r3, r3, #1
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d005      	beq.n	80052c0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b8:	f043 0204 	orr.w	r2, r3, #4
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80052c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c2:	f003 0308 	and.w	r3, r3, #8
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d00f      	beq.n	80052ea <HAL_UART_IRQHandler+0xfa>
 80052ca:	6a3b      	ldr	r3, [r7, #32]
 80052cc:	f003 0320 	and.w	r3, r3, #32
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d104      	bne.n	80052de <HAL_UART_IRQHandler+0xee>
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	f003 0301 	and.w	r3, r3, #1
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d005      	beq.n	80052ea <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e2:	f043 0208 	orr.w	r2, r3, #8
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	f000 811e 	beq.w	8005530 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f6:	f003 0320 	and.w	r3, r3, #32
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d007      	beq.n	800530e <HAL_UART_IRQHandler+0x11e>
 80052fe:	6a3b      	ldr	r3, [r7, #32]
 8005300:	f003 0320 	and.w	r3, r3, #32
 8005304:	2b00      	cmp	r3, #0
 8005306:	d002      	beq.n	800530e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f000 facd 	bl	80058a8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	695b      	ldr	r3, [r3, #20]
 8005314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005318:	2b00      	cmp	r3, #0
 800531a:	bf14      	ite	ne
 800531c:	2301      	movne	r3, #1
 800531e:	2300      	moveq	r3, #0
 8005320:	b2db      	uxtb	r3, r3
 8005322:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005328:	f003 0308 	and.w	r3, r3, #8
 800532c:	2b00      	cmp	r3, #0
 800532e:	d102      	bne.n	8005336 <HAL_UART_IRQHandler+0x146>
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d031      	beq.n	800539a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 f9af 	bl	800569a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	695b      	ldr	r3, [r3, #20]
 8005342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005346:	2b00      	cmp	r3, #0
 8005348:	d023      	beq.n	8005392 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	695a      	ldr	r2, [r3, #20]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005358:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535e:	2b00      	cmp	r3, #0
 8005360:	d013      	beq.n	800538a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005366:	4a76      	ldr	r2, [pc, #472]	; (8005540 <HAL_UART_IRQHandler+0x350>)
 8005368:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536e:	4618      	mov	r0, r3
 8005370:	f7fd fc92 	bl	8002c98 <HAL_DMA_Abort_IT>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d016      	beq.n	80053a8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800537e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005384:	4610      	mov	r0, r2
 8005386:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005388:	e00e      	b.n	80053a8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f7fc faa8 	bl	80018e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005390:	e00a      	b.n	80053a8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f7fc faa4 	bl	80018e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005398:	e006      	b.n	80053a8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f7fc faa0 	bl	80018e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80053a6:	e0c3      	b.n	8005530 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053a8:	bf00      	nop
    return;
 80053aa:	e0c1      	b.n	8005530 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	f040 80a1 	bne.w	80054f8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80053b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b8:	f003 0310 	and.w	r3, r3, #16
 80053bc:	2b00      	cmp	r3, #0
 80053be:	f000 809b 	beq.w	80054f8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80053c2:	6a3b      	ldr	r3, [r7, #32]
 80053c4:	f003 0310 	and.w	r3, r3, #16
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	f000 8095 	beq.w	80054f8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053ce:	2300      	movs	r3, #0
 80053d0:	60fb      	str	r3, [r7, #12]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	60fb      	str	r3, [r7, #12]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	60fb      	str	r3, [r7, #12]
 80053e2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d04e      	beq.n	8005490 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80053fc:	8a3b      	ldrh	r3, [r7, #16]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	f000 8098 	beq.w	8005534 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005408:	8a3a      	ldrh	r2, [r7, #16]
 800540a:	429a      	cmp	r2, r3
 800540c:	f080 8092 	bcs.w	8005534 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	8a3a      	ldrh	r2, [r7, #16]
 8005414:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	2b20      	cmp	r3, #32
 800541e:	d02b      	beq.n	8005478 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68da      	ldr	r2, [r3, #12]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800542e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	695a      	ldr	r2, [r3, #20]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f022 0201 	bic.w	r2, r2, #1
 800543e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	695a      	ldr	r2, [r3, #20]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800544e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2220      	movs	r2, #32
 8005454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68da      	ldr	r2, [r3, #12]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f022 0210 	bic.w	r2, r2, #16
 800546c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005472:	4618      	mov	r0, r3
 8005474:	f7fd fbd5 	bl	8002c22 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005480:	b29b      	uxth	r3, r3
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	b29b      	uxth	r3, r3
 8005486:	4619      	mov	r1, r3
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 f86d 	bl	8005568 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800548e:	e051      	b.n	8005534 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005498:	b29b      	uxth	r3, r3
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d047      	beq.n	8005538 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80054a8:	8a7b      	ldrh	r3, [r7, #18]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d044      	beq.n	8005538 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68da      	ldr	r2, [r3, #12]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80054bc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	695a      	ldr	r2, [r3, #20]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f022 0201 	bic.w	r2, r2, #1
 80054cc:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2220      	movs	r2, #32
 80054d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	68da      	ldr	r2, [r3, #12]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f022 0210 	bic.w	r2, r2, #16
 80054ea:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80054ec:	8a7b      	ldrh	r3, [r7, #18]
 80054ee:	4619      	mov	r1, r3
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f000 f839 	bl	8005568 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80054f6:	e01f      	b.n	8005538 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80054f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d008      	beq.n	8005514 <HAL_UART_IRQHandler+0x324>
 8005502:	6a3b      	ldr	r3, [r7, #32]
 8005504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005508:	2b00      	cmp	r3, #0
 800550a:	d003      	beq.n	8005514 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 f964 	bl	80057da <UART_Transmit_IT>
    return;
 8005512:	e012      	b.n	800553a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00d      	beq.n	800553a <HAL_UART_IRQHandler+0x34a>
 800551e:	6a3b      	ldr	r3, [r7, #32]
 8005520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005524:	2b00      	cmp	r3, #0
 8005526:	d008      	beq.n	800553a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 f9a5 	bl	8005878 <UART_EndTransmit_IT>
    return;
 800552e:	e004      	b.n	800553a <HAL_UART_IRQHandler+0x34a>
    return;
 8005530:	bf00      	nop
 8005532:	e002      	b.n	800553a <HAL_UART_IRQHandler+0x34a>
      return;
 8005534:	bf00      	nop
 8005536:	e000      	b.n	800553a <HAL_UART_IRQHandler+0x34a>
      return;
 8005538:	bf00      	nop
  }
}
 800553a:	3728      	adds	r7, #40	; 0x28
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	080056f3 	.word	0x080056f3

08005544 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800554c:	bf00      	nop
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	bc80      	pop	{r7}
 8005554:	4770      	bx	lr

08005556 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8005556:	b480      	push	{r7}
 8005558:	b083      	sub	sp, #12
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800555e:	bf00      	nop
 8005560:	370c      	adds	r7, #12
 8005562:	46bd      	mov	sp, r7
 8005564:	bc80      	pop	{r7}
 8005566:	4770      	bx	lr

08005568 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005568:	b480      	push	{r7}
 800556a:	b083      	sub	sp, #12
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	460b      	mov	r3, r1
 8005572:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005574:	bf00      	nop
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	bc80      	pop	{r7}
 800557c:	4770      	bx	lr

0800557e <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 800557e:	b480      	push	{r7}
 8005580:	b083      	sub	sp, #12
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800558a:	4618      	mov	r0, r3
 800558c:	370c      	adds	r7, #12
 800558e:	46bd      	mov	sp, r7
 8005590:	bc80      	pop	{r7}
 8005592:	4770      	bx	lr

08005594 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	603b      	str	r3, [r7, #0]
 80055a0:	4613      	mov	r3, r2
 80055a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055a4:	e02c      	b.n	8005600 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ac:	d028      	beq.n	8005600 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80055ae:	69bb      	ldr	r3, [r7, #24]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d007      	beq.n	80055c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80055b4:	f7fc fcc4 	bl	8001f40 <HAL_GetTick>
 80055b8:	4602      	mov	r2, r0
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	69ba      	ldr	r2, [r7, #24]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d21d      	bcs.n	8005600 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68da      	ldr	r2, [r3, #12]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80055d2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	695a      	ldr	r2, [r3, #20]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f022 0201 	bic.w	r2, r2, #1
 80055e2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2220      	movs	r2, #32
 80055e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2220      	movs	r2, #32
 80055f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	e00f      	b.n	8005620 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	4013      	ands	r3, r2
 800560a:	68ba      	ldr	r2, [r7, #8]
 800560c:	429a      	cmp	r2, r3
 800560e:	bf0c      	ite	eq
 8005610:	2301      	moveq	r3, #1
 8005612:	2300      	movne	r3, #0
 8005614:	b2db      	uxtb	r3, r3
 8005616:	461a      	mov	r2, r3
 8005618:	79fb      	ldrb	r3, [r7, #7]
 800561a:	429a      	cmp	r2, r3
 800561c:	d0c3      	beq.n	80055a6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	3710      	adds	r7, #16
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005628:	b480      	push	{r7}
 800562a:	b085      	sub	sp, #20
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	4613      	mov	r3, r2
 8005634:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	68ba      	ldr	r2, [r7, #8]
 800563a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	88fa      	ldrh	r2, [r7, #6]
 8005640:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	88fa      	ldrh	r2, [r7, #6]
 8005646:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2200      	movs	r2, #0
 800564c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2222      	movs	r2, #34	; 0x22
 8005652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68da      	ldr	r2, [r3, #12]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800566c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	695a      	ldr	r2, [r3, #20]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f042 0201 	orr.w	r2, r2, #1
 800567c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68da      	ldr	r2, [r3, #12]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f042 0220 	orr.w	r2, r2, #32
 800568c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800568e:	2300      	movs	r3, #0
}
 8005690:	4618      	mov	r0, r3
 8005692:	3714      	adds	r7, #20
 8005694:	46bd      	mov	sp, r7
 8005696:	bc80      	pop	{r7}
 8005698:	4770      	bx	lr

0800569a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800569a:	b480      	push	{r7}
 800569c:	b083      	sub	sp, #12
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68da      	ldr	r2, [r3, #12]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80056b0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	695a      	ldr	r2, [r3, #20]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f022 0201 	bic.w	r2, r2, #1
 80056c0:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d107      	bne.n	80056da <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68da      	ldr	r2, [r3, #12]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f022 0210 	bic.w	r2, r2, #16
 80056d8:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2220      	movs	r2, #32
 80056de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80056e8:	bf00      	nop
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bc80      	pop	{r7}
 80056f0:	4770      	bx	lr

080056f2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80056f2:	b580      	push	{r7, lr}
 80056f4:	b084      	sub	sp, #16
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800570c:	68f8      	ldr	r0, [r7, #12]
 800570e:	f7fc f8e7 	bl	80018e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005712:	bf00      	nop
 8005714:	3710      	adds	r7, #16
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800571a:	b580      	push	{r7, lr}
 800571c:	b084      	sub	sp, #16
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005726:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800572c:	2200      	movs	r2, #0
 800572e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005734:	2b00      	cmp	r3, #0
 8005736:	d004      	beq.n	8005742 <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800573e:	2b00      	cmp	r3, #0
 8005740:	d117      	bne.n	8005772 <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2200      	movs	r2, #0
 8005746:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2220      	movs	r2, #32
 8005758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2220      	movs	r2, #32
 8005760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2200      	movs	r2, #0
 8005768:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800576a:	68f8      	ldr	r0, [r7, #12]
 800576c:	f7ff fef3 	bl	8005556 <HAL_UART_AbortCpltCallback>
 8005770:	e000      	b.n	8005774 <UART_DMATxAbortCallback+0x5a>
      return;
 8005772:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005774:	3710      	adds	r7, #16
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}

0800577a <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800577a:	b580      	push	{r7, lr}
 800577c:	b084      	sub	sp, #16
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005786:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800578c:	2200      	movs	r2, #0
 800578e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005794:	2b00      	cmp	r3, #0
 8005796:	d004      	beq.n	80057a2 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800579c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d117      	bne.n	80057d2 <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2200      	movs	r2, #0
 80057a6:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2200      	movs	r2, #0
 80057ac:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2220      	movs	r2, #32
 80057b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2220      	movs	r2, #32
 80057c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2200      	movs	r2, #0
 80057c8:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 80057ca:	68f8      	ldr	r0, [r7, #12]
 80057cc:	f7ff fec3 	bl	8005556 <HAL_UART_AbortCpltCallback>
 80057d0:	e000      	b.n	80057d4 <UART_DMARxAbortCallback+0x5a>
      return;
 80057d2:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057d4:	3710      	adds	r7, #16
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}

080057da <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80057da:	b480      	push	{r7}
 80057dc:	b085      	sub	sp, #20
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	2b21      	cmp	r3, #33	; 0x21
 80057ec:	d13e      	bne.n	800586c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057f6:	d114      	bne.n	8005822 <UART_Transmit_IT+0x48>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d110      	bne.n	8005822 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6a1b      	ldr	r3, [r3, #32]
 8005804:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	881b      	ldrh	r3, [r3, #0]
 800580a:	461a      	mov	r2, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005814:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a1b      	ldr	r3, [r3, #32]
 800581a:	1c9a      	adds	r2, r3, #2
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	621a      	str	r2, [r3, #32]
 8005820:	e008      	b.n	8005834 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a1b      	ldr	r3, [r3, #32]
 8005826:	1c59      	adds	r1, r3, #1
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	6211      	str	r1, [r2, #32]
 800582c:	781a      	ldrb	r2, [r3, #0]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005838:	b29b      	uxth	r3, r3
 800583a:	3b01      	subs	r3, #1
 800583c:	b29b      	uxth	r3, r3
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	4619      	mov	r1, r3
 8005842:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005844:	2b00      	cmp	r3, #0
 8005846:	d10f      	bne.n	8005868 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	68da      	ldr	r2, [r3, #12]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005856:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68da      	ldr	r2, [r3, #12]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005866:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005868:	2300      	movs	r3, #0
 800586a:	e000      	b.n	800586e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800586c:	2302      	movs	r3, #2
  }
}
 800586e:	4618      	mov	r0, r3
 8005870:	3714      	adds	r7, #20
 8005872:	46bd      	mov	sp, r7
 8005874:	bc80      	pop	{r7}
 8005876:	4770      	bx	lr

08005878 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	68da      	ldr	r2, [r3, #12]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800588e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2220      	movs	r2, #32
 8005894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f7ff fe53 	bl	8005544 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3708      	adds	r7, #8
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b086      	sub	sp, #24
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	2b22      	cmp	r3, #34	; 0x22
 80058ba:	f040 8099 	bne.w	80059f0 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058c6:	d117      	bne.n	80058f8 <UART_Receive_IT+0x50>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	691b      	ldr	r3, [r3, #16]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d113      	bne.n	80058f8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80058d0:	2300      	movs	r3, #0
 80058d2:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d8:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058e6:	b29a      	uxth	r2, r3
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f0:	1c9a      	adds	r2, r3, #2
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	629a      	str	r2, [r3, #40]	; 0x28
 80058f6:	e026      	b.n	8005946 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058fc:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80058fe:	2300      	movs	r3, #0
 8005900:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800590a:	d007      	beq.n	800591c <UART_Receive_IT+0x74>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d10a      	bne.n	800592a <UART_Receive_IT+0x82>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d106      	bne.n	800592a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	b2da      	uxtb	r2, r3
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	701a      	strb	r2, [r3, #0]
 8005928:	e008      	b.n	800593c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	b2db      	uxtb	r3, r3
 8005932:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005936:	b2da      	uxtb	r2, r3
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005940:	1c5a      	adds	r2, r3, #1
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800594a:	b29b      	uxth	r3, r3
 800594c:	3b01      	subs	r3, #1
 800594e:	b29b      	uxth	r3, r3
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	4619      	mov	r1, r3
 8005954:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005956:	2b00      	cmp	r3, #0
 8005958:	d148      	bne.n	80059ec <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68da      	ldr	r2, [r3, #12]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f022 0220 	bic.w	r2, r2, #32
 8005968:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68da      	ldr	r2, [r3, #12]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005978:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	695a      	ldr	r2, [r3, #20]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f022 0201 	bic.w	r2, r2, #1
 8005988:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2220      	movs	r2, #32
 800598e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005996:	2b01      	cmp	r3, #1
 8005998:	d123      	bne.n	80059e2 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68da      	ldr	r2, [r3, #12]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f022 0210 	bic.w	r2, r2, #16
 80059ae:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 0310 	and.w	r3, r3, #16
 80059ba:	2b10      	cmp	r3, #16
 80059bc:	d10a      	bne.n	80059d4 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80059be:	2300      	movs	r3, #0
 80059c0:	60fb      	str	r3, [r7, #12]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	60fb      	str	r3, [r7, #12]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	60fb      	str	r3, [r7, #12]
 80059d2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80059d8:	4619      	mov	r1, r3
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f7ff fdc4 	bl	8005568 <HAL_UARTEx_RxEventCallback>
 80059e0:	e002      	b.n	80059e8 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f7fb ff6e 	bl	80018c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80059e8:	2300      	movs	r3, #0
 80059ea:	e002      	b.n	80059f2 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80059ec:	2300      	movs	r3, #0
 80059ee:	e000      	b.n	80059f2 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80059f0:	2302      	movs	r3, #2
  }
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3718      	adds	r7, #24
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
	...

080059fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	68da      	ldr	r2, [r3, #12]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	430a      	orrs	r2, r1
 8005a18:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	689a      	ldr	r2, [r3, #8]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	431a      	orrs	r2, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	695b      	ldr	r3, [r3, #20]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005a36:	f023 030c 	bic.w	r3, r3, #12
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	6812      	ldr	r2, [r2, #0]
 8005a3e:	68b9      	ldr	r1, [r7, #8]
 8005a40:	430b      	orrs	r3, r1
 8005a42:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	699a      	ldr	r2, [r3, #24]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	430a      	orrs	r2, r1
 8005a58:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a2c      	ldr	r2, [pc, #176]	; (8005b10 <UART_SetConfig+0x114>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d103      	bne.n	8005a6c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005a64:	f7fd ffe6 	bl	8003a34 <HAL_RCC_GetPCLK2Freq>
 8005a68:	60f8      	str	r0, [r7, #12]
 8005a6a:	e002      	b.n	8005a72 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005a6c:	f7fd ffce 	bl	8003a0c <HAL_RCC_GetPCLK1Freq>
 8005a70:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	4613      	mov	r3, r2
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	4413      	add	r3, r2
 8005a7a:	009a      	lsls	r2, r3, #2
 8005a7c:	441a      	add	r2, r3
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a88:	4a22      	ldr	r2, [pc, #136]	; (8005b14 <UART_SetConfig+0x118>)
 8005a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a8e:	095b      	lsrs	r3, r3, #5
 8005a90:	0119      	lsls	r1, r3, #4
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	4613      	mov	r3, r2
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	4413      	add	r3, r2
 8005a9a:	009a      	lsls	r2, r3, #2
 8005a9c:	441a      	add	r2, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005aa8:	4b1a      	ldr	r3, [pc, #104]	; (8005b14 <UART_SetConfig+0x118>)
 8005aaa:	fba3 0302 	umull	r0, r3, r3, r2
 8005aae:	095b      	lsrs	r3, r3, #5
 8005ab0:	2064      	movs	r0, #100	; 0x64
 8005ab2:	fb00 f303 	mul.w	r3, r0, r3
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	011b      	lsls	r3, r3, #4
 8005aba:	3332      	adds	r3, #50	; 0x32
 8005abc:	4a15      	ldr	r2, [pc, #84]	; (8005b14 <UART_SetConfig+0x118>)
 8005abe:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac2:	095b      	lsrs	r3, r3, #5
 8005ac4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ac8:	4419      	add	r1, r3
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	4613      	mov	r3, r2
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	4413      	add	r3, r2
 8005ad2:	009a      	lsls	r2, r3, #2
 8005ad4:	441a      	add	r2, r3
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ae0:	4b0c      	ldr	r3, [pc, #48]	; (8005b14 <UART_SetConfig+0x118>)
 8005ae2:	fba3 0302 	umull	r0, r3, r3, r2
 8005ae6:	095b      	lsrs	r3, r3, #5
 8005ae8:	2064      	movs	r0, #100	; 0x64
 8005aea:	fb00 f303 	mul.w	r3, r0, r3
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	011b      	lsls	r3, r3, #4
 8005af2:	3332      	adds	r3, #50	; 0x32
 8005af4:	4a07      	ldr	r2, [pc, #28]	; (8005b14 <UART_SetConfig+0x118>)
 8005af6:	fba2 2303 	umull	r2, r3, r2, r3
 8005afa:	095b      	lsrs	r3, r3, #5
 8005afc:	f003 020f 	and.w	r2, r3, #15
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	440a      	add	r2, r1
 8005b06:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005b08:	bf00      	nop
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	40013800 	.word	0x40013800
 8005b14:	51eb851f 	.word	0x51eb851f

08005b18 <InitMBSlave>:

void InitMBSlave(uint8_t id, MBHandler *mbHandler, UART_HandleTypeDef *uartPort, TIM_HandleTypeDef *timerT35, TIM_HandleTypeDef *timerT15,
		uint32_t prescaler, uint32_t baudrate, uint32_t wordLength, uint32_t stopBits, uint32_t parity,
		GPIO_TypeDef *RE_Port, uint16_t RE_Pin, GPIO_TypeDef *DE_Port, uint16_t DE_Pin,
		uint8_t* coilsArray, uint16_t coilsArrLength, uint16_t* registersArray, uint16_t registersArrLength)
{
 8005b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b1a:	b08b      	sub	sp, #44	; 0x2c
 8005b1c:	af04      	add	r7, sp, #16
 8005b1e:	60b9      	str	r1, [r7, #8]
 8005b20:	607a      	str	r2, [r7, #4]
 8005b22:	603b      	str	r3, [r7, #0]
 8005b24:	4603      	mov	r3, r0
 8005b26:	73fb      	strb	r3, [r7, #15]
	// Slave id
	(*mbHandler).UnitID = id;
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	7bfa      	ldrb	r2, [r7, #15]
 8005b2c:	701a      	strb	r2, [r3, #0]

	// Modify UART port and assign it to MBHandler uartPort
	Modify_UART(uartPort, baudrate, wordLength, stopBits, parity);
 8005b2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b30:	9300      	str	r3, [sp, #0]
 8005b32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005b36:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 fafe 	bl	800613a <Modify_UART>
	(*mbHandler).UART_Port = uartPort;
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	605a      	str	r2, [r3, #4]

	// Modify TIM (T35)
	float_t periodT35 = 0;
 8005b44:	f04f 0300 	mov.w	r3, #0
 8005b48:	617b      	str	r3, [r7, #20]
	CalcTimerPeriod(T35, &periodT35, baudrate, 11);
 8005b4a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005b4c:	f7fa fffc 	bl	8000b48 <__aeabi_ui2f>
 8005b50:	4602      	mov	r2, r0
 8005b52:	f107 0114 	add.w	r1, r7, #20
 8005b56:	4b37      	ldr	r3, [pc, #220]	; (8005c34 <InitMBSlave+0x11c>)
 8005b58:	2002      	movs	r0, #2
 8005b5a:	f000 fa09 	bl	8005f70 <CalcTimerPeriod>
	Modify_TIM(timerT35, prescaler, (uint32_t)periodT35);
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	4618      	mov	r0, r3
 8005b62:	f7fb fa25 	bl	8000fb0 <__aeabi_f2uiz>
 8005b66:	4603      	mov	r3, r0
 8005b68:	461a      	mov	r2, r3
 8005b6a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005b6c:	6838      	ldr	r0, [r7, #0]
 8005b6e:	f000 fac3 	bl	80060f8 <Modify_TIM>
	(*mbHandler).T35 = timerT35;
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	683a      	ldr	r2, [r7, #0]
 8005b76:	619a      	str	r2, [r3, #24]

	// Modify TIM (T15)
	float_t periodT15 = 0;
 8005b78:	f04f 0300 	mov.w	r3, #0
 8005b7c:	613b      	str	r3, [r7, #16]
	CalcTimerPeriod(T15, &periodT15, baudrate, 11);
 8005b7e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005b80:	f7fa ffe2 	bl	8000b48 <__aeabi_ui2f>
 8005b84:	4602      	mov	r2, r0
 8005b86:	f107 0110 	add.w	r1, r7, #16
 8005b8a:	4b2a      	ldr	r3, [pc, #168]	; (8005c34 <InitMBSlave+0x11c>)
 8005b8c:	2001      	movs	r0, #1
 8005b8e:	f000 f9ef 	bl	8005f70 <CalcTimerPeriod>
	Modify_TIM(timerT15, prescaler, (uint32_t)periodT15);
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	4618      	mov	r0, r3
 8005b96:	f7fb fa0b 	bl	8000fb0 <__aeabi_f2uiz>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005ba0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ba2:	f000 faa9 	bl	80060f8 <Modify_TIM>
	(*mbHandler).T15 = timerT15;
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005baa:	61da      	str	r2, [r3, #28]


	// Set RE & DE pin
	(*mbHandler).RE_Port = RE_Port;
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bb0:	609a      	str	r2, [r3, #8]
	(*mbHandler).RE_Pin = RE_Pin;
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8005bb8:	819a      	strh	r2, [r3, #12]

	(*mbHandler).DE_Port = DE_Port;
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005bbe:	611a      	str	r2, [r3, #16]
	(*mbHandler).DE_Pin = DE_Pin;
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005bc6:	829a      	strh	r2, [r3, #20]

	// Set coils and registers
	(*mbHandler).CoilsData.CoilsArray = coilsArray;
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005bcc:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
	(*mbHandler).CoilsData.CoilsLength = coilsArrLength;
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8005bd6:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8

	(*mbHandler).RegistersData.RegistersArray = registersArray;
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005bde:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
	(*mbHandler).RegistersData.RegistersLength = registersArrLength;
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8005be8:	f8a3 21c0 	strh.w	r2, [r3, #448]	; 0x1c0


	printMsg("Slave:ID:%d; BaudRate:%d; WordLength:%d; Parity:%d; StopBits:%d; pT35:%d; tpT15:%d;\n",
				(*mbHandler).UnitID,
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	781b      	ldrb	r3, [r3, #0]
	printMsg("Slave:ID:%d; BaudRate:%d; WordLength:%d; Parity:%d; StopBits:%d; pT35:%d; tpT15:%d;\n",
 8005bf0:	461e      	mov	r6, r3
				(*((*mbHandler).UART_Port)).Init.BaudRate,
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	685b      	ldr	r3, [r3, #4]
	printMsg("Slave:ID:%d; BaudRate:%d; WordLength:%d; Parity:%d; StopBits:%d; pT35:%d; tpT15:%d;\n",
 8005bf6:	685c      	ldr	r4, [r3, #4]
				(*((*mbHandler).UART_Port)).Init.WordLength,
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	685b      	ldr	r3, [r3, #4]
	printMsg("Slave:ID:%d; BaudRate:%d; WordLength:%d; Parity:%d; StopBits:%d; pT35:%d; tpT15:%d;\n",
 8005bfc:	689d      	ldr	r5, [r3, #8]
				(*((*mbHandler).UART_Port)).Init.Parity,
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	685b      	ldr	r3, [r3, #4]
	printMsg("Slave:ID:%d; BaudRate:%d; WordLength:%d; Parity:%d; StopBits:%d; pT35:%d; tpT15:%d;\n",
 8005c02:	691b      	ldr	r3, [r3, #16]
				(*((*mbHandler).UART_Port)).Init.StopBits,
 8005c04:	68ba      	ldr	r2, [r7, #8]
 8005c06:	6852      	ldr	r2, [r2, #4]
	printMsg("Slave:ID:%d; BaudRate:%d; WordLength:%d; Parity:%d; StopBits:%d; pT35:%d; tpT15:%d;\n",
 8005c08:	68d2      	ldr	r2, [r2, #12]
				(uint32_t)(*((*mbHandler).T35)).Init.Period,
 8005c0a:	68b9      	ldr	r1, [r7, #8]
 8005c0c:	6989      	ldr	r1, [r1, #24]
 8005c0e:	68c9      	ldr	r1, [r1, #12]
				(uint32_t)(*((*mbHandler).T15)).Init.Period);
 8005c10:	68b8      	ldr	r0, [r7, #8]
 8005c12:	69c0      	ldr	r0, [r0, #28]
 8005c14:	68c0      	ldr	r0, [r0, #12]
	printMsg("Slave:ID:%d; BaudRate:%d; WordLength:%d; Parity:%d; StopBits:%d; pT35:%d; tpT15:%d;\n",
 8005c16:	9003      	str	r0, [sp, #12]
 8005c18:	9102      	str	r1, [sp, #8]
 8005c1a:	9201      	str	r2, [sp, #4]
 8005c1c:	9300      	str	r3, [sp, #0]
 8005c1e:	462b      	mov	r3, r5
 8005c20:	4622      	mov	r2, r4
 8005c22:	4631      	mov	r1, r6
 8005c24:	4804      	ldr	r0, [pc, #16]	; (8005c38 <InitMBSlave+0x120>)
 8005c26:	f7fb f9e3 	bl	8000ff0 <printMsg>
}
 8005c2a:	bf00      	nop
 8005c2c:	371c      	adds	r7, #28
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c32:	bf00      	nop
 8005c34:	41300000 	.word	0x41300000
 8005c38:	08007f70 	.word	0x08007f70

08005c3c <StartMBSlave>:

void StartMBSlave(MBHandler *mbHandler)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
	// Enable Receive Mode
	EnableRxMode(mbHandler);
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f000 fa9a 	bl	800617e <EnableRxMode>

	// Clear RxBuffer
	ClearXBuffer(&((*mbHandler).RxBuffer));
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	3320      	adds	r3, #32
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f000 f946 	bl	8005ee0 <ClearXBuffer>

	// Start uart receive interrupt (to receive 1 byte)
	if(HAL_UART_Receive_IT((*mbHandler).UART_Port, (*mbHandler).RxBuffer.u8Element, 1) != HAL_OK)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6858      	ldr	r0, [r3, #4]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	33a0      	adds	r3, #160	; 0xa0
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	4619      	mov	r1, r3
 8005c60:	f7ff f9e1 	bl	8005026 <HAL_UART_Receive_IT>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d004      	beq.n	8005c74 <StartMBSlave+0x38>
	{
		HandleError(mbHandler, UART_Error);
 8005c6a:	2100      	movs	r1, #0
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f001 f857 	bl	8006d20 <HandleError>
	}
	else
	{
		printMsg("Slave started!\n");
	}
}
 8005c72:	e002      	b.n	8005c7a <StartMBSlave+0x3e>
		printMsg("Slave started!\n");
 8005c74:	4803      	ldr	r0, [pc, #12]	; (8005c84 <StartMBSlave+0x48>)
 8005c76:	f7fb f9bb 	bl	8000ff0 <printMsg>
}
 8005c7a:	bf00      	nop
 8005c7c:	3708      	adds	r7, #8
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	08007fc8 	.word	0x08007fc8

08005c88 <MBSlave_HAL_UART_RxCpltCallback>:
	}
}


void MBSlave_HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart, MBHandler *mbHandler)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
	// Check if the uart module is the one that is used to receive modbus requests
	if((*huart).Instance == (*((*mbHandler).UART_Port)).Instance)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d164      	bne.n	8005d6a <MBSlave_HAL_UART_RxCpltCallback+0xe2>
	{
		//------------------------------------------------------------------------------------------------------------------
		// Stop T35 if it is in busy state, meaning that it is counting from 0 to 'periodT35'
		if( HAL_TIM_Base_GetState((*mbHandler).T35) == HAL_TIM_STATE_BUSY)
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	699b      	ldr	r3, [r3, #24]
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f7fe fd3d 	bl	8004724 <HAL_TIM_Base_GetState>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d111      	bne.n	8005cd4 <MBSlave_HAL_UART_RxCpltCallback+0x4c>
		{
			if(HAL_TIM_Base_Stop_IT((*mbHandler).T35) == HAL_OK)
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	699b      	ldr	r3, [r3, #24]
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f7fe f95f 	bl	8003f78 <HAL_TIM_Base_Stop_IT>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d105      	bne.n	8005ccc <MBSlave_HAL_UART_RxCpltCallback+0x44>
			{
				__HAL_TIM_SetCounter((*mbHandler).T35, 0);
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	699b      	ldr	r3, [r3, #24]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	625a      	str	r2, [r3, #36]	; 0x24
 8005cca:	e003      	b.n	8005cd4 <MBSlave_HAL_UART_RxCpltCallback+0x4c>
			}
			else
			{
				HandleError(mbHandler, T35_Error);
 8005ccc:	2101      	movs	r1, #1
 8005cce:	6838      	ldr	r0, [r7, #0]
 8005cd0:	f001 f826 	bl	8006d20 <HandleError>
			}
		}

		// Stop T15 if it is in busy state, meaning that last byte was received ok
		if( HAL_TIM_Base_GetState((*mbHandler).T15) == HAL_TIM_STATE_BUSY )
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	69db      	ldr	r3, [r3, #28]
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f7fe fd23 	bl	8004724 <HAL_TIM_Base_GetState>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	d111      	bne.n	8005d08 <MBSlave_HAL_UART_RxCpltCallback+0x80>
		{
			if(HAL_TIM_Base_Stop_IT((*mbHandler).T15) == HAL_OK)
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	69db      	ldr	r3, [r3, #28]
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f7fe f945 	bl	8003f78 <HAL_TIM_Base_Stop_IT>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d105      	bne.n	8005d00 <MBSlave_HAL_UART_RxCpltCallback+0x78>
			{
				__HAL_TIM_SetCounter((*mbHandler).T15, 0);
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	69db      	ldr	r3, [r3, #28]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	625a      	str	r2, [r3, #36]	; 0x24
 8005cfe:	e003      	b.n	8005d08 <MBSlave_HAL_UART_RxCpltCallback+0x80>
			}
			else
			{
				HandleError(mbHandler, T15_Error);
 8005d00:	2102      	movs	r1, #2
 8005d02:	6838      	ldr	r0, [r7, #0]
 8005d04:	f001 f80c 	bl	8006d20 <HandleError>
			}
		}

		// Add value to RxBuffer
		AddToXBuffer(&((*mbHandler).RxBuffer),((*mbHandler).RxBuffer).u8Element[0]);
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	f103 0220 	add.w	r2, r3, #32
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005d14:	4619      	mov	r1, r3
 8005d16:	4610      	mov	r0, r2
 8005d18:	f000 f8b9 	bl	8005e8e <AddToXBuffer>

		// Restart uart receive interrupt (to receive the next byte of the request)
		if(HAL_UART_Receive_IT((*mbHandler).UART_Port, (*mbHandler).RxBuffer.u8Element, 1) != HAL_OK)
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	6858      	ldr	r0, [r3, #4]
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	33a0      	adds	r3, #160	; 0xa0
 8005d24:	2201      	movs	r2, #1
 8005d26:	4619      	mov	r1, r3
 8005d28:	f7ff f97d 	bl	8005026 <HAL_UART_Receive_IT>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d003      	beq.n	8005d3a <MBSlave_HAL_UART_RxCpltCallback+0xb2>
		{
			HandleError(mbHandler, UART_Error);
 8005d32:	2100      	movs	r1, #0
 8005d34:	6838      	ldr	r0, [r7, #0]
 8005d36:	f000 fff3 	bl	8006d20 <HandleError>
		}


		// Start T35 to detect if the last received byte was the modbus request last byte
		if(HAL_TIM_Base_Start_IT((*mbHandler).T35) != HAL_OK)
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	699b      	ldr	r3, [r3, #24]
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f7fe f8c8 	bl	8003ed4 <HAL_TIM_Base_Start_IT>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d003      	beq.n	8005d52 <MBSlave_HAL_UART_RxCpltCallback+0xca>
		{
			HandleError(mbHandler, T35_Error);
 8005d4a:	2101      	movs	r1, #1
 8005d4c:	6838      	ldr	r0, [r7, #0]
 8005d4e:	f000 ffe7 	bl	8006d20 <HandleError>
		}

		// Start T15 to detect if the bytes are received ok
		if(HAL_TIM_Base_Start_IT((*mbHandler).T15) != HAL_OK)
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	69db      	ldr	r3, [r3, #28]
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7fe f8bc 	bl	8003ed4 <HAL_TIM_Base_Start_IT>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d003      	beq.n	8005d6a <MBSlave_HAL_UART_RxCpltCallback+0xe2>
		{
			HandleError(mbHandler, T15_Error);
 8005d62:	2102      	movs	r1, #2
 8005d64:	6838      	ldr	r0, [r7, #0]
 8005d66:	f000 ffdb 	bl	8006d20 <HandleError>
		}
		//-----------------------------------------------------------------------------------------------------------------------
	}
}
 8005d6a:	bf00      	nop
 8005d6c:	3708      	adds	r7, #8
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}

08005d72 <MBUnit_HAL_UART_ErrorCallback>:
		//-----------------------------------------------------------------------------------------------------------------------
	}
}

void MBUnit_HAL_UART_ErrorCallback(UART_HandleTypeDef *huart, MBHandler *mbHandler)
{
 8005d72:	b580      	push	{r7, lr}
 8005d74:	b084      	sub	sp, #16
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
 8005d7a:	6039      	str	r1, [r7, #0]
	// Check if the uart module is the one that is used in mb_slave
	if((*huart).Instance == (*((*mbHandler).UART_Port)).Instance)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d11b      	bne.n	8005dc2 <MBUnit_HAL_UART_ErrorCallback+0x50>
	{
		uint32_t uartError = HAL_UART_GetError((*mbHandler).UART_Port);
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f7ff fbf5 	bl	800557e <HAL_UART_GetError>
 8005d94:	60f8      	str	r0, [r7, #12]
		if(uartError == 0 && uartError == 1 && uartError == 2 && uartError == 3 && uartError == 4 && uartError == 5)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d112      	bne.n	8005dc2 <MBUnit_HAL_UART_ErrorCallback+0x50>
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d10f      	bne.n	8005dc2 <MBUnit_HAL_UART_ErrorCallback+0x50>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	d10c      	bne.n	8005dc2 <MBUnit_HAL_UART_ErrorCallback+0x50>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2b03      	cmp	r3, #3
 8005dac:	d109      	bne.n	8005dc2 <MBUnit_HAL_UART_ErrorCallback+0x50>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2b04      	cmp	r3, #4
 8005db2:	d106      	bne.n	8005dc2 <MBUnit_HAL_UART_ErrorCallback+0x50>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2b05      	cmp	r3, #5
 8005db8:	d103      	bne.n	8005dc2 <MBUnit_HAL_UART_ErrorCallback+0x50>
		{
			HandleError(mbHandler, UART_Error);
 8005dba:	2100      	movs	r1, #0
 8005dbc:	6838      	ldr	r0, [r7, #0]
 8005dbe:	f000 ffaf 	bl	8006d20 <HandleError>
		}
	}
}
 8005dc2:	bf00      	nop
 8005dc4:	3710      	adds	r7, #16
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <MBSlave_HAL_TIM_PeriodElapsedCallback>:

void MBSlave_HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim, MBHandler *mbHandler)
{
 8005dca:	b590      	push	{r4, r7, lr}
 8005dcc:	b0a3      	sub	sp, #140	; 0x8c
 8005dce:	af20      	add	r7, sp, #128	; 0x80
 8005dd0:	6078      	str	r0, [r7, #4]
 8005dd2:	6039      	str	r1, [r7, #0]
	// Check if this timer module is the one that is used to detect the modbus rtu end of frame
	if((*htim).Instance == (*((*mbHandler).T35)).Instance)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	699b      	ldr	r3, [r3, #24]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d140      	bne.n	8005e64 <MBSlave_HAL_TIM_PeriodElapsedCallback+0x9a>
	{
		//--------------------------------------------------------------------------------------------------------
		// Period of T35 was elapsed, end of frame detected, stopping the T35
		if( HAL_TIM_Base_Stop_IT((*mbHandler).T35) == HAL_OK)
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	699b      	ldr	r3, [r3, #24]
 8005de6:	4618      	mov	r0, r3
 8005de8:	f7fe f8c6 	bl	8003f78 <HAL_TIM_Base_Stop_IT>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d105      	bne.n	8005dfe <MBSlave_HAL_TIM_PeriodElapsedCallback+0x34>
		{
			__HAL_TIM_SetCounter((*mbHandler).T35, 0);
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	625a      	str	r2, [r3, #36]	; 0x24
 8005dfc:	e003      	b.n	8005e06 <MBSlave_HAL_TIM_PeriodElapsedCallback+0x3c>
		}
		else
		{
			HandleError(mbHandler, T35_Error);
 8005dfe:	2101      	movs	r1, #1
 8005e00:	6838      	ldr	r0, [r7, #0]
 8005e02:	f000 ff8d 	bl	8006d20 <HandleError>
		}

		//  stopping the T15, end of frame detected
		if(HAL_TIM_Base_Stop_IT((*mbHandler).T15) == HAL_OK)
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	69db      	ldr	r3, [r3, #28]
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f7fe f8b4 	bl	8003f78 <HAL_TIM_Base_Stop_IT>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d105      	bne.n	8005e22 <MBSlave_HAL_TIM_PeriodElapsedCallback+0x58>
		{
			__HAL_TIM_SetCounter((*mbHandler).T15, 0);
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	69db      	ldr	r3, [r3, #28]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	625a      	str	r2, [r3, #36]	; 0x24
 8005e20:	e003      	b.n	8005e2a <MBSlave_HAL_TIM_PeriodElapsedCallback+0x60>
		}
		else
		{
			HandleError(mbHandler, T15_Error);
 8005e22:	2102      	movs	r1, #2
 8005e24:	6838      	ldr	r0, [r7, #0]
 8005e26:	f000 ff7b 	bl	8006d20 <HandleError>
		}


		if((*mbHandler).RxBuffer.T15Counter <= 2)
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	f9b3 30a2 	ldrsh.w	r3, [r3, #162]	; 0xa2
 8005e30:	2b02      	cmp	r3, #2
 8005e32:	dc13      	bgt.n	8005e5c <MBSlave_HAL_TIM_PeriodElapsedCallback+0x92>
				printMsg("%u\t", (*mbHandler).RxBuffer.u8Array[k]);
			}
			printMsg(":\n");
*/

			ProcessMBRequest(mbHandler, (*mbHandler).RxBuffer);
 8005e34:	683c      	ldr	r4, [r7, #0]
 8005e36:	4668      	mov	r0, sp
 8005e38:	f104 032c 	add.w	r3, r4, #44	; 0x2c
 8005e3c:	227a      	movs	r2, #122	; 0x7a
 8005e3e:	4619      	mov	r1, r3
 8005e40:	f001 fa56 	bl	80072f0 <memcpy>
 8005e44:	f104 0320 	add.w	r3, r4, #32
 8005e48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e4a:	6838      	ldr	r0, [r7, #0]
 8005e4c:	f000 fa10 	bl	8006270 <ProcessMBRequest>

			// Clearing the RxBuffer to be able to receive the nest modbus request
			ClearXBuffer(&((*mbHandler).RxBuffer));
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	3320      	adds	r3, #32
 8005e54:	4618      	mov	r0, r3
 8005e56:	f000 f843 	bl	8005ee0 <ClearXBuffer>
 8005e5a:	e003      	b.n	8005e64 <MBSlave_HAL_TIM_PeriodElapsedCallback+0x9a>
		}
		else
		{
			HandleError(mbHandler, Tx_Frame_Error);
 8005e5c:	2104      	movs	r1, #4
 8005e5e:	6838      	ldr	r0, [r7, #0]
 8005e60:	f000 ff5e 	bl	8006d20 <HandleError>
		}
	}

	if((*htim).Instance == (*((*mbHandler).T15)).Instance)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	69db      	ldr	r3, [r3, #28]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d109      	bne.n	8005e86 <MBSlave_HAL_TIM_PeriodElapsedCallback+0xbc>
	{
		(*mbHandler).RxBuffer.T15Counter ++;
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	f9b3 30a2 	ldrsh.w	r3, [r3, #162]	; 0xa2
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	b21a      	sxth	r2, r3
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
	}
}
 8005e86:	bf00      	nop
 8005e88:	370c      	adds	r7, #12
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd90      	pop	{r4, r7, pc}

08005e8e <AddToXBuffer>:
}


// Common operation functions
void AddToXBuffer(XBuffer *xBuffer, uint8_t u8Element)
{
 8005e8e:	b480      	push	{r7}
 8005e90:	b083      	sub	sp, #12
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
 8005e96:	460b      	mov	r3, r1
 8005e98:	70fb      	strb	r3, [r7, #3]
	(*xBuffer).u8Array[(*xBuffer).Index] = u8Element;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	78fa      	ldrb	r2, [r7, #3]
 8005ea6:	545a      	strb	r2, [r3, r1]
	(*xBuffer).Index ++;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005eae:	3301      	adds	r3, #1
 8005eb0:	b2da      	uxtb	r2, r3
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

	if((*xBuffer).Index > (XBuffer_MAX - 1))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005ebe:	b25b      	sxtb	r3, r3
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	da04      	bge.n	8005ece <AddToXBuffer+0x40>
	{
		(*xBuffer).overflow = true;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	}
	else
	{
		(*xBuffer).overflow = false;
	}
}
 8005ecc:	e003      	b.n	8005ed6 <AddToXBuffer+0x48>
		(*xBuffer).overflow = false;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
}
 8005ed6:	bf00      	nop
 8005ed8:	370c      	adds	r7, #12
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bc80      	pop	{r7}
 8005ede:	4770      	bx	lr

08005ee0 <ClearXBuffer>:

void ClearXBuffer(XBuffer *xBuffer)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
	(*xBuffer).Index = 0;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	(*xBuffer).T15Counter = 0;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	(*xBuffer).u8Element[0] = 0;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	(*xBuffer).overflow = false;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
}
 8005f08:	bf00      	nop
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bc80      	pop	{r7}
 8005f10:	4770      	bx	lr

08005f12 <BytesToReg>:

uint16_t BytesToReg(uint8_t lo_Byte, uint8_t ho_Byte)
{
 8005f12:	b480      	push	{r7}
 8005f14:	b085      	sub	sp, #20
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	4603      	mov	r3, r0
 8005f1a:	460a      	mov	r2, r1
 8005f1c:	71fb      	strb	r3, [r7, #7]
 8005f1e:	4613      	mov	r3, r2
 8005f20:	71bb      	strb	r3, [r7, #6]
	uint16_t result;
	result = (ho_Byte << 8 | lo_Byte);
 8005f22:	79bb      	ldrb	r3, [r7, #6]
 8005f24:	021b      	lsls	r3, r3, #8
 8005f26:	b21a      	sxth	r2, r3
 8005f28:	79fb      	ldrb	r3, [r7, #7]
 8005f2a:	b21b      	sxth	r3, r3
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	b21b      	sxth	r3, r3
 8005f30:	81fb      	strh	r3, [r7, #14]
	return result;
 8005f32:	89fb      	ldrh	r3, [r7, #14]
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3714      	adds	r7, #20
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bc80      	pop	{r7}
 8005f3c:	4770      	bx	lr
	...

08005f40 <RegToBytes>:

uint8_t* RegToBytes(uint16_t reg)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	4603      	mov	r3, r0
 8005f48:	80fb      	strh	r3, [r7, #6]
	static uint8_t result[2];
	// Lo_Byte
	result[0] = (uint8_t)(reg & 255);
 8005f4a:	88fb      	ldrh	r3, [r7, #6]
 8005f4c:	b2da      	uxtb	r2, r3
 8005f4e:	4b07      	ldr	r3, [pc, #28]	; (8005f6c <RegToBytes+0x2c>)
 8005f50:	701a      	strb	r2, [r3, #0]
	// Ho_Byte
	result[1] = (uint8_t)(reg >> 8);
 8005f52:	88fb      	ldrh	r3, [r7, #6]
 8005f54:	0a1b      	lsrs	r3, r3, #8
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	b2da      	uxtb	r2, r3
 8005f5a:	4b04      	ldr	r3, [pc, #16]	; (8005f6c <RegToBytes+0x2c>)
 8005f5c:	705a      	strb	r2, [r3, #1]
	return result;
 8005f5e:	4b03      	ldr	r3, [pc, #12]	; (8005f6c <RegToBytes+0x2c>)
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bc80      	pop	{r7}
 8005f68:	4770      	bx	lr
 8005f6a:	bf00      	nop
 8005f6c:	200000a4 	.word	0x200000a4

08005f70 <CalcTimerPeriod>:

void CalcTimerPeriod(Timer tmr, float_t *period, float_t baudrate, float_t wordLength)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b086      	sub	sp, #24
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60b9      	str	r1, [r7, #8]
 8005f78:	607a      	str	r2, [r7, #4]
 8005f7a:	603b      	str	r3, [r7, #0]
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	73fb      	strb	r3, [r7, #15]
	switch(tmr)
 8005f80:	7bfb      	ldrb	r3, [r7, #15]
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d002      	beq.n	8005f8c <CalcTimerPeriod+0x1c>
 8005f86:	2b02      	cmp	r3, #2
 8005f88:	d02f      	beq.n	8005fea <CalcTimerPeriod+0x7a>

		(*period) = resultTwo;
		break;
	}
	default:
		break;
 8005f8a:	e05d      	b.n	8006048 <CalcTimerPeriod+0xd8>
		float_t resultOne = 0;
 8005f8c:	f04f 0300 	mov.w	r3, #0
 8005f90:	617b      	str	r3, [r7, #20]
		if(baudrate > 19200)
 8005f92:	4931      	ldr	r1, [pc, #196]	; (8006058 <CalcTimerPeriod+0xe8>)
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f7fa ffeb 	bl	8000f70 <__aeabi_fcmpgt>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d002      	beq.n	8005fa6 <CalcTimerPeriod+0x36>
			resultOne = 750;
 8005fa0:	4b2e      	ldr	r3, [pc, #184]	; (800605c <CalcTimerPeriod+0xec>)
 8005fa2:	617b      	str	r3, [r7, #20]
 8005fa4:	e01d      	b.n	8005fe2 <CalcTimerPeriod+0x72>
			resultOne = (1000000 * (1.5 * (wordLength / baudrate)));
 8005fa6:	6879      	ldr	r1, [r7, #4]
 8005fa8:	6838      	ldr	r0, [r7, #0]
 8005faa:	f7fa fed9 	bl	8000d60 <__aeabi_fdiv>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f7fa fa39 	bl	8000428 <__aeabi_f2d>
 8005fb6:	f04f 0200 	mov.w	r2, #0
 8005fba:	4b29      	ldr	r3, [pc, #164]	; (8006060 <CalcTimerPeriod+0xf0>)
 8005fbc:	f7fa fa8c 	bl	80004d8 <__aeabi_dmul>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	460b      	mov	r3, r1
 8005fc4:	4610      	mov	r0, r2
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	a321      	add	r3, pc, #132	; (adr r3, 8006050 <CalcTimerPeriod+0xe0>)
 8005fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fce:	f7fa fa83 	bl	80004d8 <__aeabi_dmul>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	4610      	mov	r0, r2
 8005fd8:	4619      	mov	r1, r3
 8005fda:	f7fa fcaf 	bl	800093c <__aeabi_d2f>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	617b      	str	r3, [r7, #20]
		(*period) = resultOne;
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	697a      	ldr	r2, [r7, #20]
 8005fe6:	601a      	str	r2, [r3, #0]
		break;
 8005fe8:	e02e      	b.n	8006048 <CalcTimerPeriod+0xd8>
		float_t resultTwo = 0;
 8005fea:	f04f 0300 	mov.w	r3, #0
 8005fee:	613b      	str	r3, [r7, #16]
		if(baudrate > 19200)
 8005ff0:	4919      	ldr	r1, [pc, #100]	; (8006058 <CalcTimerPeriod+0xe8>)
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f7fa ffbc 	bl	8000f70 <__aeabi_fcmpgt>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d002      	beq.n	8006004 <CalcTimerPeriod+0x94>
			resultTwo = 1750;
 8005ffe:	4b19      	ldr	r3, [pc, #100]	; (8006064 <CalcTimerPeriod+0xf4>)
 8006000:	613b      	str	r3, [r7, #16]
 8006002:	e01d      	b.n	8006040 <CalcTimerPeriod+0xd0>
			resultTwo = (1000000 * (3.5 * (wordLength / baudrate)));
 8006004:	6879      	ldr	r1, [r7, #4]
 8006006:	6838      	ldr	r0, [r7, #0]
 8006008:	f7fa feaa 	bl	8000d60 <__aeabi_fdiv>
 800600c:	4603      	mov	r3, r0
 800600e:	4618      	mov	r0, r3
 8006010:	f7fa fa0a 	bl	8000428 <__aeabi_f2d>
 8006014:	f04f 0200 	mov.w	r2, #0
 8006018:	4b13      	ldr	r3, [pc, #76]	; (8006068 <CalcTimerPeriod+0xf8>)
 800601a:	f7fa fa5d 	bl	80004d8 <__aeabi_dmul>
 800601e:	4602      	mov	r2, r0
 8006020:	460b      	mov	r3, r1
 8006022:	4610      	mov	r0, r2
 8006024:	4619      	mov	r1, r3
 8006026:	a30a      	add	r3, pc, #40	; (adr r3, 8006050 <CalcTimerPeriod+0xe0>)
 8006028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800602c:	f7fa fa54 	bl	80004d8 <__aeabi_dmul>
 8006030:	4602      	mov	r2, r0
 8006032:	460b      	mov	r3, r1
 8006034:	4610      	mov	r0, r2
 8006036:	4619      	mov	r1, r3
 8006038:	f7fa fc80 	bl	800093c <__aeabi_d2f>
 800603c:	4603      	mov	r3, r0
 800603e:	613b      	str	r3, [r7, #16]
		(*period) = resultTwo;
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	693a      	ldr	r2, [r7, #16]
 8006044:	601a      	str	r2, [r3, #0]
		break;
 8006046:	bf00      	nop
	}
}
 8006048:	bf00      	nop
 800604a:	3718      	adds	r7, #24
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}
 8006050:	00000000 	.word	0x00000000
 8006054:	412e8480 	.word	0x412e8480
 8006058:	46960000 	.word	0x46960000
 800605c:	443b8000 	.word	0x443b8000
 8006060:	3ff80000 	.word	0x3ff80000
 8006064:	44dac000 	.word	0x44dac000
 8006068:	400c0000 	.word	0x400c0000

0800606c <CalculateCRC>:

uint16_t CalculateCRC(uint8_t* buffer, uint8_t length)
{
 800606c:	b480      	push	{r7}
 800606e:	b085      	sub	sp, #20
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	460b      	mov	r3, r1
 8006076:	70fb      	strb	r3, [r7, #3]
    uint16_t calcCRC, temp, flag;
    uint8_t i;
    uint8_t j;

    calcCRC = 0xFFFF;
 8006078:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800607c:	81fb      	strh	r3, [r7, #14]

    for (i = 0; i < length; i++)
 800607e:	2300      	movs	r3, #0
 8006080:	737b      	strb	r3, [r7, #13]
 8006082:	e024      	b.n	80060ce <CalculateCRC+0x62>
    {
        calcCRC = calcCRC ^ buffer[i];
 8006084:	7b7b      	ldrb	r3, [r7, #13]
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	4413      	add	r3, r2
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	b29a      	uxth	r2, r3
 800608e:	89fb      	ldrh	r3, [r7, #14]
 8006090:	4053      	eors	r3, r2
 8006092:	81fb      	strh	r3, [r7, #14]
        for (j = 1; j <= 8; j++)
 8006094:	2301      	movs	r3, #1
 8006096:	733b      	strb	r3, [r7, #12]
 8006098:	e013      	b.n	80060c2 <CalculateCRC+0x56>
        {
            flag = calcCRC & 0x0001;
 800609a:	89fb      	ldrh	r3, [r7, #14]
 800609c:	f003 0301 	and.w	r3, r3, #1
 80060a0:	813b      	strh	r3, [r7, #8]
            calcCRC >>= 1;
 80060a2:	89fb      	ldrh	r3, [r7, #14]
 80060a4:	085b      	lsrs	r3, r3, #1
 80060a6:	81fb      	strh	r3, [r7, #14]
            if (flag)
 80060a8:	893b      	ldrh	r3, [r7, #8]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d006      	beq.n	80060bc <CalculateCRC+0x50>
                calcCRC ^= 0xA001;
 80060ae:	89fb      	ldrh	r3, [r7, #14]
 80060b0:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 80060b4:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 80060b8:	43db      	mvns	r3, r3
 80060ba:	81fb      	strh	r3, [r7, #14]
        for (j = 1; j <= 8; j++)
 80060bc:	7b3b      	ldrb	r3, [r7, #12]
 80060be:	3301      	adds	r3, #1
 80060c0:	733b      	strb	r3, [r7, #12]
 80060c2:	7b3b      	ldrb	r3, [r7, #12]
 80060c4:	2b08      	cmp	r3, #8
 80060c6:	d9e8      	bls.n	800609a <CalculateCRC+0x2e>
    for (i = 0; i < length; i++)
 80060c8:	7b7b      	ldrb	r3, [r7, #13]
 80060ca:	3301      	adds	r3, #1
 80060cc:	737b      	strb	r3, [r7, #13]
 80060ce:	7b7a      	ldrb	r2, [r7, #13]
 80060d0:	78fb      	ldrb	r3, [r7, #3]
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d3d6      	bcc.n	8006084 <CalculateCRC+0x18>
        }
    }

    // Reverse byte order.
    temp = calcCRC >> 8;
 80060d6:	89fb      	ldrh	r3, [r7, #14]
 80060d8:	0a1b      	lsrs	r3, r3, #8
 80060da:	817b      	strh	r3, [r7, #10]
    calcCRC = (calcCRC << 8) | temp;
 80060dc:	89fb      	ldrh	r3, [r7, #14]
 80060de:	021b      	lsls	r3, r3, #8
 80060e0:	b21a      	sxth	r2, r3
 80060e2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	b21b      	sxth	r3, r3
 80060ea:	81fb      	strh	r3, [r7, #14]
    calcCRC &= 0xFFFF;

    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return calcCRC;
 80060ec:	89fb      	ldrh	r3, [r7, #14]
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3714      	adds	r7, #20
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bc80      	pop	{r7}
 80060f6:	4770      	bx	lr

080060f8 <Modify_TIM>:

void Modify_TIM(TIM_HandleTypeDef *htim , uint32_t prescaler, uint32_t period)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
    // DeInit timer
	HAL_TIM_Base_DeInit(htim);
 8006104:	68f8      	ldr	r0, [r7, #12]
 8006106:	f7fd fe90 	bl	8003e2a <HAL_TIM_Base_DeInit>

	(*htim).Init.Prescaler = prescaler;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	68ba      	ldr	r2, [r7, #8]
 800610e:	605a      	str	r2, [r3, #4]

	(*htim).Init.Period = period;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	60da      	str	r2, [r3, #12]

	// Init timer
	if (HAL_TIM_Base_Init(htim) == HAL_OK)
 8006116:	68f8      	ldr	r0, [r7, #12]
 8006118:	f7fd fe38 	bl	8003d8c <HAL_TIM_Base_Init>
 800611c:	4603      	mov	r3, r0
 800611e:	2b00      	cmp	r3, #0
 8006120:	d105      	bne.n	800612e <Modify_TIM+0x36>
	{
		__HAL_TIM_CLEAR_FLAG(htim, TIM_SR_UIF);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f06f 0201 	mvn.w	r2, #1
 800612a:	611a      	str	r2, [r3, #16]
	}
	else
	{
		Error_Handler();
	}
}
 800612c:	e001      	b.n	8006132 <Modify_TIM+0x3a>
		Error_Handler();
 800612e:	f7fb fbf3 	bl	8001918 <Error_Handler>
}
 8006132:	bf00      	nop
 8006134:	3710      	adds	r7, #16
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}

0800613a <Modify_UART>:

void Modify_UART(UART_HandleTypeDef *huart, uint32_t baudrate, uint32_t wordLength, uint32_t stopBits, uint32_t parity)
{
 800613a:	b580      	push	{r7, lr}
 800613c:	b084      	sub	sp, #16
 800613e:	af00      	add	r7, sp, #0
 8006140:	60f8      	str	r0, [r7, #12]
 8006142:	60b9      	str	r1, [r7, #8]
 8006144:	607a      	str	r2, [r7, #4]
 8006146:	603b      	str	r3, [r7, #0]
	// UART DeInit
	HAL_UART_DeInit(huart);
 8006148:	68f8      	ldr	r0, [r7, #12]
 800614a:	f7fe feab 	bl	8004ea4 <HAL_UART_DeInit>

	(*huart).Init.BaudRate = baudrate;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	68ba      	ldr	r2, [r7, #8]
 8006152:	605a      	str	r2, [r3, #4]

	(*huart).Init.WordLength = wordLength;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	609a      	str	r2, [r3, #8]

	(*huart).Init.StopBits = stopBits;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	683a      	ldr	r2, [r7, #0]
 800615e:	60da      	str	r2, [r3, #12]

	(*huart).Init.Parity = parity;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	69ba      	ldr	r2, [r7, #24]
 8006164:	611a      	str	r2, [r3, #16]


	// UART Init
	if (HAL_UART_Init(&(*huart)) != HAL_OK)
 8006166:	68f8      	ldr	r0, [r7, #12]
 8006168:	f7fe fe4f 	bl	8004e0a <HAL_UART_Init>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d001      	beq.n	8006176 <Modify_UART+0x3c>
	{
		Error_Handler();
 8006172:	f7fb fbd1 	bl	8001918 <Error_Handler>
	}
}
 8006176:	bf00      	nop
 8006178:	3710      	adds	r7, #16
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}

0800617e <EnableRxMode>:

	return result;
}

void EnableRxMode(MBHandler *mbHandler)
{
 800617e:	b580      	push	{r7, lr}
 8006180:	b082      	sub	sp, #8
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin((*mbHandler).RE_Port, (*mbHandler).RE_Pin, GPIO_PIN_RESET);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6898      	ldr	r0, [r3, #8]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	899b      	ldrh	r3, [r3, #12]
 800618e:	2200      	movs	r2, #0
 8006190:	4619      	mov	r1, r3
 8006192:	f7fd f84e 	bl	8003232 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin((*mbHandler).DE_Port, (*mbHandler).DE_Pin, GPIO_PIN_RESET);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6918      	ldr	r0, [r3, #16]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	8a9b      	ldrh	r3, [r3, #20]
 800619e:	2200      	movs	r2, #0
 80061a0:	4619      	mov	r1, r3
 80061a2:	f7fd f846 	bl	8003232 <HAL_GPIO_WritePin>
}
 80061a6:	bf00      	nop
 80061a8:	3708      	adds	r7, #8
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <EnableTxMode>:

void EnableTxMode(MBHandler *mbHandler)
{
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b082      	sub	sp, #8
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin((*mbHandler).RE_Port, (*mbHandler).RE_Pin, GPIO_PIN_SET);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6898      	ldr	r0, [r3, #8]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	899b      	ldrh	r3, [r3, #12]
 80061be:	2201      	movs	r2, #1
 80061c0:	4619      	mov	r1, r3
 80061c2:	f7fd f836 	bl	8003232 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin((*mbHandler).DE_Port, (*mbHandler).DE_Pin, GPIO_PIN_SET);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6918      	ldr	r0, [r3, #16]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	8a9b      	ldrh	r3, [r3, #20]
 80061ce:	2201      	movs	r2, #1
 80061d0:	4619      	mov	r1, r3
 80061d2:	f7fd f82e 	bl	8003232 <HAL_GPIO_WritePin>
}
 80061d6:	bf00      	nop
 80061d8:	3708      	adds	r7, #8
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
	...

080061e0 <TransmitXBuffer>:

void TransmitXBuffer(MBHandler *mbHandler, XBuffer *xBuffer)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
	HAL_UART_Abort_IT((*mbHandler).UART_Port);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7fe ff4a 	bl	8005088 <HAL_UART_Abort_IT>

	EnableTxMode(mbHandler);
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f7ff ffda 	bl	80061ae <EnableTxMode>

	HAL_UART_Transmit((*mbHandler).UART_Port, (*mbHandler).TxBuffer.u8Array, (*mbHandler).TxBuffer.Index,100);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6858      	ldr	r0, [r3, #4]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f103 01a6 	add.w	r1, r3, #166	; 0xa6
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
 800620a:	b29a      	uxth	r2, r3
 800620c:	2364      	movs	r3, #100	; 0x64
 800620e:	f7fe fe78 	bl	8004f02 <HAL_UART_Transmit>

	ClearXBuffer(&(*mbHandler).TxBuffer);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	33a6      	adds	r3, #166	; 0xa6
 8006216:	4618      	mov	r0, r3
 8006218:	f7ff fe62 	bl	8005ee0 <ClearXBuffer>

	ClearXBuffer(&(*mbHandler).RxBuffer);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	3320      	adds	r3, #32
 8006220:	4618      	mov	r0, r3
 8006222:	f7ff fe5d 	bl	8005ee0 <ClearXBuffer>

	printMsg("\n");
 8006226:	480f      	ldr	r0, [pc, #60]	; (8006264 <TransmitXBuffer+0x84>)
 8006228:	f7fa fee2 	bl	8000ff0 <printMsg>

	EnableRxMode(mbHandler);
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f7ff ffa6 	bl	800617e <EnableRxMode>

	// Restart uart receive interrupt (to receive the next byte of the request)
	if( HAL_UART_Receive_IT((*mbHandler).UART_Port, (*mbHandler).RxBuffer.u8Element, 1) != HAL_OK )
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6858      	ldr	r0, [r3, #4]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	33a0      	adds	r3, #160	; 0xa0
 800623a:	2201      	movs	r2, #1
 800623c:	4619      	mov	r1, r3
 800623e:	f7fe fef2 	bl	8005026 <HAL_UART_Receive_IT>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d009      	beq.n	800625c <TransmitXBuffer+0x7c>
	{
		printMsg("->");
 8006248:	4807      	ldr	r0, [pc, #28]	; (8006268 <TransmitXBuffer+0x88>)
 800624a:	f7fa fed1 	bl	8000ff0 <printMsg>
		HandleError(mbHandler, UART_Error);
 800624e:	2100      	movs	r1, #0
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 fd65 	bl	8006d20 <HandleError>
		printMsg(":\n");
 8006256:	4805      	ldr	r0, [pc, #20]	; (800626c <TransmitXBuffer+0x8c>)
 8006258:	f7fa feca 	bl	8000ff0 <printMsg>
	}
}
 800625c:	bf00      	nop
 800625e:	3708      	adds	r7, #8
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}
 8006264:	08008040 	.word	0x08008040
 8006268:	08008044 	.word	0x08008044
 800626c:	0800803c 	.word	0x0800803c

08006270 <ProcessMBRequest>:


// Modbus implementation functions
// Slave
void ProcessMBRequest(MBHandler *mbHandler, XBuffer rxBuffer)
{
 8006270:	b084      	sub	sp, #16
 8006272:	b580      	push	{r7, lr}
 8006274:	b0a6      	sub	sp, #152	; 0x98
 8006276:	af20      	add	r7, sp, #128	; 0x80
 8006278:	6078      	str	r0, [r7, #4]
 800627a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800627e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if((*mbHandler).UnitID == rxBuffer.u8Array[0])
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	781a      	ldrb	r2, [r3, #0]
 8006286:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800628a:	429a      	cmp	r2, r3
 800628c:	f040 80aa 	bne.w	80063e4 <ProcessMBRequest+0x174>
	{
		//get received CRC from modbus PDU
		uint8_t rCRCLoB = rxBuffer.u8Array[rxBuffer.Index - 1];
 8006290:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 8006294:	3b01      	subs	r3, #1
 8006296:	f107 0220 	add.w	r2, r7, #32
 800629a:	4413      	add	r3, r2
 800629c:	791b      	ldrb	r3, [r3, #4]
 800629e:	75fb      	strb	r3, [r7, #23]
		uint8_t rCRCHoB = rxBuffer.u8Array[rxBuffer.Index - 2];
 80062a0:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 80062a4:	3b02      	subs	r3, #2
 80062a6:	f107 0220 	add.w	r2, r7, #32
 80062aa:	4413      	add	r3, r2
 80062ac:	791b      	ldrb	r3, [r3, #4]
 80062ae:	75bb      	strb	r3, [r7, #22]

		uint16_t receivedCRC = BytesToReg(rCRCLoB, rCRCHoB);
 80062b0:	7dba      	ldrb	r2, [r7, #22]
 80062b2:	7dfb      	ldrb	r3, [r7, #23]
 80062b4:	4611      	mov	r1, r2
 80062b6:	4618      	mov	r0, r3
 80062b8:	f7ff fe2b 	bl	8005f12 <BytesToReg>
 80062bc:	4603      	mov	r3, r0
 80062be:	82bb      	strh	r3, [r7, #20]
		//printMsg("rLoB:%d\trHoB:%d\treceivedCRC:%d\n", rCRCLoB, rCRCHoB, receivedCRC);

		// calculate CRC from the modbus PDU received
		uint16_t calculatedCRC = CalculateCRC(rxBuffer.u8Array, (rxBuffer.Index - 2));
 80062c0:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 80062c4:	3b02      	subs	r3, #2
 80062c6:	b2da      	uxtb	r2, r3
 80062c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062cc:	4611      	mov	r1, r2
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7ff fecc 	bl	800606c <CalculateCRC>
 80062d4:	4603      	mov	r3, r0
 80062d6:	827b      	strh	r3, [r7, #18]

		uint8_t cCRCLoB, cCRCHoB;
		uint8_t* tempCRCPtr = RegToBytes(calculatedCRC);
 80062d8:	8a7b      	ldrh	r3, [r7, #18]
 80062da:	4618      	mov	r0, r3
 80062dc:	f7ff fe30 	bl	8005f40 <RegToBytes>
 80062e0:	60f8      	str	r0, [r7, #12]
		cCRCLoB = *tempCRCPtr;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	72fb      	strb	r3, [r7, #11]
		cCRCHoB = *(tempCRCPtr + 1);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	785b      	ldrb	r3, [r3, #1]
 80062ec:	72bb      	strb	r3, [r7, #10]

		 //printMsg("calculatedCRC:%d\tcLoB:%d\tcHoB:%d\n",calculatedCRC, cCRCLoB, cCRCHoB);

        if(receivedCRC == calculatedCRC)
 80062ee:	8aba      	ldrh	r2, [r7, #20]
 80062f0:	8a7b      	ldrh	r3, [r7, #18]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d171      	bne.n	80063da <ProcessMBRequest+0x16a>
        {
        	uint8_t functionCode = rxBuffer.u8Array[1];
 80062f6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80062fa:	727b      	strb	r3, [r7, #9]
        	switch(functionCode)
 80062fc:	7a7b      	ldrb	r3, [r7, #9]
 80062fe:	3b01      	subs	r3, #1
 8006300:	2b0f      	cmp	r3, #15
 8006302:	d85b      	bhi.n	80063bc <ProcessMBRequest+0x14c>
 8006304:	a201      	add	r2, pc, #4	; (adr r2, 800630c <ProcessMBRequest+0x9c>)
 8006306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800630a:	bf00      	nop
 800630c:	0800634d 	.word	0x0800634d
 8006310:	080063bd 	.word	0x080063bd
 8006314:	08006369 	.word	0x08006369
 8006318:	080063bd 	.word	0x080063bd
 800631c:	080063bd 	.word	0x080063bd
 8006320:	080063bd 	.word	0x080063bd
 8006324:	080063bd 	.word	0x080063bd
 8006328:	080063bd 	.word	0x080063bd
 800632c:	080063bd 	.word	0x080063bd
 8006330:	080063bd 	.word	0x080063bd
 8006334:	080063bd 	.word	0x080063bd
 8006338:	080063bd 	.word	0x080063bd
 800633c:	080063bd 	.word	0x080063bd
 8006340:	080063bd 	.word	0x080063bd
 8006344:	08006385 	.word	0x08006385
 8006348:	080063a1 	.word	0x080063a1
        	{
        	case MB_FC_Read_Coils:
        		//printMsg("FC:1, Read Coils:%d\n", ProcessFC1(mbHandler, rxBuffer));
        		ProcessFC1(mbHandler, rxBuffer);
 800634c:	4668      	mov	r0, sp
 800634e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006352:	227a      	movs	r2, #122	; 0x7a
 8006354:	4619      	mov	r1, r3
 8006356:	f000 ffcb 	bl	80072f0 <memcpy>
 800635a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800635e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 f851 	bl	8006408 <ProcessFC1>
        		break;
 8006366:	e045      	b.n	80063f4 <ProcessMBRequest+0x184>
        	case MB_FC_Read_Registers:
        		//printMsg("FC:3, Read registers:%d\n", ProcessFC3(mbHandler, rxBuffer));
        		ProcessFC3(mbHandler, rxBuffer);
 8006368:	4668      	mov	r0, sp
 800636a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800636e:	227a      	movs	r2, #122	; 0x7a
 8006370:	4619      	mov	r1, r3
 8006372:	f000 ffbd 	bl	80072f0 <memcpy>
 8006376:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800637a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 faa1 	bl	80068c4 <ProcessFC3>
        		break;
 8006382:	e037      	b.n	80063f4 <ProcessMBRequest+0x184>
        	case MB_FC_Write_Multiple_Coils:
        		//printMsg("FC:15, Write coils:%d\n", ProcessFC15(mbHandler, rxBuffer));
        		ProcessFC15(mbHandler, rxBuffer);
 8006384:	4668      	mov	r0, sp
 8006386:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800638a:	227a      	movs	r2, #122	; 0x7a
 800638c:	4619      	mov	r1, r3
 800638e:	f000 ffaf 	bl	80072f0 <memcpy>
 8006392:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006396:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f000 f940 	bl	800661e <ProcessFC15>
        		break;
 800639e:	e029      	b.n	80063f4 <ProcessMBRequest+0x184>
        	case MB_FC_Write_Multiple_Registers:
        		//printMsg("FC:16, Write registers:%d\n", ProcessFC16(mbHandler, rxBuffer));
        		ProcessFC16(mbHandler, rxBuffer);
 80063a0:	4668      	mov	r0, sp
 80063a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80063a6:	227a      	movs	r2, #122	; 0x7a
 80063a8:	4619      	mov	r1, r3
 80063aa:	f000 ffa1 	bl	80072f0 <memcpy>
 80063ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 fb6d 	bl	8006a94 <ProcessFC16>
        		break;
 80063ba:	e01b      	b.n	80063f4 <ProcessMBRequest+0x184>
        	default:
        		HandleException(mbHandler, Illegal_Function, rxBuffer);
 80063bc:	4668      	mov	r0, sp
 80063be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80063c2:	227e      	movs	r2, #126	; 0x7e
 80063c4:	4619      	mov	r1, r3
 80063c6:	f000 ff93 	bl	80072f0 <memcpy>
 80063ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063ce:	cb0c      	ldmia	r3, {r2, r3}
 80063d0:	2101      	movs	r1, #1
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 fce6 	bl	8006da4 <HandleException>
        		break;
 80063d8:	e00c      	b.n	80063f4 <ProcessMBRequest+0x184>
        	}
        }
        else
        {
        	HandleError(mbHandler, CRC_Mismatch);
 80063da:	2105      	movs	r1, #5
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 fc9f 	bl	8006d20 <HandleError>
	else
	{
		HandleError(mbHandler, Wrong_Slave_Id);
		printMsg("Wrong slave ID\n");
	}
}
 80063e2:	e007      	b.n	80063f4 <ProcessMBRequest+0x184>
		HandleError(mbHandler, Wrong_Slave_Id);
 80063e4:	2106      	movs	r1, #6
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 fc9a 	bl	8006d20 <HandleError>
		printMsg("Wrong slave ID\n");
 80063ec:	4805      	ldr	r0, [pc, #20]	; (8006404 <ProcessMBRequest+0x194>)
 80063ee:	f7fa fdff 	bl	8000ff0 <printMsg>
}
 80063f2:	e7ff      	b.n	80063f4 <ProcessMBRequest+0x184>
 80063f4:	bf00      	nop
 80063f6:	3718      	adds	r7, #24
 80063f8:	46bd      	mov	sp, r7
 80063fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80063fe:	b004      	add	sp, #16
 8006400:	4770      	bx	lr
 8006402:	bf00      	nop
 8006404:	08008048 	.word	0x08008048

08006408 <ProcessFC1>:

int ProcessFC1(MBHandler *mbHandler, XBuffer rxBuffer)
{
 8006408:	b084      	sub	sp, #16
 800640a:	b580      	push	{r7, lr}
 800640c:	b0a8      	sub	sp, #160	; 0xa0
 800640e:	af20      	add	r7, sp, #128	; 0x80
 8006410:	6078      	str	r0, [r7, #4]
 8006412:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8006416:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int result = 0;
 800641a:	2300      	movs	r3, #0
 800641c:	61fb      	str	r3, [r7, #28]

	uint8_t slaveID = rxBuffer.u8Array[0];
 800641e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006422:	757b      	strb	r3, [r7, #21]
	uint8_t funcCode  = rxBuffer.u8Array[1];
 8006424:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006428:	753b      	strb	r3, [r7, #20]
	uint16_t startAddr = BytesToReg(rxBuffer.u8Array[3], rxBuffer.u8Array[2]);
 800642a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800642e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8006432:	4611      	mov	r1, r2
 8006434:	4618      	mov	r0, r3
 8006436:	f7ff fd6c 	bl	8005f12 <BytesToReg>
 800643a:	4603      	mov	r3, r0
 800643c:	827b      	strh	r3, [r7, #18]
	uint16_t coilsNr = BytesToReg(rxBuffer.u8Array[5], rxBuffer.u8Array[4]);
 800643e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8006442:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8006446:	4611      	mov	r1, r2
 8006448:	4618      	mov	r0, r3
 800644a:	f7ff fd62 	bl	8005f12 <BytesToReg>
 800644e:	4603      	mov	r3, r0
 8006450:	823b      	strh	r3, [r7, #16]

	if(coilsNr >= 1 && coilsNr <= (*mbHandler).CoilsData.CoilsLength)
 8006452:	8a3b      	ldrh	r3, [r7, #16]
 8006454:	2b00      	cmp	r3, #0
 8006456:	f000 80c9 	beq.w	80065ec <ProcessFC1+0x1e4>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f8b3 31b8 	ldrh.w	r3, [r3, #440]	; 0x1b8
 8006460:	8a3a      	ldrh	r2, [r7, #16]
 8006462:	429a      	cmp	r2, r3
 8006464:	f200 80c2 	bhi.w	80065ec <ProcessFC1+0x1e4>
	{
		if(startAddr >= 0 && (startAddr + coilsNr) <= (*mbHandler).CoilsData.CoilsLength)
 8006468:	8a7a      	ldrh	r2, [r7, #18]
 800646a:	8a3b      	ldrh	r3, [r7, #16]
 800646c:	4413      	add	r3, r2
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	f8b2 21b8 	ldrh.w	r2, [r2, #440]	; 0x1b8
 8006474:	4293      	cmp	r3, r2
 8006476:	f300 80a7 	bgt.w	80065c8 <ProcessFC1+0x1c0>
		{
			uint8_t byteNr = (uint8_t)(coilsNr / 8);
 800647a:	8a3b      	ldrh	r3, [r7, #16]
 800647c:	08db      	lsrs	r3, r3, #3
 800647e:	b29b      	uxth	r3, r3
 8006480:	76fb      	strb	r3, [r7, #27]
			if((coilsNr % 8) != 0)
 8006482:	8a3b      	ldrh	r3, [r7, #16]
 8006484:	f003 0307 	and.w	r3, r3, #7
 8006488:	b29b      	uxth	r3, r3
 800648a:	2b00      	cmp	r3, #0
 800648c:	d002      	beq.n	8006494 <ProcessFC1+0x8c>
				byteNr++;
 800648e:	7efb      	ldrb	r3, [r7, #27]
 8006490:	3301      	adds	r3, #1
 8006492:	76fb      	strb	r3, [r7, #27]

			ClearXBuffer(&((*mbHandler).TxBuffer));
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	33a6      	adds	r3, #166	; 0xa6
 8006498:	4618      	mov	r0, r3
 800649a:	f7ff fd21 	bl	8005ee0 <ClearXBuffer>

			AddToXBuffer(&((*mbHandler).TxBuffer), slaveID);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	33a6      	adds	r3, #166	; 0xa6
 80064a2:	7d7a      	ldrb	r2, [r7, #21]
 80064a4:	4611      	mov	r1, r2
 80064a6:	4618      	mov	r0, r3
 80064a8:	f7ff fcf1 	bl	8005e8e <AddToXBuffer>

			AddToXBuffer(&((*mbHandler).TxBuffer), funcCode);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	33a6      	adds	r3, #166	; 0xa6
 80064b0:	7d3a      	ldrb	r2, [r7, #20]
 80064b2:	4611      	mov	r1, r2
 80064b4:	4618      	mov	r0, r3
 80064b6:	f7ff fcea 	bl	8005e8e <AddToXBuffer>

			AddToXBuffer(&((*mbHandler).TxBuffer), byteNr);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	33a6      	adds	r3, #166	; 0xa6
 80064be:	7efa      	ldrb	r2, [r7, #27]
 80064c0:	4611      	mov	r1, r2
 80064c2:	4618      	mov	r0, r3
 80064c4:	f7ff fce3 	bl	8005e8e <AddToXBuffer>

			uint8_t bitsNr = 0;
 80064c8:	2300      	movs	r3, #0
 80064ca:	76bb      	strb	r3, [r7, #26]
			uint8_t currentByte = 0;
 80064cc:	2300      	movs	r3, #0
 80064ce:	767b      	strb	r3, [r7, #25]
			uint8_t currentCoil = 0;
 80064d0:	2300      	movs	r3, #0
 80064d2:	73fb      	strb	r3, [r7, #15]

			for(uint16_t coil = 0; coil < coilsNr; coil++)
 80064d4:	2300      	movs	r3, #0
 80064d6:	82fb      	strh	r3, [r7, #22]
 80064d8:	e045      	b.n	8006566 <ProcessFC1+0x15e>
			{
				currentCoil = coil + startAddr;
 80064da:	8afb      	ldrh	r3, [r7, #22]
 80064dc:	b2da      	uxtb	r2, r3
 80064de:	8a7b      	ldrh	r3, [r7, #18]
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	4413      	add	r3, r2
 80064e4:	73fb      	strb	r3, [r7, #15]

				bitWrite(currentByte, bitsNr, *( (((*mbHandler).CoilsData).CoilsArray) + currentCoil));
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f8d3 21b4 	ldr.w	r2, [r3, #436]	; 0x1b4
 80064ec:	7bfb      	ldrb	r3, [r7, #15]
 80064ee:	4413      	add	r3, r2
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d008      	beq.n	8006508 <ProcessFC1+0x100>
 80064f6:	7ebb      	ldrb	r3, [r7, #26]
 80064f8:	2201      	movs	r2, #1
 80064fa:	fa02 f303 	lsl.w	r3, r2, r3
 80064fe:	b2da      	uxtb	r2, r3
 8006500:	7e7b      	ldrb	r3, [r7, #25]
 8006502:	4313      	orrs	r3, r2
 8006504:	767b      	strb	r3, [r7, #25]
 8006506:	e009      	b.n	800651c <ProcessFC1+0x114>
 8006508:	7ebb      	ldrb	r3, [r7, #26]
 800650a:	2201      	movs	r2, #1
 800650c:	fa02 f303 	lsl.w	r3, r2, r3
 8006510:	b2db      	uxtb	r3, r3
 8006512:	43db      	mvns	r3, r3
 8006514:	b2da      	uxtb	r2, r3
 8006516:	7e7b      	ldrb	r3, [r7, #25]
 8006518:	4013      	ands	r3, r2
 800651a:	767b      	strb	r3, [r7, #25]

				bitsNr++;
 800651c:	7ebb      	ldrb	r3, [r7, #26]
 800651e:	3301      	adds	r3, #1
 8006520:	76bb      	strb	r3, [r7, #26]

				if(bitsNr > 7)
 8006522:	7ebb      	ldrb	r3, [r7, #26]
 8006524:	2b07      	cmp	r3, #7
 8006526:	d90b      	bls.n	8006540 <ProcessFC1+0x138>
				{
					AddToXBuffer(&((*mbHandler).TxBuffer), currentByte);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	33a6      	adds	r3, #166	; 0xa6
 800652c:	7e7a      	ldrb	r2, [r7, #25]
 800652e:	4611      	mov	r1, r2
 8006530:	4618      	mov	r0, r3
 8006532:	f7ff fcac 	bl	8005e8e <AddToXBuffer>

					currentByte = 0;
 8006536:	2300      	movs	r3, #0
 8006538:	767b      	strb	r3, [r7, #25]

					bitsNr = 0;
 800653a:	2300      	movs	r3, #0
 800653c:	76bb      	strb	r3, [r7, #26]
 800653e:	e00f      	b.n	8006560 <ProcessFC1+0x158>
				}
				else
				{
					if(coil == (coilsNr - 1))
 8006540:	8afa      	ldrh	r2, [r7, #22]
 8006542:	8a3b      	ldrh	r3, [r7, #16]
 8006544:	3b01      	subs	r3, #1
 8006546:	429a      	cmp	r2, r3
 8006548:	d10a      	bne.n	8006560 <ProcessFC1+0x158>
					{
						AddToXBuffer(&((*mbHandler).TxBuffer), currentByte);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	33a6      	adds	r3, #166	; 0xa6
 800654e:	7e7a      	ldrb	r2, [r7, #25]
 8006550:	4611      	mov	r1, r2
 8006552:	4618      	mov	r0, r3
 8006554:	f7ff fc9b 	bl	8005e8e <AddToXBuffer>

						currentByte = 0;
 8006558:	2300      	movs	r3, #0
 800655a:	767b      	strb	r3, [r7, #25]

						bitsNr = 0;
 800655c:	2300      	movs	r3, #0
 800655e:	76bb      	strb	r3, [r7, #26]
			for(uint16_t coil = 0; coil < coilsNr; coil++)
 8006560:	8afb      	ldrh	r3, [r7, #22]
 8006562:	3301      	adds	r3, #1
 8006564:	82fb      	strh	r3, [r7, #22]
 8006566:	8afa      	ldrh	r2, [r7, #22]
 8006568:	8a3b      	ldrh	r3, [r7, #16]
 800656a:	429a      	cmp	r2, r3
 800656c:	d3b5      	bcc.n	80064da <ProcessFC1+0xd2>
					}
				}
			}

			uint16_t calculatedCRC = CalculateCRC((*mbHandler).TxBuffer.u8Array, (*mbHandler).TxBuffer.Index);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f103 02a6 	add.w	r2, r3, #166	; 0xa6
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
 800657a:	4619      	mov	r1, r3
 800657c:	4610      	mov	r0, r2
 800657e:	f7ff fd75 	bl	800606c <CalculateCRC>
 8006582:	4603      	mov	r3, r0
 8006584:	81bb      	strh	r3, [r7, #12]

			uint8_t* crcPtr = RegToBytes(calculatedCRC);
 8006586:	89bb      	ldrh	r3, [r7, #12]
 8006588:	4618      	mov	r0, r3
 800658a:	f7ff fcd9 	bl	8005f40 <RegToBytes>
 800658e:	60b8      	str	r0, [r7, #8]

			AddToXBuffer(&((*mbHandler).TxBuffer), (uint8_t)(*(crcPtr + 1)));
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f103 02a6 	add.w	r2, r3, #166	; 0xa6
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	3301      	adds	r3, #1
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	4619      	mov	r1, r3
 800659e:	4610      	mov	r0, r2
 80065a0:	f7ff fc75 	bl	8005e8e <AddToXBuffer>
			AddToXBuffer(&((*mbHandler).TxBuffer), (uint8_t)(*crcPtr));
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f103 02a6 	add.w	r2, r3, #166	; 0xa6
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	4619      	mov	r1, r3
 80065b0:	4610      	mov	r0, r2
 80065b2:	f7ff fc6c 	bl	8005e8e <AddToXBuffer>
			{
				printMsg("\t%u", (*mbHandler).TxBuffer.u8Array[u]);
			}
			printMsg(" :\n");*/

			TransmitXBuffer(mbHandler, &((*mbHandler).TxBuffer));
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	33a6      	adds	r3, #166	; 0xa6
 80065ba:	4619      	mov	r1, r3
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f7ff fe0f 	bl	80061e0 <TransmitXBuffer>

			result = 1;
 80065c2:	2301      	movs	r3, #1
 80065c4:	61fb      	str	r3, [r7, #28]
		if(startAddr >= 0 && (startAddr + coilsNr) <= (*mbHandler).CoilsData.CoilsLength)
 80065c6:	e022      	b.n	800660e <ProcessFC1+0x206>
		}
		else
		{
			HandleException(mbHandler, Illegal_Data_Address, rxBuffer);
 80065c8:	4668      	mov	r0, sp
 80065ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80065ce:	227e      	movs	r2, #126	; 0x7e
 80065d0:	4619      	mov	r1, r3
 80065d2:	f000 fe8d 	bl	80072f0 <memcpy>
 80065d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80065da:	cb0c      	ldmia	r3, {r2, r3}
 80065dc:	2102      	movs	r1, #2
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 fbe0 	bl	8006da4 <HandleException>
			result = -2;
 80065e4:	f06f 0301 	mvn.w	r3, #1
 80065e8:	61fb      	str	r3, [r7, #28]
		if(startAddr >= 0 && (startAddr + coilsNr) <= (*mbHandler).CoilsData.CoilsLength)
 80065ea:	e010      	b.n	800660e <ProcessFC1+0x206>
		}
	}
	else
	{
		HandleException(mbHandler, Illegal_Data_Value, rxBuffer);
 80065ec:	4668      	mov	r0, sp
 80065ee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80065f2:	227e      	movs	r2, #126	; 0x7e
 80065f4:	4619      	mov	r1, r3
 80065f6:	f000 fe7b 	bl	80072f0 <memcpy>
 80065fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80065fe:	cb0c      	ldmia	r3, {r2, r3}
 8006600:	2103      	movs	r1, #3
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 fbce 	bl	8006da4 <HandleException>
		result = -3;
 8006608:	f06f 0302 	mvn.w	r3, #2
 800660c:	61fb      	str	r3, [r7, #28]
	}

	return result;
 800660e:	69fb      	ldr	r3, [r7, #28]
}
 8006610:	4618      	mov	r0, r3
 8006612:	3720      	adds	r7, #32
 8006614:	46bd      	mov	sp, r7
 8006616:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800661a:	b004      	add	sp, #16
 800661c:	4770      	bx	lr

0800661e <ProcessFC15>:

int ProcessFC15(MBHandler *mbHandler, XBuffer rxBuffer)
{
 800661e:	b084      	sub	sp, #16
 8006620:	b5b0      	push	{r4, r5, r7, lr}
 8006622:	b0b0      	sub	sp, #192	; 0xc0
 8006624:	af20      	add	r7, sp, #128	; 0x80
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	f107 0054 	add.w	r0, r7, #84	; 0x54
 800662c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8006630:	466b      	mov	r3, sp
 8006632:	461d      	mov	r5, r3
	int result = 0;
 8006634:	2300      	movs	r3, #0
 8006636:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t slaveID = rxBuffer.u8Array[0];
 8006638:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800663c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t funcCode  = rxBuffer.u8Array[1];
 8006640:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006644:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint16_t startAddr = BytesToReg(rxBuffer.u8Array[3], rxBuffer.u8Array[2]);
 8006648:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800664c:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8006650:	4611      	mov	r1, r2
 8006652:	4618      	mov	r0, r3
 8006654:	f7ff fc5d 	bl	8005f12 <BytesToReg>
 8006658:	4603      	mov	r3, r0
 800665a:	853b      	strh	r3, [r7, #40]	; 0x28
	uint16_t coilsNr = BytesToReg(rxBuffer.u8Array[5], rxBuffer.u8Array[4]);
 800665c:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8006660:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 8006664:	4611      	mov	r1, r2
 8006666:	4618      	mov	r0, r3
 8006668:	f7ff fc53 	bl	8005f12 <BytesToReg>
 800666c:	4603      	mov	r3, r0
 800666e:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t byteCount = rxBuffer.u8Array[6];
 8006670:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8006674:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	uint8_t dataArray[byteCount];
 8006678:	f897 4025 	ldrb.w	r4, [r7, #37]	; 0x25
 800667c:	4623      	mov	r3, r4
 800667e:	3b01      	subs	r3, #1
 8006680:	623b      	str	r3, [r7, #32]
 8006682:	b2e0      	uxtb	r0, r4
 8006684:	f04f 0100 	mov.w	r1, #0
 8006688:	f04f 0200 	mov.w	r2, #0
 800668c:	f04f 0300 	mov.w	r3, #0
 8006690:	00cb      	lsls	r3, r1, #3
 8006692:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8006696:	00c2      	lsls	r2, r0, #3
 8006698:	b2e0      	uxtb	r0, r4
 800669a:	f04f 0100 	mov.w	r1, #0
 800669e:	f04f 0200 	mov.w	r2, #0
 80066a2:	f04f 0300 	mov.w	r3, #0
 80066a6:	00cb      	lsls	r3, r1, #3
 80066a8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80066ac:	00c2      	lsls	r2, r0, #3
 80066ae:	4623      	mov	r3, r4
 80066b0:	3307      	adds	r3, #7
 80066b2:	08db      	lsrs	r3, r3, #3
 80066b4:	00db      	lsls	r3, r3, #3
 80066b6:	ebad 0d03 	sub.w	sp, sp, r3
 80066ba:	ab20      	add	r3, sp, #128	; 0x80
 80066bc:	3300      	adds	r3, #0
 80066be:	61fb      	str	r3, [r7, #28]

	for(int i=0; i < byteCount; i++)
 80066c0:	2300      	movs	r3, #0
 80066c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80066c4:	e00d      	b.n	80066e2 <ProcessFC15+0xc4>
	{
		dataArray[i] = rxBuffer.u8Array[7 + i];
 80066c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c8:	3307      	adds	r3, #7
 80066ca:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80066ce:	4413      	add	r3, r2
 80066d0:	7919      	ldrb	r1, [r3, #4]
 80066d2:	69fa      	ldr	r2, [r7, #28]
 80066d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d6:	4413      	add	r3, r2
 80066d8:	460a      	mov	r2, r1
 80066da:	701a      	strb	r2, [r3, #0]
	for(int i=0; i < byteCount; i++)
 80066dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066de:	3301      	adds	r3, #1
 80066e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80066e2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80066e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066e8:	429a      	cmp	r2, r3
 80066ea:	dbec      	blt.n	80066c6 <ProcessFC15+0xa8>
	}


	if(coilsNr >=1 && coilsNr <= (*mbHandler).CoilsData.CoilsLength)
 80066ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	f000 80ce 	beq.w	8006890 <ProcessFC15+0x272>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f8b3 31b8 	ldrh.w	r3, [r3, #440]	; 0x1b8
 80066fa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80066fc:	429a      	cmp	r2, r3
 80066fe:	f200 80c7 	bhi.w	8006890 <ProcessFC15+0x272>
	{
		if(startAddr >= 0 && (startAddr + coilsNr) <= (*mbHandler).CoilsData.CoilsLength)
 8006702:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006704:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006706:	4413      	add	r3, r2
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	f8b2 21b8 	ldrh.w	r2, [r2, #440]	; 0x1b8
 800670e:	4293      	cmp	r3, r2
 8006710:	f300 80ac 	bgt.w	800686c <ProcessFC15+0x24e>
		{
			uint8_t byteIndex = 0;
 8006714:	2300      	movs	r3, #0
 8006716:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

			uint8_t bitIndex = 0;
 800671a:	2300      	movs	r3, #0
 800671c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

			for(int coil = 0; coil < coilsNr; coil++)
 8006720:	2300      	movs	r3, #0
 8006722:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006724:	e02c      	b.n	8006780 <ProcessFC15+0x162>
			{
				uint8_t currentCoil = startAddr + coil;
 8006726:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006728:	b2da      	uxtb	r2, r3
 800672a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800672c:	b2db      	uxtb	r3, r3
 800672e:	4413      	add	r3, r2
 8006730:	72fb      	strb	r3, [r7, #11]

				*( ((*mbHandler).CoilsData.CoilsArray) + currentCoil ) = bitRead(dataArray[byteIndex], bitIndex);
 8006732:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006736:	69fa      	ldr	r2, [r7, #28]
 8006738:	5cd3      	ldrb	r3, [r2, r3]
 800673a:	461a      	mov	r2, r3
 800673c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006740:	fa42 f303 	asr.w	r3, r2, r3
 8006744:	b2da      	uxtb	r2, r3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f8d3 11b4 	ldr.w	r1, [r3, #436]	; 0x1b4
 800674c:	7afb      	ldrb	r3, [r7, #11]
 800674e:	440b      	add	r3, r1
 8006750:	f002 0201 	and.w	r2, r2, #1
 8006754:	b2d2      	uxtb	r2, r2
 8006756:	701a      	strb	r2, [r3, #0]

				bitIndex++;
 8006758:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800675c:	3301      	adds	r3, #1
 800675e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

				if(bitIndex > 7)
 8006762:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006766:	2b07      	cmp	r3, #7
 8006768:	d907      	bls.n	800677a <ProcessFC15+0x15c>
				{
					byteIndex++;
 800676a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800676e:	3301      	adds	r3, #1
 8006770:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

					bitIndex = 0;
 8006774:	2300      	movs	r3, #0
 8006776:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			for(int coil = 0; coil < coilsNr; coil++)
 800677a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800677c:	3301      	adds	r3, #1
 800677e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006780:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006782:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006784:	429a      	cmp	r2, r3
 8006786:	dbce      	blt.n	8006726 <ProcessFC15+0x108>
				{

				}
			}

			ClearXBuffer(&((*mbHandler).TxBuffer));
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	33a6      	adds	r3, #166	; 0xa6
 800678c:	4618      	mov	r0, r3
 800678e:	f7ff fba7 	bl	8005ee0 <ClearXBuffer>

			AddToXBuffer(&((*mbHandler).TxBuffer), slaveID);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	33a6      	adds	r3, #166	; 0xa6
 8006796:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800679a:	4611      	mov	r1, r2
 800679c:	4618      	mov	r0, r3
 800679e:	f7ff fb76 	bl	8005e8e <AddToXBuffer>

			AddToXBuffer(&((*mbHandler).TxBuffer), funcCode);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	33a6      	adds	r3, #166	; 0xa6
 80067a6:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 80067aa:	4611      	mov	r1, r2
 80067ac:	4618      	mov	r0, r3
 80067ae:	f7ff fb6e 	bl	8005e8e <AddToXBuffer>

			uint8_t* startAddrPtr = RegToBytes(startAddr);
 80067b2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80067b4:	4618      	mov	r0, r3
 80067b6:	f7ff fbc3 	bl	8005f40 <RegToBytes>
 80067ba:	61b8      	str	r0, [r7, #24]

			AddToXBuffer(&((*mbHandler).TxBuffer), *(startAddrPtr + 1));
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f103 02a6 	add.w	r2, r3, #166	; 0xa6
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	3301      	adds	r3, #1
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	4619      	mov	r1, r3
 80067ca:	4610      	mov	r0, r2
 80067cc:	f7ff fb5f 	bl	8005e8e <AddToXBuffer>

			AddToXBuffer(&((*mbHandler).TxBuffer), *(startAddrPtr));
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f103 02a6 	add.w	r2, r3, #166	; 0xa6
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	4619      	mov	r1, r3
 80067dc:	4610      	mov	r0, r2
 80067de:	f7ff fb56 	bl	8005e8e <AddToXBuffer>

			uint8_t* outQPtr = RegToBytes(coilsNr);
 80067e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80067e4:	4618      	mov	r0, r3
 80067e6:	f7ff fbab 	bl	8005f40 <RegToBytes>
 80067ea:	6178      	str	r0, [r7, #20]

			AddToXBuffer(&((*mbHandler).TxBuffer), *(outQPtr + 1));
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f103 02a6 	add.w	r2, r3, #166	; 0xa6
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	3301      	adds	r3, #1
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	4619      	mov	r1, r3
 80067fa:	4610      	mov	r0, r2
 80067fc:	f7ff fb47 	bl	8005e8e <AddToXBuffer>

			AddToXBuffer(&((*mbHandler).TxBuffer), *(outQPtr));
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f103 02a6 	add.w	r2, r3, #166	; 0xa6
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	4619      	mov	r1, r3
 800680c:	4610      	mov	r0, r2
 800680e:	f7ff fb3e 	bl	8005e8e <AddToXBuffer>

			uint16_t calculatedCRC = CalculateCRC((*mbHandler).TxBuffer.u8Array, (*mbHandler).TxBuffer.Index);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f103 02a6 	add.w	r2, r3, #166	; 0xa6
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
 800681e:	4619      	mov	r1, r3
 8006820:	4610      	mov	r0, r2
 8006822:	f7ff fc23 	bl	800606c <CalculateCRC>
 8006826:	4603      	mov	r3, r0
 8006828:	827b      	strh	r3, [r7, #18]

			uint8_t* crcPtr = RegToBytes(calculatedCRC);
 800682a:	8a7b      	ldrh	r3, [r7, #18]
 800682c:	4618      	mov	r0, r3
 800682e:	f7ff fb87 	bl	8005f40 <RegToBytes>
 8006832:	60f8      	str	r0, [r7, #12]

			AddToXBuffer(&((*mbHandler).TxBuffer), *(crcPtr + 1));
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f103 02a6 	add.w	r2, r3, #166	; 0xa6
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	3301      	adds	r3, #1
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	4619      	mov	r1, r3
 8006842:	4610      	mov	r0, r2
 8006844:	f7ff fb23 	bl	8005e8e <AddToXBuffer>

			AddToXBuffer(&((*mbHandler).TxBuffer), *(crcPtr));
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f103 02a6 	add.w	r2, r3, #166	; 0xa6
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	4619      	mov	r1, r3
 8006854:	4610      	mov	r0, r2
 8006856:	f7ff fb1a 	bl	8005e8e <AddToXBuffer>
			{
				printMsg("\t%u", (*mbHandler).TxBuffer.u8Array[u]);
			}
			printMsg(" :\n");*/

			TransmitXBuffer(mbHandler, &((*mbHandler).TxBuffer));
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	33a6      	adds	r3, #166	; 0xa6
 800685e:	4619      	mov	r1, r3
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f7ff fcbd 	bl	80061e0 <TransmitXBuffer>

			result = 1;
 8006866:	2301      	movs	r3, #1
 8006868:	637b      	str	r3, [r7, #52]	; 0x34
		if(startAddr >= 0 && (startAddr + coilsNr) <= (*mbHandler).CoilsData.CoilsLength)
 800686a:	e022      	b.n	80068b2 <ProcessFC15+0x294>
		}
		else
		{
			HandleException(mbHandler, Illegal_Data_Address, rxBuffer);
 800686c:	4668      	mov	r0, sp
 800686e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006872:	227e      	movs	r2, #126	; 0x7e
 8006874:	4619      	mov	r1, r3
 8006876:	f000 fd3b 	bl	80072f0 <memcpy>
 800687a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800687e:	cb0c      	ldmia	r3, {r2, r3}
 8006880:	2102      	movs	r1, #2
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 fa8e 	bl	8006da4 <HandleException>

			result = -2;
 8006888:	f06f 0301 	mvn.w	r3, #1
 800688c:	637b      	str	r3, [r7, #52]	; 0x34
		if(startAddr >= 0 && (startAddr + coilsNr) <= (*mbHandler).CoilsData.CoilsLength)
 800688e:	e010      	b.n	80068b2 <ProcessFC15+0x294>
		}
	}
	else
	{
		HandleException(mbHandler, Illegal_Data_Value, rxBuffer);
 8006890:	4668      	mov	r0, sp
 8006892:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006896:	227e      	movs	r2, #126	; 0x7e
 8006898:	4619      	mov	r1, r3
 800689a:	f000 fd29 	bl	80072f0 <memcpy>
 800689e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80068a2:	cb0c      	ldmia	r3, {r2, r3}
 80068a4:	2103      	movs	r1, #3
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 fa7c 	bl	8006da4 <HandleException>

		result = -3;
 80068ac:	f06f 0302 	mvn.w	r3, #2
 80068b0:	637b      	str	r3, [r7, #52]	; 0x34
	}

	return result;
 80068b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068b4:	46ad      	mov	sp, r5
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3740      	adds	r7, #64	; 0x40
 80068ba:	46bd      	mov	sp, r7
 80068bc:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80068c0:	b004      	add	sp, #16
 80068c2:	4770      	bx	lr

080068c4 <ProcessFC3>:

int ProcessFC3(MBHandler *mbHandler, XBuffer rxBuffer)
{
 80068c4:	b084      	sub	sp, #16
 80068c6:	b580      	push	{r7, lr}
 80068c8:	b0aa      	sub	sp, #168	; 0xa8
 80068ca:	af20      	add	r7, sp, #128	; 0x80
 80068cc:	6078      	str	r0, [r7, #4]
 80068ce:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80068d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int result = 0;
 80068d6:	2300      	movs	r3, #0
 80068d8:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t slaveID = rxBuffer.u8Array[0];
 80068da:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80068de:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	uint8_t funcCode = rxBuffer.u8Array[1];
 80068e2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80068e6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint16_t startAddr = BytesToReg(rxBuffer.u8Array[3], rxBuffer.u8Array[2]);
 80068ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80068ee:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80068f2:	4611      	mov	r1, r2
 80068f4:	4618      	mov	r0, r3
 80068f6:	f7ff fb0c 	bl	8005f12 <BytesToReg>
 80068fa:	4603      	mov	r3, r0
 80068fc:	83fb      	strh	r3, [r7, #30]
	uint16_t registerNr = BytesToReg(rxBuffer.u8Array[5], rxBuffer.u8Array[4]);
 80068fe:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8006902:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006906:	4611      	mov	r1, r2
 8006908:	4618      	mov	r0, r3
 800690a:	f7ff fb02 	bl	8005f12 <BytesToReg>
 800690e:	4603      	mov	r3, r0
 8006910:	83bb      	strh	r3, [r7, #28]

	if(registerNr >=1 && registerNr <= (*mbHandler).RegistersData.RegistersLength)
 8006912:	8bbb      	ldrh	r3, [r7, #28]
 8006914:	2b00      	cmp	r3, #0
 8006916:	f000 80a4 	beq.w	8006a62 <ProcessFC3+0x19e>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8b3 31c0 	ldrh.w	r3, [r3, #448]	; 0x1c0
 8006920:	8bba      	ldrh	r2, [r7, #28]
 8006922:	429a      	cmp	r2, r3
 8006924:	f200 809d 	bhi.w	8006a62 <ProcessFC3+0x19e>
	{
		if(startAddr >=0 && (startAddr + registerNr) <= (*mbHandler).RegistersData.RegistersLength)
 8006928:	8bfa      	ldrh	r2, [r7, #30]
 800692a:	8bbb      	ldrh	r3, [r7, #28]
 800692c:	4413      	add	r3, r2
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	f8b2 21c0 	ldrh.w	r2, [r2, #448]	; 0x1c0
 8006934:	4293      	cmp	r3, r2
 8006936:	f300 8082 	bgt.w	8006a3e <ProcessFC3+0x17a>
		{
			ClearXBuffer(&((*mbHandler).TxBuffer));
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	33a6      	adds	r3, #166	; 0xa6
 800693e:	4618      	mov	r0, r3
 8006940:	f7ff face 	bl	8005ee0 <ClearXBuffer>

			AddToXBuffer(&((*mbHandler).TxBuffer), slaveID);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	33a6      	adds	r3, #166	; 0xa6
 8006948:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800694c:	4611      	mov	r1, r2
 800694e:	4618      	mov	r0, r3
 8006950:	f7ff fa9d 	bl	8005e8e <AddToXBuffer>
			AddToXBuffer(&((*mbHandler).TxBuffer), funcCode);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	33a6      	adds	r3, #166	; 0xa6
 8006958:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800695c:	4611      	mov	r1, r2
 800695e:	4618      	mov	r0, r3
 8006960:	f7ff fa95 	bl	8005e8e <AddToXBuffer>
			AddToXBuffer(&((*mbHandler).TxBuffer), (uint8_t)(2*registerNr));
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f103 02a6 	add.w	r2, r3, #166	; 0xa6
 800696a:	8bbb      	ldrh	r3, [r7, #28]
 800696c:	b2db      	uxtb	r3, r3
 800696e:	005b      	lsls	r3, r3, #1
 8006970:	b2db      	uxtb	r3, r3
 8006972:	4619      	mov	r1, r3
 8006974:	4610      	mov	r0, r2
 8006976:	f7ff fa8a 	bl	8005e8e <AddToXBuffer>

			for(uint8_t reg=0; reg<registerNr; reg++)
 800697a:	2300      	movs	r3, #0
 800697c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006980:	e02a      	b.n	80069d8 <ProcessFC3+0x114>
			{
				uint8_t currentReg = reg + startAddr;
 8006982:	8bfb      	ldrh	r3, [r7, #30]
 8006984:	b2da      	uxtb	r2, r3
 8006986:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800698a:	4413      	add	r3, r2
 800698c:	74fb      	strb	r3, [r7, #19]

				uint16_t tempRegValue = *( ((*mbHandler).RegistersData.RegistersArray) + currentReg);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
 8006994:	7cfb      	ldrb	r3, [r7, #19]
 8006996:	005b      	lsls	r3, r3, #1
 8006998:	4413      	add	r3, r2
 800699a:	881b      	ldrh	r3, [r3, #0]
 800699c:	823b      	strh	r3, [r7, #16]

				uint8_t* tempRegPtr = RegToBytes(tempRegValue);
 800699e:	8a3b      	ldrh	r3, [r7, #16]
 80069a0:	4618      	mov	r0, r3
 80069a2:	f7ff facd 	bl	8005f40 <RegToBytes>
 80069a6:	60f8      	str	r0, [r7, #12]

				AddToXBuffer(&((*mbHandler).TxBuffer), *(tempRegPtr + 1));
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f103 02a6 	add.w	r2, r3, #166	; 0xa6
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	3301      	adds	r3, #1
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	4619      	mov	r1, r3
 80069b6:	4610      	mov	r0, r2
 80069b8:	f7ff fa69 	bl	8005e8e <AddToXBuffer>
				AddToXBuffer(&((*mbHandler).TxBuffer), *(tempRegPtr));
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f103 02a6 	add.w	r2, r3, #166	; 0xa6
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	4619      	mov	r1, r3
 80069c8:	4610      	mov	r0, r2
 80069ca:	f7ff fa60 	bl	8005e8e <AddToXBuffer>
			for(uint8_t reg=0; reg<registerNr; reg++)
 80069ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80069d2:	3301      	adds	r3, #1
 80069d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80069dc:	b29b      	uxth	r3, r3
 80069de:	8bba      	ldrh	r2, [r7, #28]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d8ce      	bhi.n	8006982 <ProcessFC3+0xbe>
			}

			uint16_t crc = CalculateCRC((*mbHandler).TxBuffer.u8Array, (*mbHandler).TxBuffer.Index);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f103 02a6 	add.w	r2, r3, #166	; 0xa6
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
 80069f0:	4619      	mov	r1, r3
 80069f2:	4610      	mov	r0, r2
 80069f4:	f7ff fb3a 	bl	800606c <CalculateCRC>
 80069f8:	4603      	mov	r3, r0
 80069fa:	837b      	strh	r3, [r7, #26]
			uint8_t* crcPtr = RegToBytes(crc);
 80069fc:	8b7b      	ldrh	r3, [r7, #26]
 80069fe:	4618      	mov	r0, r3
 8006a00:	f7ff fa9e 	bl	8005f40 <RegToBytes>
 8006a04:	6178      	str	r0, [r7, #20]

			AddToXBuffer(&((*mbHandler).TxBuffer), *(crcPtr + 1));
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f103 02a6 	add.w	r2, r3, #166	; 0xa6
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	3301      	adds	r3, #1
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	4619      	mov	r1, r3
 8006a14:	4610      	mov	r0, r2
 8006a16:	f7ff fa3a 	bl	8005e8e <AddToXBuffer>
			AddToXBuffer(&((*mbHandler).TxBuffer), *(crcPtr));
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f103 02a6 	add.w	r2, r3, #166	; 0xa6
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	4619      	mov	r1, r3
 8006a26:	4610      	mov	r0, r2
 8006a28:	f7ff fa31 	bl	8005e8e <AddToXBuffer>
			{
				printMsg("\t%u", (*mbHandler).TxBuffer.u8Array[u]);
			}
			printMsg(" :\n");*/

		    TransmitXBuffer(mbHandler, &((*mbHandler).TxBuffer));
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	33a6      	adds	r3, #166	; 0xa6
 8006a30:	4619      	mov	r1, r3
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f7ff fbd4 	bl	80061e0 <TransmitXBuffer>

		    result = 1;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	627b      	str	r3, [r7, #36]	; 0x24
		if(startAddr >=0 && (startAddr + registerNr) <= (*mbHandler).RegistersData.RegistersLength)
 8006a3c:	e022      	b.n	8006a84 <ProcessFC3+0x1c0>
		}
		else
		{
			HandleException(mbHandler, Illegal_Data_Address, rxBuffer);
 8006a3e:	4668      	mov	r0, sp
 8006a40:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006a44:	227e      	movs	r2, #126	; 0x7e
 8006a46:	4619      	mov	r1, r3
 8006a48:	f000 fc52 	bl	80072f0 <memcpy>
 8006a4c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006a50:	cb0c      	ldmia	r3, {r2, r3}
 8006a52:	2102      	movs	r1, #2
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 f9a5 	bl	8006da4 <HandleException>
			result = -2;
 8006a5a:	f06f 0301 	mvn.w	r3, #1
 8006a5e:	627b      	str	r3, [r7, #36]	; 0x24
		if(startAddr >=0 && (startAddr + registerNr) <= (*mbHandler).RegistersData.RegistersLength)
 8006a60:	e010      	b.n	8006a84 <ProcessFC3+0x1c0>
		}
	}
	else
	{
		HandleException(mbHandler, Illegal_Data_Value, rxBuffer);
 8006a62:	4668      	mov	r0, sp
 8006a64:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006a68:	227e      	movs	r2, #126	; 0x7e
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	f000 fc40 	bl	80072f0 <memcpy>
 8006a70:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006a74:	cb0c      	ldmia	r3, {r2, r3}
 8006a76:	2103      	movs	r1, #3
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 f993 	bl	8006da4 <HandleException>
		result = -3;
 8006a7e:	f06f 0302 	mvn.w	r3, #2
 8006a82:	627b      	str	r3, [r7, #36]	; 0x24
	}

	return result;
 8006a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3728      	adds	r7, #40	; 0x28
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a90:	b004      	add	sp, #16
 8006a92:	4770      	bx	lr

08006a94 <ProcessFC16>:

int ProcessFC16(MBHandler *mbHandler, XBuffer rxBuffer)
{
 8006a94:	b084      	sub	sp, #16
 8006a96:	b5b0      	push	{r4, r5, r7, lr}
 8006a98:	b0ae      	sub	sp, #184	; 0xb8
 8006a9a:	af20      	add	r7, sp, #128	; 0x80
 8006a9c:	6078      	str	r0, [r7, #4]
 8006a9e:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8006aa2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8006aa6:	466b      	mov	r3, sp
 8006aa8:	461d      	mov	r5, r3
	int result = 0;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	633b      	str	r3, [r7, #48]	; 0x30

	uint8_t slaveID = rxBuffer.u8Array[0];
 8006aae:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8006ab2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t funcCode = rxBuffer.u8Array[1];
 8006ab6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006aba:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint16_t startAddr = BytesToReg(rxBuffer.u8Array[3], rxBuffer.u8Array[2]);
 8006abe:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006ac2:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8006ac6:	4611      	mov	r1, r2
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f7ff fa22 	bl	8005f12 <BytesToReg>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	85bb      	strh	r3, [r7, #44]	; 0x2c
	uint16_t registerNr = BytesToReg(rxBuffer.u8Array[5], rxBuffer.u8Array[4]);
 8006ad2:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8006ad6:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8006ada:	4611      	mov	r1, r2
 8006adc:	4618      	mov	r0, r3
 8006ade:	f7ff fa18 	bl	8005f12 <BytesToReg>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	857b      	strh	r3, [r7, #42]	; 0x2a

	uint8_t bytesNr = rxBuffer.u8Array[6];
 8006ae6:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8006aea:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t dataArray[bytesNr];
 8006aee:	f897 4029 	ldrb.w	r4, [r7, #41]	; 0x29
 8006af2:	4623      	mov	r3, r4
 8006af4:	3b01      	subs	r3, #1
 8006af6:	627b      	str	r3, [r7, #36]	; 0x24
 8006af8:	b2e0      	uxtb	r0, r4
 8006afa:	f04f 0100 	mov.w	r1, #0
 8006afe:	f04f 0200 	mov.w	r2, #0
 8006b02:	f04f 0300 	mov.w	r3, #0
 8006b06:	00cb      	lsls	r3, r1, #3
 8006b08:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8006b0c:	00c2      	lsls	r2, r0, #3
 8006b0e:	b2e0      	uxtb	r0, r4
 8006b10:	f04f 0100 	mov.w	r1, #0
 8006b14:	f04f 0200 	mov.w	r2, #0
 8006b18:	f04f 0300 	mov.w	r3, #0
 8006b1c:	00cb      	lsls	r3, r1, #3
 8006b1e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8006b22:	00c2      	lsls	r2, r0, #3
 8006b24:	4623      	mov	r3, r4
 8006b26:	3307      	adds	r3, #7
 8006b28:	08db      	lsrs	r3, r3, #3
 8006b2a:	00db      	lsls	r3, r3, #3
 8006b2c:	ebad 0d03 	sub.w	sp, sp, r3
 8006b30:	ab20      	add	r3, sp, #128	; 0x80
 8006b32:	3300      	adds	r3, #0
 8006b34:	623b      	str	r3, [r7, #32]

	for(uint8_t byte=0; byte < bytesNr; byte++)
 8006b36:	2300      	movs	r3, #0
 8006b38:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8006b3c:	e00f      	b.n	8006b5e <ProcessFC16+0xca>
	{
		dataArray[byte] = rxBuffer.u8Array[7 + byte];
 8006b3e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8006b42:	1dda      	adds	r2, r3, #7
 8006b44:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8006b48:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8006b4c:	440a      	add	r2, r1
 8006b4e:	7911      	ldrb	r1, [r2, #4]
 8006b50:	6a3a      	ldr	r2, [r7, #32]
 8006b52:	54d1      	strb	r1, [r2, r3]
	for(uint8_t byte=0; byte < bytesNr; byte++)
 8006b54:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8006b58:	3301      	adds	r3, #1
 8006b5a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8006b5e:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8006b62:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d3e9      	bcc.n	8006b3e <ProcessFC16+0xaa>
	}

	if(registerNr >= 1 && registerNr <= (*mbHandler).RegistersData.RegistersLength)
 8006b6a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f000 80bc 	beq.w	8006cea <ProcessFC16+0x256>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f8b3 31c0 	ldrh.w	r3, [r3, #448]	; 0x1c0
 8006b78:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	f200 80b5 	bhi.w	8006cea <ProcessFC16+0x256>
	{
		if(startAddr >= 0 && (startAddr + registerNr) <= (*mbHandler).RegistersData.RegistersLength)
 8006b80:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8006b82:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006b84:	4413      	add	r3, r2
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	f8b2 21c0 	ldrh.w	r2, [r2, #448]	; 0x1c0
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	f300 809a 	bgt.w	8006cc6 <ProcessFC16+0x232>
		{
			for(uint16_t reg = 0; reg < registerNr; reg++)
 8006b92:	2300      	movs	r3, #0
 8006b94:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006b96:	e020      	b.n	8006bda <ProcessFC16+0x146>
			{
				uint16_t currentReg = startAddr + reg;
 8006b98:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8006b9a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006b9c:	4413      	add	r3, r2
 8006b9e:	81fb      	strh	r3, [r7, #14]

				*( ((*mbHandler).RegistersData.RegistersArray) + currentReg) = BytesToReg(dataArray[(uint8_t)(2*reg + 1)], dataArray[(uint8_t)(2*reg)]);
 8006ba0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	005b      	lsls	r3, r3, #1
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	3301      	adds	r3, #1
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	461a      	mov	r2, r3
 8006bae:	6a3b      	ldr	r3, [r7, #32]
 8006bb0:	5c98      	ldrb	r0, [r3, r2]
 8006bb2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	005b      	lsls	r3, r3, #1
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	461a      	mov	r2, r3
 8006bbc:	6a3b      	ldr	r3, [r7, #32]
 8006bbe:	5c99      	ldrb	r1, [r3, r2]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
 8006bc6:	89fb      	ldrh	r3, [r7, #14]
 8006bc8:	005b      	lsls	r3, r3, #1
 8006bca:	18d4      	adds	r4, r2, r3
 8006bcc:	f7ff f9a1 	bl	8005f12 <BytesToReg>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	8023      	strh	r3, [r4, #0]
			for(uint16_t reg = 0; reg < registerNr; reg++)
 8006bd4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006bda:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006bdc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d3da      	bcc.n	8006b98 <ProcessFC16+0x104>
			}

			ClearXBuffer(&((*mbHandler).TxBuffer));
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	33a6      	adds	r3, #166	; 0xa6
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7ff f97a 	bl	8005ee0 <ClearXBuffer>

			AddToXBuffer(&((*mbHandler).TxBuffer), slaveID);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	33a6      	adds	r3, #166	; 0xa6
 8006bf0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006bf4:	4611      	mov	r1, r2
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f7ff f949 	bl	8005e8e <AddToXBuffer>

			AddToXBuffer(&((*mbHandler).TxBuffer), funcCode);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	33a6      	adds	r3, #166	; 0xa6
 8006c00:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8006c04:	4611      	mov	r1, r2
 8006c06:	4618      	mov	r0, r3
 8006c08:	f7ff f941 	bl	8005e8e <AddToXBuffer>

			uint8_t* startAddrPtr = RegToBytes(startAddr);
 8006c0c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f7ff f996 	bl	8005f40 <RegToBytes>
 8006c14:	61f8      	str	r0, [r7, #28]
			AddToXBuffer(&((*mbHandler).TxBuffer), *(startAddrPtr + 1));
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f103 02a6 	add.w	r2, r3, #166	; 0xa6
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	3301      	adds	r3, #1
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	4619      	mov	r1, r3
 8006c24:	4610      	mov	r0, r2
 8006c26:	f7ff f932 	bl	8005e8e <AddToXBuffer>
			AddToXBuffer(&((*mbHandler).TxBuffer), *(startAddrPtr));
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f103 02a6 	add.w	r2, r3, #166	; 0xa6
 8006c30:	69fb      	ldr	r3, [r7, #28]
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	4619      	mov	r1, r3
 8006c36:	4610      	mov	r0, r2
 8006c38:	f7ff f929 	bl	8005e8e <AddToXBuffer>

			uint8_t* regNrPtr = RegToBytes(registerNr);
 8006c3c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f7ff f97e 	bl	8005f40 <RegToBytes>
 8006c44:	61b8      	str	r0, [r7, #24]
			AddToXBuffer(&((*mbHandler).TxBuffer), *(regNrPtr + 1));
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f103 02a6 	add.w	r2, r3, #166	; 0xa6
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	3301      	adds	r3, #1
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	4619      	mov	r1, r3
 8006c54:	4610      	mov	r0, r2
 8006c56:	f7ff f91a 	bl	8005e8e <AddToXBuffer>
			AddToXBuffer(&((*mbHandler).TxBuffer), *(regNrPtr));
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f103 02a6 	add.w	r2, r3, #166	; 0xa6
 8006c60:	69bb      	ldr	r3, [r7, #24]
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	4619      	mov	r1, r3
 8006c66:	4610      	mov	r0, r2
 8006c68:	f7ff f911 	bl	8005e8e <AddToXBuffer>

			uint16_t crc = CalculateCRC((*mbHandler).TxBuffer.u8Array, (*mbHandler).TxBuffer.Index);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f103 02a6 	add.w	r2, r3, #166	; 0xa6
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
 8006c78:	4619      	mov	r1, r3
 8006c7a:	4610      	mov	r0, r2
 8006c7c:	f7ff f9f6 	bl	800606c <CalculateCRC>
 8006c80:	4603      	mov	r3, r0
 8006c82:	82fb      	strh	r3, [r7, #22]
			uint8_t* crcPtr = RegToBytes(crc);
 8006c84:	8afb      	ldrh	r3, [r7, #22]
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7ff f95a 	bl	8005f40 <RegToBytes>
 8006c8c:	6138      	str	r0, [r7, #16]

			AddToXBuffer(&((*mbHandler).TxBuffer), *(crcPtr + 1));
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f103 02a6 	add.w	r2, r3, #166	; 0xa6
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	3301      	adds	r3, #1
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	4610      	mov	r0, r2
 8006c9e:	f7ff f8f6 	bl	8005e8e <AddToXBuffer>
			AddToXBuffer(&((*mbHandler).TxBuffer), *(crcPtr));
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f103 02a6 	add.w	r2, r3, #166	; 0xa6
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	4619      	mov	r1, r3
 8006cae:	4610      	mov	r0, r2
 8006cb0:	f7ff f8ed 	bl	8005e8e <AddToXBuffer>
			{
				printMsg("\t%u", (*mbHandler).TxBuffer.u8Array[u]);
			}
			printMsg(" :\n");*/

		    TransmitXBuffer(mbHandler, &((*mbHandler).TxBuffer));
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	33a6      	adds	r3, #166	; 0xa6
 8006cb8:	4619      	mov	r1, r3
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f7ff fa90 	bl	80061e0 <TransmitXBuffer>

			result = 1;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	633b      	str	r3, [r7, #48]	; 0x30
		if(startAddr >= 0 && (startAddr + registerNr) <= (*mbHandler).RegistersData.RegistersLength)
 8006cc4:	e022      	b.n	8006d0c <ProcessFC16+0x278>
		}
		else
		{
			HandleException(mbHandler, Illegal_Data_Address, rxBuffer);
 8006cc6:	4668      	mov	r0, sp
 8006cc8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006ccc:	227e      	movs	r2, #126	; 0x7e
 8006cce:	4619      	mov	r1, r3
 8006cd0:	f000 fb0e 	bl	80072f0 <memcpy>
 8006cd4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006cd8:	cb0c      	ldmia	r3, {r2, r3}
 8006cda:	2102      	movs	r1, #2
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 f861 	bl	8006da4 <HandleException>
			result=-2;
 8006ce2:	f06f 0301 	mvn.w	r3, #1
 8006ce6:	633b      	str	r3, [r7, #48]	; 0x30
		if(startAddr >= 0 && (startAddr + registerNr) <= (*mbHandler).RegistersData.RegistersLength)
 8006ce8:	e010      	b.n	8006d0c <ProcessFC16+0x278>
		}
	}
	else
	{
		HandleException(mbHandler, Illegal_Data_Value, rxBuffer);
 8006cea:	4668      	mov	r0, sp
 8006cec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006cf0:	227e      	movs	r2, #126	; 0x7e
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	f000 fafc 	bl	80072f0 <memcpy>
 8006cf8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006cfc:	cb0c      	ldmia	r3, {r2, r3}
 8006cfe:	2103      	movs	r1, #3
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 f84f 	bl	8006da4 <HandleException>
		result = -3;
 8006d06:	f06f 0302 	mvn.w	r3, #2
 8006d0a:	633b      	str	r3, [r7, #48]	; 0x30
	}
	return result;
 8006d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0e:	46ad      	mov	sp, r5
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3738      	adds	r7, #56	; 0x38
 8006d14:	46bd      	mov	sp, r7
 8006d16:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8006d1a:	b004      	add	sp, #16
 8006d1c:	4770      	bx	lr
	...

08006d20 <HandleError>:
	return 1;
}

// General
void HandleError(MBHandler *mbHandler, Error error)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	460b      	mov	r3, r1
 8006d2a:	70fb      	strb	r3, [r7, #3]
	switch(error)
 8006d2c:	78fb      	ldrb	r3, [r7, #3]
 8006d2e:	2b05      	cmp	r3, #5
 8006d30:	d826      	bhi.n	8006d80 <HandleError+0x60>
 8006d32:	a201      	add	r2, pc, #4	; (adr r2, 8006d38 <HandleError+0x18>)
 8006d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d38:	08006d51 	.word	0x08006d51
 8006d3c:	08006d59 	.word	0x08006d59
 8006d40:	08006d61 	.word	0x08006d61
 8006d44:	08006d69 	.word	0x08006d69
 8006d48:	08006d71 	.word	0x08006d71
 8006d4c:	08006d79 	.word	0x08006d79
	{
	case 0:
	{
		printMsg("uart error\n");
 8006d50:	480e      	ldr	r0, [pc, #56]	; (8006d8c <HandleError+0x6c>)
 8006d52:	f7fa f94d 	bl	8000ff0 <printMsg>
		break;
 8006d56:	e014      	b.n	8006d82 <HandleError+0x62>
	}
	case 1:
	{
		printMsg("T35 error\n");
 8006d58:	480d      	ldr	r0, [pc, #52]	; (8006d90 <HandleError+0x70>)
 8006d5a:	f7fa f949 	bl	8000ff0 <printMsg>
		break;
 8006d5e:	e010      	b.n	8006d82 <HandleError+0x62>
	}
	case 2:
	{
		printMsg("T15 error\n");
 8006d60:	480c      	ldr	r0, [pc, #48]	; (8006d94 <HandleError+0x74>)
 8006d62:	f7fa f945 	bl	8000ff0 <printMsg>
		break;
 8006d66:	e00c      	b.n	8006d82 <HandleError+0x62>
	}
	case 3:
	{
		printMsg("Receiving frame error\n");
 8006d68:	480b      	ldr	r0, [pc, #44]	; (8006d98 <HandleError+0x78>)
 8006d6a:	f7fa f941 	bl	8000ff0 <printMsg>
		break;
 8006d6e:	e008      	b.n	8006d82 <HandleError+0x62>
	}
	case 4:
	{
		printMsg("CRC mismatch\n");
 8006d70:	480a      	ldr	r0, [pc, #40]	; (8006d9c <HandleError+0x7c>)
 8006d72:	f7fa f93d 	bl	8000ff0 <printMsg>
		break;
 8006d76:	e004      	b.n	8006d82 <HandleError+0x62>
	}
	case 5:
	{
		printMsg("Wrong slave id\n");
 8006d78:	4809      	ldr	r0, [pc, #36]	; (8006da0 <HandleError+0x80>)
 8006d7a:	f7fa f939 	bl	8000ff0 <printMsg>
		break;
 8006d7e:	e000      	b.n	8006d82 <HandleError+0x62>
	}
	default:
		break;
 8006d80:	bf00      	nop
	}
}
 8006d82:	bf00      	nop
 8006d84:	3708      	adds	r7, #8
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	08008198 	.word	0x08008198
 8006d90:	080081a4 	.word	0x080081a4
 8006d94:	080081b0 	.word	0x080081b0
 8006d98:	080081bc 	.word	0x080081bc
 8006d9c:	080081d4 	.word	0x080081d4
 8006da0:	080081e4 	.word	0x080081e4

08006da4 <HandleException>:

void HandleException(MBHandler *mbHandler, Exception exeption, XBuffer rxBuffer)
{
 8006da4:	b082      	sub	sp, #8
 8006da6:	b580      	push	{r7, lr}
 8006da8:	b08e      	sub	sp, #56	; 0x38
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
 8006dae:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8006db2:	e880 000c 	stmia.w	r0, {r2, r3}
 8006db6:	460b      	mov	r3, r1
 8006db8:	70fb      	strb	r3, [r7, #3]
	switch(exeption)
 8006dba:	78fb      	ldrb	r3, [r7, #3]
 8006dbc:	3b01      	subs	r3, #1
 8006dbe:	2b05      	cmp	r3, #5
 8006dc0:	f200 8212 	bhi.w	80071e8 <HandleException+0x444>
 8006dc4:	a201      	add	r2, pc, #4	; (adr r2, 8006dcc <HandleException+0x28>)
 8006dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dca:	bf00      	nop
 8006dcc:	08006de5 	.word	0x08006de5
 8006dd0:	08006e89 	.word	0x08006e89
 8006dd4:	08006f2d 	.word	0x08006f2d
 8006dd8:	08006fd1 	.word	0x08006fd1
 8006ddc:	08007091 	.word	0x08007091
 8006de0:	0800713d 	.word	0x0800713d
	{
	case 1:
	{
		printMsg("Exeption:%d\n",exeption);
 8006de4:	78fb      	ldrb	r3, [r7, #3]
 8006de6:	4619      	mov	r1, r3
 8006de8:	48a4      	ldr	r0, [pc, #656]	; (800707c <HandleException+0x2d8>)
 8006dea:	f7fa f901 	bl	8000ff0 <printMsg>

		uint8_t slaveId = (uint8_t)rxBuffer.u8Array[0];
 8006dee:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8006df2:	73fb      	strb	r3, [r7, #15]
		uint8_t excFuncCode = (uint8_t)(rxBuffer.u8Array[1] + 80);
 8006df4:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8006df8:	3350      	adds	r3, #80	; 0x50
 8006dfa:	73bb      	strb	r3, [r7, #14]

		AddToXBuffer(&((*mbHandler).ExpBuffer), slaveId);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8006e02:	7bfa      	ldrb	r2, [r7, #15]
 8006e04:	4611      	mov	r1, r2
 8006e06:	4618      	mov	r0, r3
 8006e08:	f7ff f841 	bl	8005e8e <AddToXBuffer>
		AddToXBuffer(&((*mbHandler).ExpBuffer), excFuncCode);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8006e12:	7bba      	ldrb	r2, [r7, #14]
 8006e14:	4611      	mov	r1, r2
 8006e16:	4618      	mov	r0, r3
 8006e18:	f7ff f839 	bl	8005e8e <AddToXBuffer>
		AddToXBuffer(&((*mbHandler).ExpBuffer), (uint8_t)1);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8006e22:	2101      	movs	r1, #1
 8006e24:	4618      	mov	r0, r3
 8006e26:	f7ff f832 	bl	8005e8e <AddToXBuffer>

		uint16_t calculatedCRC = CalculateCRC(((*mbHandler).ExpBuffer).u8Array, ((*mbHandler).ExpBuffer).Index);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f503 7296 	add.w	r2, r3, #300	; 0x12c
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f893 31ad 	ldrb.w	r3, [r3, #429]	; 0x1ad
 8006e36:	4619      	mov	r1, r3
 8006e38:	4610      	mov	r0, r2
 8006e3a:	f7ff f917 	bl	800606c <CalculateCRC>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	81bb      	strh	r3, [r7, #12]
		uint8_t* crcPtr = RegToBytes(calculatedCRC);
 8006e42:	89bb      	ldrh	r3, [r7, #12]
 8006e44:	4618      	mov	r0, r3
 8006e46:	f7ff f87b 	bl	8005f40 <RegToBytes>
 8006e4a:	60b8      	str	r0, [r7, #8]

		AddToXBuffer(&((*mbHandler).ExpBuffer), *(crcPtr + 1));
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f503 7296 	add.w	r2, r3, #300	; 0x12c
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	3301      	adds	r3, #1
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	4619      	mov	r1, r3
 8006e5a:	4610      	mov	r0, r2
 8006e5c:	f7ff f817 	bl	8005e8e <AddToXBuffer>
		AddToXBuffer(&((*mbHandler).ExpBuffer), *crcPtr);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f503 7296 	add.w	r2, r3, #300	; 0x12c
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	4610      	mov	r0, r2
 8006e6e:	f7ff f80e 	bl	8005e8e <AddToXBuffer>

		TransmitXBuffer(mbHandler, &((*mbHandler).ExpBuffer));
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8006e78:	4619      	mov	r1, r3
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f7ff f9b0 	bl	80061e0 <TransmitXBuffer>

		printMsg("Illegal function\n ");
 8006e80:	487f      	ldr	r0, [pc, #508]	; (8007080 <HandleException+0x2dc>)
 8006e82:	f7fa f8b5 	bl	8000ff0 <printMsg>
		break;
 8006e86:	e1b0      	b.n	80071ea <HandleException+0x446>
	}
	case 2:
	{
		printMsg("Exeption:%d\n",exeption);
 8006e88:	78fb      	ldrb	r3, [r7, #3]
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	487b      	ldr	r0, [pc, #492]	; (800707c <HandleException+0x2d8>)
 8006e8e:	f7fa f8af 	bl	8000ff0 <printMsg>

		uint8_t slaveId = (uint8_t)rxBuffer.u8Array[0];
 8006e92:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8006e96:	75fb      	strb	r3, [r7, #23]
		uint8_t excFuncCode = (uint8_t)(rxBuffer.u8Array[1] + 80);
 8006e98:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8006e9c:	3350      	adds	r3, #80	; 0x50
 8006e9e:	75bb      	strb	r3, [r7, #22]

		AddToXBuffer(&((*mbHandler).ExpBuffer), slaveId);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8006ea6:	7dfa      	ldrb	r2, [r7, #23]
 8006ea8:	4611      	mov	r1, r2
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f7fe ffef 	bl	8005e8e <AddToXBuffer>
		AddToXBuffer(&((*mbHandler).ExpBuffer), excFuncCode);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8006eb6:	7dba      	ldrb	r2, [r7, #22]
 8006eb8:	4611      	mov	r1, r2
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7fe ffe7 	bl	8005e8e <AddToXBuffer>
		AddToXBuffer(&((*mbHandler).ExpBuffer), (uint8_t)2);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8006ec6:	2102      	movs	r1, #2
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f7fe ffe0 	bl	8005e8e <AddToXBuffer>

		uint16_t calculatedCRC = CalculateCRC(((*mbHandler).ExpBuffer).u8Array, ((*mbHandler).ExpBuffer).Index);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f503 7296 	add.w	r2, r3, #300	; 0x12c
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f893 31ad 	ldrb.w	r3, [r3, #429]	; 0x1ad
 8006eda:	4619      	mov	r1, r3
 8006edc:	4610      	mov	r0, r2
 8006ede:	f7ff f8c5 	bl	800606c <CalculateCRC>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	82bb      	strh	r3, [r7, #20]
		uint8_t* crcPtr = RegToBytes(calculatedCRC);
 8006ee6:	8abb      	ldrh	r3, [r7, #20]
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f7ff f829 	bl	8005f40 <RegToBytes>
 8006eee:	6138      	str	r0, [r7, #16]

		AddToXBuffer(&((*mbHandler).ExpBuffer), *(crcPtr + 1));
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f503 7296 	add.w	r2, r3, #300	; 0x12c
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	3301      	adds	r3, #1
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	4619      	mov	r1, r3
 8006efe:	4610      	mov	r0, r2
 8006f00:	f7fe ffc5 	bl	8005e8e <AddToXBuffer>
		AddToXBuffer(&((*mbHandler).ExpBuffer), *crcPtr);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f503 7296 	add.w	r2, r3, #300	; 0x12c
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	4619      	mov	r1, r3
 8006f10:	4610      	mov	r0, r2
 8006f12:	f7fe ffbc 	bl	8005e8e <AddToXBuffer>

		TransmitXBuffer(mbHandler, &((*mbHandler).ExpBuffer));
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8006f1c:	4619      	mov	r1, r3
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f7ff f95e 	bl	80061e0 <TransmitXBuffer>

		printMsg("Illegal data address\n");
 8006f24:	4857      	ldr	r0, [pc, #348]	; (8007084 <HandleException+0x2e0>)
 8006f26:	f7fa f863 	bl	8000ff0 <printMsg>
		break;
 8006f2a:	e15e      	b.n	80071ea <HandleException+0x446>
	}
	case 3:
	{
		printMsg("Exeption:%d\n",exeption);
 8006f2c:	78fb      	ldrb	r3, [r7, #3]
 8006f2e:	4619      	mov	r1, r3
 8006f30:	4852      	ldr	r0, [pc, #328]	; (800707c <HandleException+0x2d8>)
 8006f32:	f7fa f85d 	bl	8000ff0 <printMsg>

		uint8_t slaveId = (uint8_t)rxBuffer.u8Array[0];
 8006f36:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8006f3a:	77fb      	strb	r3, [r7, #31]
		uint8_t excFuncCode = (uint8_t)(rxBuffer.u8Array[1] + 80);
 8006f3c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8006f40:	3350      	adds	r3, #80	; 0x50
 8006f42:	77bb      	strb	r3, [r7, #30]

		AddToXBuffer(&((*mbHandler).ExpBuffer), slaveId);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8006f4a:	7ffa      	ldrb	r2, [r7, #31]
 8006f4c:	4611      	mov	r1, r2
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f7fe ff9d 	bl	8005e8e <AddToXBuffer>
		AddToXBuffer(&((*mbHandler).ExpBuffer), excFuncCode);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8006f5a:	7fba      	ldrb	r2, [r7, #30]
 8006f5c:	4611      	mov	r1, r2
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f7fe ff95 	bl	8005e8e <AddToXBuffer>
		AddToXBuffer(&((*mbHandler).ExpBuffer), (uint8_t)3);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8006f6a:	2103      	movs	r1, #3
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f7fe ff8e 	bl	8005e8e <AddToXBuffer>

		uint16_t calculatedCRC = CalculateCRC(((*mbHandler).ExpBuffer).u8Array, ((*mbHandler).ExpBuffer).Index);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f503 7296 	add.w	r2, r3, #300	; 0x12c
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f893 31ad 	ldrb.w	r3, [r3, #429]	; 0x1ad
 8006f7e:	4619      	mov	r1, r3
 8006f80:	4610      	mov	r0, r2
 8006f82:	f7ff f873 	bl	800606c <CalculateCRC>
 8006f86:	4603      	mov	r3, r0
 8006f88:	83bb      	strh	r3, [r7, #28]
		uint8_t* crcPtr = RegToBytes(calculatedCRC);
 8006f8a:	8bbb      	ldrh	r3, [r7, #28]
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f7fe ffd7 	bl	8005f40 <RegToBytes>
 8006f92:	61b8      	str	r0, [r7, #24]

		AddToXBuffer(&((*mbHandler).ExpBuffer), *(crcPtr + 1));
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f503 7296 	add.w	r2, r3, #300	; 0x12c
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	4610      	mov	r0, r2
 8006fa4:	f7fe ff73 	bl	8005e8e <AddToXBuffer>
		AddToXBuffer(&((*mbHandler).ExpBuffer), *crcPtr);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f503 7296 	add.w	r2, r3, #300	; 0x12c
 8006fae:	69bb      	ldr	r3, [r7, #24]
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	4610      	mov	r0, r2
 8006fb6:	f7fe ff6a 	bl	8005e8e <AddToXBuffer>

		TransmitXBuffer(mbHandler, &((*mbHandler).ExpBuffer));
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f7ff f90c 	bl	80061e0 <TransmitXBuffer>


		printMsg("Illegal data value\n");
 8006fc8:	482f      	ldr	r0, [pc, #188]	; (8007088 <HandleException+0x2e4>)
 8006fca:	f7fa f811 	bl	8000ff0 <printMsg>
		break;
 8006fce:	e10c      	b.n	80071ea <HandleException+0x446>
	}
	case 4:
	{
		printMsg("Exeption:%d\n",exeption);
 8006fd0:	78fb      	ldrb	r3, [r7, #3]
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	4829      	ldr	r0, [pc, #164]	; (800707c <HandleException+0x2d8>)
 8006fd6:	f7fa f80b 	bl	8000ff0 <printMsg>

		uint8_t slaveId = (uint8_t)rxBuffer.u8Array[0];
 8006fda:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8006fde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uint8_t excFuncCode = (uint8_t)(rxBuffer.u8Array[1] + 80);
 8006fe2:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8006fe6:	3350      	adds	r3, #80	; 0x50
 8006fe8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

		AddToXBuffer(&((*mbHandler).ExpBuffer), slaveId);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8006ff2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006ff6:	4611      	mov	r1, r2
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f7fe ff48 	bl	8005e8e <AddToXBuffer>
		AddToXBuffer(&((*mbHandler).ExpBuffer), excFuncCode);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8007004:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007008:	4611      	mov	r1, r2
 800700a:	4618      	mov	r0, r3
 800700c:	f7fe ff3f 	bl	8005e8e <AddToXBuffer>
		AddToXBuffer(&((*mbHandler).ExpBuffer), (uint8_t)4);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8007016:	2104      	movs	r1, #4
 8007018:	4618      	mov	r0, r3
 800701a:	f7fe ff38 	bl	8005e8e <AddToXBuffer>

		uint16_t calculatedCRC = CalculateCRC(((*mbHandler).ExpBuffer).u8Array, ((*mbHandler).ExpBuffer).Index);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f503 7296 	add.w	r2, r3, #300	; 0x12c
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f893 31ad 	ldrb.w	r3, [r3, #429]	; 0x1ad
 800702a:	4619      	mov	r1, r3
 800702c:	4610      	mov	r0, r2
 800702e:	f7ff f81d 	bl	800606c <CalculateCRC>
 8007032:	4603      	mov	r3, r0
 8007034:	84bb      	strh	r3, [r7, #36]	; 0x24
		uint8_t* crcPtr = RegToBytes(calculatedCRC);
 8007036:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007038:	4618      	mov	r0, r3
 800703a:	f7fe ff81 	bl	8005f40 <RegToBytes>
 800703e:	6238      	str	r0, [r7, #32]

		AddToXBuffer(&((*mbHandler).ExpBuffer), *(crcPtr + 1));
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f503 7296 	add.w	r2, r3, #300	; 0x12c
 8007046:	6a3b      	ldr	r3, [r7, #32]
 8007048:	3301      	adds	r3, #1
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	4619      	mov	r1, r3
 800704e:	4610      	mov	r0, r2
 8007050:	f7fe ff1d 	bl	8005e8e <AddToXBuffer>
		AddToXBuffer(&((*mbHandler).ExpBuffer), *crcPtr);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f503 7296 	add.w	r2, r3, #300	; 0x12c
 800705a:	6a3b      	ldr	r3, [r7, #32]
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	4619      	mov	r1, r3
 8007060:	4610      	mov	r0, r2
 8007062:	f7fe ff14 	bl	8005e8e <AddToXBuffer>

		TransmitXBuffer(mbHandler, &((*mbHandler).ExpBuffer));
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800706c:	4619      	mov	r1, r3
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f7ff f8b6 	bl	80061e0 <TransmitXBuffer>

		printMsg("Server device failure\n ");
 8007074:	4805      	ldr	r0, [pc, #20]	; (800708c <HandleException+0x2e8>)
 8007076:	f7f9 ffbb 	bl	8000ff0 <printMsg>
		break;
 800707a:	e0b6      	b.n	80071ea <HandleException+0x446>
 800707c:	080081f4 	.word	0x080081f4
 8007080:	08008204 	.word	0x08008204
 8007084:	08008218 	.word	0x08008218
 8007088:	08008230 	.word	0x08008230
 800708c:	08008244 	.word	0x08008244
	}
	case 5:
	{
		printMsg("Exeption:%d\n",exeption);
 8007090:	78fb      	ldrb	r3, [r7, #3]
 8007092:	4619      	mov	r1, r3
 8007094:	4858      	ldr	r0, [pc, #352]	; (80071f8 <HandleException+0x454>)
 8007096:	f7f9 ffab 	bl	8000ff0 <printMsg>

		uint8_t slaveId = (uint8_t)rxBuffer.u8Array[0];
 800709a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800709e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		uint8_t excFuncCode = (uint8_t)(rxBuffer.u8Array[1] + 80);
 80070a2:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80070a6:	3350      	adds	r3, #80	; 0x50
 80070a8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

		AddToXBuffer(&((*mbHandler).ExpBuffer), slaveId);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 80070b2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80070b6:	4611      	mov	r1, r2
 80070b8:	4618      	mov	r0, r3
 80070ba:	f7fe fee8 	bl	8005e8e <AddToXBuffer>
		AddToXBuffer(&((*mbHandler).ExpBuffer), excFuncCode);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 80070c4:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80070c8:	4611      	mov	r1, r2
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7fe fedf 	bl	8005e8e <AddToXBuffer>
		AddToXBuffer(&((*mbHandler).ExpBuffer), (uint8_t)5);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 80070d6:	2105      	movs	r1, #5
 80070d8:	4618      	mov	r0, r3
 80070da:	f7fe fed8 	bl	8005e8e <AddToXBuffer>

		uint16_t calculatedCRC = CalculateCRC(((*mbHandler).ExpBuffer).u8Array, ((*mbHandler).ExpBuffer).Index);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f503 7296 	add.w	r2, r3, #300	; 0x12c
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f893 31ad 	ldrb.w	r3, [r3, #429]	; 0x1ad
 80070ea:	4619      	mov	r1, r3
 80070ec:	4610      	mov	r0, r2
 80070ee:	f7fe ffbd 	bl	800606c <CalculateCRC>
 80070f2:	4603      	mov	r3, r0
 80070f4:	85bb      	strh	r3, [r7, #44]	; 0x2c
		uint8_t* crcPtr = RegToBytes(calculatedCRC);
 80070f6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80070f8:	4618      	mov	r0, r3
 80070fa:	f7fe ff21 	bl	8005f40 <RegToBytes>
 80070fe:	62b8      	str	r0, [r7, #40]	; 0x28

		AddToXBuffer(&((*mbHandler).ExpBuffer), *(crcPtr + 1));
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f503 7296 	add.w	r2, r3, #300	; 0x12c
 8007106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007108:	3301      	adds	r3, #1
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	4619      	mov	r1, r3
 800710e:	4610      	mov	r0, r2
 8007110:	f7fe febd 	bl	8005e8e <AddToXBuffer>
		AddToXBuffer(&((*mbHandler).ExpBuffer), *crcPtr);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f503 7296 	add.w	r2, r3, #300	; 0x12c
 800711a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	4619      	mov	r1, r3
 8007120:	4610      	mov	r0, r2
 8007122:	f7fe feb4 	bl	8005e8e <AddToXBuffer>

		TransmitXBuffer(mbHandler, &((*mbHandler).ExpBuffer));
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800712c:	4619      	mov	r1, r3
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f7ff f856 	bl	80061e0 <TransmitXBuffer>


		printMsg("Acknowledge\n");
 8007134:	4831      	ldr	r0, [pc, #196]	; (80071fc <HandleException+0x458>)
 8007136:	f7f9 ff5b 	bl	8000ff0 <printMsg>
		break;
 800713a:	e056      	b.n	80071ea <HandleException+0x446>
	}
	case 6:
	{
		printMsg("Exeption:%d\n",exeption);
 800713c:	78fb      	ldrb	r3, [r7, #3]
 800713e:	4619      	mov	r1, r3
 8007140:	482d      	ldr	r0, [pc, #180]	; (80071f8 <HandleException+0x454>)
 8007142:	f7f9 ff55 	bl	8000ff0 <printMsg>

		uint8_t slaveId = (uint8_t)rxBuffer.u8Array[0];
 8007146:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800714a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		uint8_t excFuncCode = (uint8_t)(rxBuffer.u8Array[1] + 80);
 800714e:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8007152:	3350      	adds	r3, #80	; 0x50
 8007154:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		AddToXBuffer(&((*mbHandler).ExpBuffer), slaveId);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800715e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8007162:	4611      	mov	r1, r2
 8007164:	4618      	mov	r0, r3
 8007166:	f7fe fe92 	bl	8005e8e <AddToXBuffer>
		AddToXBuffer(&((*mbHandler).ExpBuffer), excFuncCode);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8007170:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8007174:	4611      	mov	r1, r2
 8007176:	4618      	mov	r0, r3
 8007178:	f7fe fe89 	bl	8005e8e <AddToXBuffer>
		AddToXBuffer(&((*mbHandler).ExpBuffer), (uint8_t)6);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8007182:	2106      	movs	r1, #6
 8007184:	4618      	mov	r0, r3
 8007186:	f7fe fe82 	bl	8005e8e <AddToXBuffer>

		uint16_t calculatedCRC = CalculateCRC(((*mbHandler).ExpBuffer).u8Array, ((*mbHandler).ExpBuffer).Index);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f503 7296 	add.w	r2, r3, #300	; 0x12c
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f893 31ad 	ldrb.w	r3, [r3, #429]	; 0x1ad
 8007196:	4619      	mov	r1, r3
 8007198:	4610      	mov	r0, r2
 800719a:	f7fe ff67 	bl	800606c <CalculateCRC>
 800719e:	4603      	mov	r3, r0
 80071a0:	86bb      	strh	r3, [r7, #52]	; 0x34
		uint8_t* crcPtr = RegToBytes(calculatedCRC);
 80071a2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80071a4:	4618      	mov	r0, r3
 80071a6:	f7fe fecb 	bl	8005f40 <RegToBytes>
 80071aa:	6338      	str	r0, [r7, #48]	; 0x30

		AddToXBuffer(&((*mbHandler).ExpBuffer), *(crcPtr + 1));
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f503 7296 	add.w	r2, r3, #300	; 0x12c
 80071b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b4:	3301      	adds	r3, #1
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	4619      	mov	r1, r3
 80071ba:	4610      	mov	r0, r2
 80071bc:	f7fe fe67 	bl	8005e8e <AddToXBuffer>
		AddToXBuffer(&((*mbHandler).ExpBuffer), *crcPtr);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f503 7296 	add.w	r2, r3, #300	; 0x12c
 80071c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	4619      	mov	r1, r3
 80071cc:	4610      	mov	r0, r2
 80071ce:	f7fe fe5e 	bl	8005e8e <AddToXBuffer>

		TransmitXBuffer(mbHandler, &((*mbHandler).ExpBuffer));
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 80071d8:	4619      	mov	r1, r3
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f7ff f800 	bl	80061e0 <TransmitXBuffer>


		printMsg("Server_Device_Busy\n");
 80071e0:	4807      	ldr	r0, [pc, #28]	; (8007200 <HandleException+0x45c>)
 80071e2:	f7f9 ff05 	bl	8000ff0 <printMsg>
		break;
 80071e6:	e000      	b.n	80071ea <HandleException+0x446>
	}
	default:
		break;
 80071e8:	bf00      	nop
	}
}
 80071ea:	bf00      	nop
 80071ec:	3738      	adds	r7, #56	; 0x38
 80071ee:	46bd      	mov	sp, r7
 80071f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80071f4:	b002      	add	sp, #8
 80071f6:	4770      	bx	lr
 80071f8:	080081f4 	.word	0x080081f4
 80071fc:	0800825c 	.word	0x0800825c
 8007200:	0800826c 	.word	0x0800826c

08007204 <ntc_convertToC>:
#include "ntcConfig.h"
#include <math.h>

//#######################################################################################
float ntc_convertToC(uint32_t adcValue)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  float rntc = (float)_NTC_R_SERIES / (((float)_NTC_ADC_MAX / (float)adcValue ) - 1.0f);
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f7f9 fc9b 	bl	8000b48 <__aeabi_ui2f>
 8007212:	4603      	mov	r3, r0
 8007214:	4619      	mov	r1, r3
 8007216:	481c      	ldr	r0, [pc, #112]	; (8007288 <ntc_convertToC+0x84>)
 8007218:	f7f9 fda2 	bl	8000d60 <__aeabi_fdiv>
 800721c:	4603      	mov	r3, r0
 800721e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8007222:	4618      	mov	r0, r3
 8007224:	f7f9 fbde 	bl	80009e4 <__aeabi_fsub>
 8007228:	4603      	mov	r3, r0
 800722a:	4619      	mov	r1, r3
 800722c:	4817      	ldr	r0, [pc, #92]	; (800728c <ntc_convertToC+0x88>)
 800722e:	f7f9 fd97 	bl	8000d60 <__aeabi_fdiv>
 8007232:	4603      	mov	r3, r0
 8007234:	60fb      	str	r3, [r7, #12]
  float temp;
  temp = rntc / (float)_NTC_R_NOMINAL; 
 8007236:	4915      	ldr	r1, [pc, #84]	; (800728c <ntc_convertToC+0x88>)
 8007238:	68f8      	ldr	r0, [r7, #12]
 800723a:	f7f9 fd91 	bl	8000d60 <__aeabi_fdiv>
 800723e:	4603      	mov	r3, r0
 8007240:	60bb      	str	r3, [r7, #8]
  temp = logf(temp);
 8007242:	68b8      	ldr	r0, [r7, #8]
 8007244:	f000 fc96 	bl	8007b74 <logf>
 8007248:	60b8      	str	r0, [r7, #8]
  temp /= (float)_NTC_BETA;
 800724a:	4911      	ldr	r1, [pc, #68]	; (8007290 <ntc_convertToC+0x8c>)
 800724c:	68b8      	ldr	r0, [r7, #8]
 800724e:	f7f9 fd87 	bl	8000d60 <__aeabi_fdiv>
 8007252:	4603      	mov	r3, r0
 8007254:	60bb      	str	r3, [r7, #8]
  temp += 1.0f / ((float)_NTC_TEMP_NOMINAL + 273.15f);
 8007256:	490f      	ldr	r1, [pc, #60]	; (8007294 <ntc_convertToC+0x90>)
 8007258:	68b8      	ldr	r0, [r7, #8]
 800725a:	f7f9 fbc5 	bl	80009e8 <__addsf3>
 800725e:	4603      	mov	r3, r0
 8007260:	60bb      	str	r3, [r7, #8]
  temp = 1.0f / temp;
 8007262:	68b9      	ldr	r1, [r7, #8]
 8007264:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007268:	f7f9 fd7a 	bl	8000d60 <__aeabi_fdiv>
 800726c:	4603      	mov	r3, r0
 800726e:	60bb      	str	r3, [r7, #8]
  temp -= 273.15f;
 8007270:	4909      	ldr	r1, [pc, #36]	; (8007298 <ntc_convertToC+0x94>)
 8007272:	68b8      	ldr	r0, [r7, #8]
 8007274:	f7f9 fbb6 	bl	80009e4 <__aeabi_fsub>
 8007278:	4603      	mov	r3, r0
 800727a:	60bb      	str	r3, [r7, #8]
  return temp;
 800727c:	68bb      	ldr	r3, [r7, #8]
}
 800727e:	4618      	mov	r0, r3
 8007280:	3710      	adds	r7, #16
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}
 8007286:	bf00      	nop
 8007288:	457ff000 	.word	0x457ff000
 800728c:	461c4000 	.word	0x461c4000
 8007290:	4576e000 	.word	0x4576e000
 8007294:	3b5bcf0f 	.word	0x3b5bcf0f
 8007298:	43889333 	.word	0x43889333

0800729c <__errno>:
 800729c:	4b01      	ldr	r3, [pc, #4]	; (80072a4 <__errno+0x8>)
 800729e:	6818      	ldr	r0, [r3, #0]
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop
 80072a4:	20000014 	.word	0x20000014

080072a8 <__libc_init_array>:
 80072a8:	b570      	push	{r4, r5, r6, lr}
 80072aa:	2600      	movs	r6, #0
 80072ac:	4d0c      	ldr	r5, [pc, #48]	; (80072e0 <__libc_init_array+0x38>)
 80072ae:	4c0d      	ldr	r4, [pc, #52]	; (80072e4 <__libc_init_array+0x3c>)
 80072b0:	1b64      	subs	r4, r4, r5
 80072b2:	10a4      	asrs	r4, r4, #2
 80072b4:	42a6      	cmp	r6, r4
 80072b6:	d109      	bne.n	80072cc <__libc_init_array+0x24>
 80072b8:	f000 fdb4 	bl	8007e24 <_init>
 80072bc:	2600      	movs	r6, #0
 80072be:	4d0a      	ldr	r5, [pc, #40]	; (80072e8 <__libc_init_array+0x40>)
 80072c0:	4c0a      	ldr	r4, [pc, #40]	; (80072ec <__libc_init_array+0x44>)
 80072c2:	1b64      	subs	r4, r4, r5
 80072c4:	10a4      	asrs	r4, r4, #2
 80072c6:	42a6      	cmp	r6, r4
 80072c8:	d105      	bne.n	80072d6 <__libc_init_array+0x2e>
 80072ca:	bd70      	pop	{r4, r5, r6, pc}
 80072cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80072d0:	4798      	blx	r3
 80072d2:	3601      	adds	r6, #1
 80072d4:	e7ee      	b.n	80072b4 <__libc_init_array+0xc>
 80072d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80072da:	4798      	blx	r3
 80072dc:	3601      	adds	r6, #1
 80072de:	e7f2      	b.n	80072c6 <__libc_init_array+0x1e>
 80072e0:	080082cc 	.word	0x080082cc
 80072e4:	080082cc 	.word	0x080082cc
 80072e8:	080082cc 	.word	0x080082cc
 80072ec:	080082d0 	.word	0x080082d0

080072f0 <memcpy>:
 80072f0:	440a      	add	r2, r1
 80072f2:	4291      	cmp	r1, r2
 80072f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80072f8:	d100      	bne.n	80072fc <memcpy+0xc>
 80072fa:	4770      	bx	lr
 80072fc:	b510      	push	{r4, lr}
 80072fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007302:	4291      	cmp	r1, r2
 8007304:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007308:	d1f9      	bne.n	80072fe <memcpy+0xe>
 800730a:	bd10      	pop	{r4, pc}

0800730c <memset>:
 800730c:	4603      	mov	r3, r0
 800730e:	4402      	add	r2, r0
 8007310:	4293      	cmp	r3, r2
 8007312:	d100      	bne.n	8007316 <memset+0xa>
 8007314:	4770      	bx	lr
 8007316:	f803 1b01 	strb.w	r1, [r3], #1
 800731a:	e7f9      	b.n	8007310 <memset+0x4>

0800731c <_free_r>:
 800731c:	b538      	push	{r3, r4, r5, lr}
 800731e:	4605      	mov	r5, r0
 8007320:	2900      	cmp	r1, #0
 8007322:	d043      	beq.n	80073ac <_free_r+0x90>
 8007324:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007328:	1f0c      	subs	r4, r1, #4
 800732a:	2b00      	cmp	r3, #0
 800732c:	bfb8      	it	lt
 800732e:	18e4      	addlt	r4, r4, r3
 8007330:	f000 f8ca 	bl	80074c8 <__malloc_lock>
 8007334:	4a1e      	ldr	r2, [pc, #120]	; (80073b0 <_free_r+0x94>)
 8007336:	6813      	ldr	r3, [r2, #0]
 8007338:	4610      	mov	r0, r2
 800733a:	b933      	cbnz	r3, 800734a <_free_r+0x2e>
 800733c:	6063      	str	r3, [r4, #4]
 800733e:	6014      	str	r4, [r2, #0]
 8007340:	4628      	mov	r0, r5
 8007342:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007346:	f000 b8c5 	b.w	80074d4 <__malloc_unlock>
 800734a:	42a3      	cmp	r3, r4
 800734c:	d90a      	bls.n	8007364 <_free_r+0x48>
 800734e:	6821      	ldr	r1, [r4, #0]
 8007350:	1862      	adds	r2, r4, r1
 8007352:	4293      	cmp	r3, r2
 8007354:	bf01      	itttt	eq
 8007356:	681a      	ldreq	r2, [r3, #0]
 8007358:	685b      	ldreq	r3, [r3, #4]
 800735a:	1852      	addeq	r2, r2, r1
 800735c:	6022      	streq	r2, [r4, #0]
 800735e:	6063      	str	r3, [r4, #4]
 8007360:	6004      	str	r4, [r0, #0]
 8007362:	e7ed      	b.n	8007340 <_free_r+0x24>
 8007364:	461a      	mov	r2, r3
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	b10b      	cbz	r3, 800736e <_free_r+0x52>
 800736a:	42a3      	cmp	r3, r4
 800736c:	d9fa      	bls.n	8007364 <_free_r+0x48>
 800736e:	6811      	ldr	r1, [r2, #0]
 8007370:	1850      	adds	r0, r2, r1
 8007372:	42a0      	cmp	r0, r4
 8007374:	d10b      	bne.n	800738e <_free_r+0x72>
 8007376:	6820      	ldr	r0, [r4, #0]
 8007378:	4401      	add	r1, r0
 800737a:	1850      	adds	r0, r2, r1
 800737c:	4283      	cmp	r3, r0
 800737e:	6011      	str	r1, [r2, #0]
 8007380:	d1de      	bne.n	8007340 <_free_r+0x24>
 8007382:	6818      	ldr	r0, [r3, #0]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	4401      	add	r1, r0
 8007388:	6011      	str	r1, [r2, #0]
 800738a:	6053      	str	r3, [r2, #4]
 800738c:	e7d8      	b.n	8007340 <_free_r+0x24>
 800738e:	d902      	bls.n	8007396 <_free_r+0x7a>
 8007390:	230c      	movs	r3, #12
 8007392:	602b      	str	r3, [r5, #0]
 8007394:	e7d4      	b.n	8007340 <_free_r+0x24>
 8007396:	6820      	ldr	r0, [r4, #0]
 8007398:	1821      	adds	r1, r4, r0
 800739a:	428b      	cmp	r3, r1
 800739c:	bf01      	itttt	eq
 800739e:	6819      	ldreq	r1, [r3, #0]
 80073a0:	685b      	ldreq	r3, [r3, #4]
 80073a2:	1809      	addeq	r1, r1, r0
 80073a4:	6021      	streq	r1, [r4, #0]
 80073a6:	6063      	str	r3, [r4, #4]
 80073a8:	6054      	str	r4, [r2, #4]
 80073aa:	e7c9      	b.n	8007340 <_free_r+0x24>
 80073ac:	bd38      	pop	{r3, r4, r5, pc}
 80073ae:	bf00      	nop
 80073b0:	200000a8 	.word	0x200000a8

080073b4 <_malloc_r>:
 80073b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073b6:	1ccd      	adds	r5, r1, #3
 80073b8:	f025 0503 	bic.w	r5, r5, #3
 80073bc:	3508      	adds	r5, #8
 80073be:	2d0c      	cmp	r5, #12
 80073c0:	bf38      	it	cc
 80073c2:	250c      	movcc	r5, #12
 80073c4:	2d00      	cmp	r5, #0
 80073c6:	4606      	mov	r6, r0
 80073c8:	db01      	blt.n	80073ce <_malloc_r+0x1a>
 80073ca:	42a9      	cmp	r1, r5
 80073cc:	d903      	bls.n	80073d6 <_malloc_r+0x22>
 80073ce:	230c      	movs	r3, #12
 80073d0:	6033      	str	r3, [r6, #0]
 80073d2:	2000      	movs	r0, #0
 80073d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073d6:	f000 f877 	bl	80074c8 <__malloc_lock>
 80073da:	4921      	ldr	r1, [pc, #132]	; (8007460 <_malloc_r+0xac>)
 80073dc:	680a      	ldr	r2, [r1, #0]
 80073de:	4614      	mov	r4, r2
 80073e0:	b99c      	cbnz	r4, 800740a <_malloc_r+0x56>
 80073e2:	4f20      	ldr	r7, [pc, #128]	; (8007464 <_malloc_r+0xb0>)
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	b923      	cbnz	r3, 80073f2 <_malloc_r+0x3e>
 80073e8:	4621      	mov	r1, r4
 80073ea:	4630      	mov	r0, r6
 80073ec:	f000 f83c 	bl	8007468 <_sbrk_r>
 80073f0:	6038      	str	r0, [r7, #0]
 80073f2:	4629      	mov	r1, r5
 80073f4:	4630      	mov	r0, r6
 80073f6:	f000 f837 	bl	8007468 <_sbrk_r>
 80073fa:	1c43      	adds	r3, r0, #1
 80073fc:	d123      	bne.n	8007446 <_malloc_r+0x92>
 80073fe:	230c      	movs	r3, #12
 8007400:	4630      	mov	r0, r6
 8007402:	6033      	str	r3, [r6, #0]
 8007404:	f000 f866 	bl	80074d4 <__malloc_unlock>
 8007408:	e7e3      	b.n	80073d2 <_malloc_r+0x1e>
 800740a:	6823      	ldr	r3, [r4, #0]
 800740c:	1b5b      	subs	r3, r3, r5
 800740e:	d417      	bmi.n	8007440 <_malloc_r+0x8c>
 8007410:	2b0b      	cmp	r3, #11
 8007412:	d903      	bls.n	800741c <_malloc_r+0x68>
 8007414:	6023      	str	r3, [r4, #0]
 8007416:	441c      	add	r4, r3
 8007418:	6025      	str	r5, [r4, #0]
 800741a:	e004      	b.n	8007426 <_malloc_r+0x72>
 800741c:	6863      	ldr	r3, [r4, #4]
 800741e:	42a2      	cmp	r2, r4
 8007420:	bf0c      	ite	eq
 8007422:	600b      	streq	r3, [r1, #0]
 8007424:	6053      	strne	r3, [r2, #4]
 8007426:	4630      	mov	r0, r6
 8007428:	f000 f854 	bl	80074d4 <__malloc_unlock>
 800742c:	f104 000b 	add.w	r0, r4, #11
 8007430:	1d23      	adds	r3, r4, #4
 8007432:	f020 0007 	bic.w	r0, r0, #7
 8007436:	1ac2      	subs	r2, r0, r3
 8007438:	d0cc      	beq.n	80073d4 <_malloc_r+0x20>
 800743a:	1a1b      	subs	r3, r3, r0
 800743c:	50a3      	str	r3, [r4, r2]
 800743e:	e7c9      	b.n	80073d4 <_malloc_r+0x20>
 8007440:	4622      	mov	r2, r4
 8007442:	6864      	ldr	r4, [r4, #4]
 8007444:	e7cc      	b.n	80073e0 <_malloc_r+0x2c>
 8007446:	1cc4      	adds	r4, r0, #3
 8007448:	f024 0403 	bic.w	r4, r4, #3
 800744c:	42a0      	cmp	r0, r4
 800744e:	d0e3      	beq.n	8007418 <_malloc_r+0x64>
 8007450:	1a21      	subs	r1, r4, r0
 8007452:	4630      	mov	r0, r6
 8007454:	f000 f808 	bl	8007468 <_sbrk_r>
 8007458:	3001      	adds	r0, #1
 800745a:	d1dd      	bne.n	8007418 <_malloc_r+0x64>
 800745c:	e7cf      	b.n	80073fe <_malloc_r+0x4a>
 800745e:	bf00      	nop
 8007460:	200000a8 	.word	0x200000a8
 8007464:	200000ac 	.word	0x200000ac

08007468 <_sbrk_r>:
 8007468:	b538      	push	{r3, r4, r5, lr}
 800746a:	2300      	movs	r3, #0
 800746c:	4d05      	ldr	r5, [pc, #20]	; (8007484 <_sbrk_r+0x1c>)
 800746e:	4604      	mov	r4, r0
 8007470:	4608      	mov	r0, r1
 8007472:	602b      	str	r3, [r5, #0]
 8007474:	f7fa fcaa 	bl	8001dcc <_sbrk>
 8007478:	1c43      	adds	r3, r0, #1
 800747a:	d102      	bne.n	8007482 <_sbrk_r+0x1a>
 800747c:	682b      	ldr	r3, [r5, #0]
 800747e:	b103      	cbz	r3, 8007482 <_sbrk_r+0x1a>
 8007480:	6023      	str	r3, [r4, #0]
 8007482:	bd38      	pop	{r3, r4, r5, pc}
 8007484:	2000040c 	.word	0x2000040c

08007488 <_vsiprintf_r>:
 8007488:	b500      	push	{lr}
 800748a:	b09b      	sub	sp, #108	; 0x6c
 800748c:	9100      	str	r1, [sp, #0]
 800748e:	9104      	str	r1, [sp, #16]
 8007490:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007494:	9105      	str	r1, [sp, #20]
 8007496:	9102      	str	r1, [sp, #8]
 8007498:	4905      	ldr	r1, [pc, #20]	; (80074b0 <_vsiprintf_r+0x28>)
 800749a:	9103      	str	r1, [sp, #12]
 800749c:	4669      	mov	r1, sp
 800749e:	f000 f87b 	bl	8007598 <_svfiprintf_r>
 80074a2:	2200      	movs	r2, #0
 80074a4:	9b00      	ldr	r3, [sp, #0]
 80074a6:	701a      	strb	r2, [r3, #0]
 80074a8:	b01b      	add	sp, #108	; 0x6c
 80074aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80074ae:	bf00      	nop
 80074b0:	ffff0208 	.word	0xffff0208

080074b4 <vsiprintf>:
 80074b4:	4613      	mov	r3, r2
 80074b6:	460a      	mov	r2, r1
 80074b8:	4601      	mov	r1, r0
 80074ba:	4802      	ldr	r0, [pc, #8]	; (80074c4 <vsiprintf+0x10>)
 80074bc:	6800      	ldr	r0, [r0, #0]
 80074be:	f7ff bfe3 	b.w	8007488 <_vsiprintf_r>
 80074c2:	bf00      	nop
 80074c4:	20000014 	.word	0x20000014

080074c8 <__malloc_lock>:
 80074c8:	4801      	ldr	r0, [pc, #4]	; (80074d0 <__malloc_lock+0x8>)
 80074ca:	f000 bafb 	b.w	8007ac4 <__retarget_lock_acquire_recursive>
 80074ce:	bf00      	nop
 80074d0:	20000414 	.word	0x20000414

080074d4 <__malloc_unlock>:
 80074d4:	4801      	ldr	r0, [pc, #4]	; (80074dc <__malloc_unlock+0x8>)
 80074d6:	f000 baf6 	b.w	8007ac6 <__retarget_lock_release_recursive>
 80074da:	bf00      	nop
 80074dc:	20000414 	.word	0x20000414

080074e0 <__ssputs_r>:
 80074e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074e4:	688e      	ldr	r6, [r1, #8]
 80074e6:	4682      	mov	sl, r0
 80074e8:	429e      	cmp	r6, r3
 80074ea:	460c      	mov	r4, r1
 80074ec:	4690      	mov	r8, r2
 80074ee:	461f      	mov	r7, r3
 80074f0:	d838      	bhi.n	8007564 <__ssputs_r+0x84>
 80074f2:	898a      	ldrh	r2, [r1, #12]
 80074f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80074f8:	d032      	beq.n	8007560 <__ssputs_r+0x80>
 80074fa:	6825      	ldr	r5, [r4, #0]
 80074fc:	6909      	ldr	r1, [r1, #16]
 80074fe:	3301      	adds	r3, #1
 8007500:	eba5 0901 	sub.w	r9, r5, r1
 8007504:	6965      	ldr	r5, [r4, #20]
 8007506:	444b      	add	r3, r9
 8007508:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800750c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007510:	106d      	asrs	r5, r5, #1
 8007512:	429d      	cmp	r5, r3
 8007514:	bf38      	it	cc
 8007516:	461d      	movcc	r5, r3
 8007518:	0553      	lsls	r3, r2, #21
 800751a:	d531      	bpl.n	8007580 <__ssputs_r+0xa0>
 800751c:	4629      	mov	r1, r5
 800751e:	f7ff ff49 	bl	80073b4 <_malloc_r>
 8007522:	4606      	mov	r6, r0
 8007524:	b950      	cbnz	r0, 800753c <__ssputs_r+0x5c>
 8007526:	230c      	movs	r3, #12
 8007528:	f04f 30ff 	mov.w	r0, #4294967295
 800752c:	f8ca 3000 	str.w	r3, [sl]
 8007530:	89a3      	ldrh	r3, [r4, #12]
 8007532:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007536:	81a3      	strh	r3, [r4, #12]
 8007538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800753c:	464a      	mov	r2, r9
 800753e:	6921      	ldr	r1, [r4, #16]
 8007540:	f7ff fed6 	bl	80072f0 <memcpy>
 8007544:	89a3      	ldrh	r3, [r4, #12]
 8007546:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800754a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800754e:	81a3      	strh	r3, [r4, #12]
 8007550:	6126      	str	r6, [r4, #16]
 8007552:	444e      	add	r6, r9
 8007554:	6026      	str	r6, [r4, #0]
 8007556:	463e      	mov	r6, r7
 8007558:	6165      	str	r5, [r4, #20]
 800755a:	eba5 0509 	sub.w	r5, r5, r9
 800755e:	60a5      	str	r5, [r4, #8]
 8007560:	42be      	cmp	r6, r7
 8007562:	d900      	bls.n	8007566 <__ssputs_r+0x86>
 8007564:	463e      	mov	r6, r7
 8007566:	4632      	mov	r2, r6
 8007568:	4641      	mov	r1, r8
 800756a:	6820      	ldr	r0, [r4, #0]
 800756c:	f000 faba 	bl	8007ae4 <memmove>
 8007570:	68a3      	ldr	r3, [r4, #8]
 8007572:	6822      	ldr	r2, [r4, #0]
 8007574:	1b9b      	subs	r3, r3, r6
 8007576:	4432      	add	r2, r6
 8007578:	2000      	movs	r0, #0
 800757a:	60a3      	str	r3, [r4, #8]
 800757c:	6022      	str	r2, [r4, #0]
 800757e:	e7db      	b.n	8007538 <__ssputs_r+0x58>
 8007580:	462a      	mov	r2, r5
 8007582:	f000 fac9 	bl	8007b18 <_realloc_r>
 8007586:	4606      	mov	r6, r0
 8007588:	2800      	cmp	r0, #0
 800758a:	d1e1      	bne.n	8007550 <__ssputs_r+0x70>
 800758c:	4650      	mov	r0, sl
 800758e:	6921      	ldr	r1, [r4, #16]
 8007590:	f7ff fec4 	bl	800731c <_free_r>
 8007594:	e7c7      	b.n	8007526 <__ssputs_r+0x46>
	...

08007598 <_svfiprintf_r>:
 8007598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800759c:	4698      	mov	r8, r3
 800759e:	898b      	ldrh	r3, [r1, #12]
 80075a0:	4607      	mov	r7, r0
 80075a2:	061b      	lsls	r3, r3, #24
 80075a4:	460d      	mov	r5, r1
 80075a6:	4614      	mov	r4, r2
 80075a8:	b09d      	sub	sp, #116	; 0x74
 80075aa:	d50e      	bpl.n	80075ca <_svfiprintf_r+0x32>
 80075ac:	690b      	ldr	r3, [r1, #16]
 80075ae:	b963      	cbnz	r3, 80075ca <_svfiprintf_r+0x32>
 80075b0:	2140      	movs	r1, #64	; 0x40
 80075b2:	f7ff feff 	bl	80073b4 <_malloc_r>
 80075b6:	6028      	str	r0, [r5, #0]
 80075b8:	6128      	str	r0, [r5, #16]
 80075ba:	b920      	cbnz	r0, 80075c6 <_svfiprintf_r+0x2e>
 80075bc:	230c      	movs	r3, #12
 80075be:	603b      	str	r3, [r7, #0]
 80075c0:	f04f 30ff 	mov.w	r0, #4294967295
 80075c4:	e0d1      	b.n	800776a <_svfiprintf_r+0x1d2>
 80075c6:	2340      	movs	r3, #64	; 0x40
 80075c8:	616b      	str	r3, [r5, #20]
 80075ca:	2300      	movs	r3, #0
 80075cc:	9309      	str	r3, [sp, #36]	; 0x24
 80075ce:	2320      	movs	r3, #32
 80075d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80075d4:	2330      	movs	r3, #48	; 0x30
 80075d6:	f04f 0901 	mov.w	r9, #1
 80075da:	f8cd 800c 	str.w	r8, [sp, #12]
 80075de:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007784 <_svfiprintf_r+0x1ec>
 80075e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80075e6:	4623      	mov	r3, r4
 80075e8:	469a      	mov	sl, r3
 80075ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075ee:	b10a      	cbz	r2, 80075f4 <_svfiprintf_r+0x5c>
 80075f0:	2a25      	cmp	r2, #37	; 0x25
 80075f2:	d1f9      	bne.n	80075e8 <_svfiprintf_r+0x50>
 80075f4:	ebba 0b04 	subs.w	fp, sl, r4
 80075f8:	d00b      	beq.n	8007612 <_svfiprintf_r+0x7a>
 80075fa:	465b      	mov	r3, fp
 80075fc:	4622      	mov	r2, r4
 80075fe:	4629      	mov	r1, r5
 8007600:	4638      	mov	r0, r7
 8007602:	f7ff ff6d 	bl	80074e0 <__ssputs_r>
 8007606:	3001      	adds	r0, #1
 8007608:	f000 80aa 	beq.w	8007760 <_svfiprintf_r+0x1c8>
 800760c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800760e:	445a      	add	r2, fp
 8007610:	9209      	str	r2, [sp, #36]	; 0x24
 8007612:	f89a 3000 	ldrb.w	r3, [sl]
 8007616:	2b00      	cmp	r3, #0
 8007618:	f000 80a2 	beq.w	8007760 <_svfiprintf_r+0x1c8>
 800761c:	2300      	movs	r3, #0
 800761e:	f04f 32ff 	mov.w	r2, #4294967295
 8007622:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007626:	f10a 0a01 	add.w	sl, sl, #1
 800762a:	9304      	str	r3, [sp, #16]
 800762c:	9307      	str	r3, [sp, #28]
 800762e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007632:	931a      	str	r3, [sp, #104]	; 0x68
 8007634:	4654      	mov	r4, sl
 8007636:	2205      	movs	r2, #5
 8007638:	f814 1b01 	ldrb.w	r1, [r4], #1
 800763c:	4851      	ldr	r0, [pc, #324]	; (8007784 <_svfiprintf_r+0x1ec>)
 800763e:	f000 fa43 	bl	8007ac8 <memchr>
 8007642:	9a04      	ldr	r2, [sp, #16]
 8007644:	b9d8      	cbnz	r0, 800767e <_svfiprintf_r+0xe6>
 8007646:	06d0      	lsls	r0, r2, #27
 8007648:	bf44      	itt	mi
 800764a:	2320      	movmi	r3, #32
 800764c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007650:	0711      	lsls	r1, r2, #28
 8007652:	bf44      	itt	mi
 8007654:	232b      	movmi	r3, #43	; 0x2b
 8007656:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800765a:	f89a 3000 	ldrb.w	r3, [sl]
 800765e:	2b2a      	cmp	r3, #42	; 0x2a
 8007660:	d015      	beq.n	800768e <_svfiprintf_r+0xf6>
 8007662:	4654      	mov	r4, sl
 8007664:	2000      	movs	r0, #0
 8007666:	f04f 0c0a 	mov.w	ip, #10
 800766a:	9a07      	ldr	r2, [sp, #28]
 800766c:	4621      	mov	r1, r4
 800766e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007672:	3b30      	subs	r3, #48	; 0x30
 8007674:	2b09      	cmp	r3, #9
 8007676:	d94e      	bls.n	8007716 <_svfiprintf_r+0x17e>
 8007678:	b1b0      	cbz	r0, 80076a8 <_svfiprintf_r+0x110>
 800767a:	9207      	str	r2, [sp, #28]
 800767c:	e014      	b.n	80076a8 <_svfiprintf_r+0x110>
 800767e:	eba0 0308 	sub.w	r3, r0, r8
 8007682:	fa09 f303 	lsl.w	r3, r9, r3
 8007686:	4313      	orrs	r3, r2
 8007688:	46a2      	mov	sl, r4
 800768a:	9304      	str	r3, [sp, #16]
 800768c:	e7d2      	b.n	8007634 <_svfiprintf_r+0x9c>
 800768e:	9b03      	ldr	r3, [sp, #12]
 8007690:	1d19      	adds	r1, r3, #4
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	9103      	str	r1, [sp, #12]
 8007696:	2b00      	cmp	r3, #0
 8007698:	bfbb      	ittet	lt
 800769a:	425b      	neglt	r3, r3
 800769c:	f042 0202 	orrlt.w	r2, r2, #2
 80076a0:	9307      	strge	r3, [sp, #28]
 80076a2:	9307      	strlt	r3, [sp, #28]
 80076a4:	bfb8      	it	lt
 80076a6:	9204      	strlt	r2, [sp, #16]
 80076a8:	7823      	ldrb	r3, [r4, #0]
 80076aa:	2b2e      	cmp	r3, #46	; 0x2e
 80076ac:	d10c      	bne.n	80076c8 <_svfiprintf_r+0x130>
 80076ae:	7863      	ldrb	r3, [r4, #1]
 80076b0:	2b2a      	cmp	r3, #42	; 0x2a
 80076b2:	d135      	bne.n	8007720 <_svfiprintf_r+0x188>
 80076b4:	9b03      	ldr	r3, [sp, #12]
 80076b6:	3402      	adds	r4, #2
 80076b8:	1d1a      	adds	r2, r3, #4
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	9203      	str	r2, [sp, #12]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	bfb8      	it	lt
 80076c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80076c6:	9305      	str	r3, [sp, #20]
 80076c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007794 <_svfiprintf_r+0x1fc>
 80076cc:	2203      	movs	r2, #3
 80076ce:	4650      	mov	r0, sl
 80076d0:	7821      	ldrb	r1, [r4, #0]
 80076d2:	f000 f9f9 	bl	8007ac8 <memchr>
 80076d6:	b140      	cbz	r0, 80076ea <_svfiprintf_r+0x152>
 80076d8:	2340      	movs	r3, #64	; 0x40
 80076da:	eba0 000a 	sub.w	r0, r0, sl
 80076de:	fa03 f000 	lsl.w	r0, r3, r0
 80076e2:	9b04      	ldr	r3, [sp, #16]
 80076e4:	3401      	adds	r4, #1
 80076e6:	4303      	orrs	r3, r0
 80076e8:	9304      	str	r3, [sp, #16]
 80076ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076ee:	2206      	movs	r2, #6
 80076f0:	4825      	ldr	r0, [pc, #148]	; (8007788 <_svfiprintf_r+0x1f0>)
 80076f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80076f6:	f000 f9e7 	bl	8007ac8 <memchr>
 80076fa:	2800      	cmp	r0, #0
 80076fc:	d038      	beq.n	8007770 <_svfiprintf_r+0x1d8>
 80076fe:	4b23      	ldr	r3, [pc, #140]	; (800778c <_svfiprintf_r+0x1f4>)
 8007700:	bb1b      	cbnz	r3, 800774a <_svfiprintf_r+0x1b2>
 8007702:	9b03      	ldr	r3, [sp, #12]
 8007704:	3307      	adds	r3, #7
 8007706:	f023 0307 	bic.w	r3, r3, #7
 800770a:	3308      	adds	r3, #8
 800770c:	9303      	str	r3, [sp, #12]
 800770e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007710:	4433      	add	r3, r6
 8007712:	9309      	str	r3, [sp, #36]	; 0x24
 8007714:	e767      	b.n	80075e6 <_svfiprintf_r+0x4e>
 8007716:	460c      	mov	r4, r1
 8007718:	2001      	movs	r0, #1
 800771a:	fb0c 3202 	mla	r2, ip, r2, r3
 800771e:	e7a5      	b.n	800766c <_svfiprintf_r+0xd4>
 8007720:	2300      	movs	r3, #0
 8007722:	f04f 0c0a 	mov.w	ip, #10
 8007726:	4619      	mov	r1, r3
 8007728:	3401      	adds	r4, #1
 800772a:	9305      	str	r3, [sp, #20]
 800772c:	4620      	mov	r0, r4
 800772e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007732:	3a30      	subs	r2, #48	; 0x30
 8007734:	2a09      	cmp	r2, #9
 8007736:	d903      	bls.n	8007740 <_svfiprintf_r+0x1a8>
 8007738:	2b00      	cmp	r3, #0
 800773a:	d0c5      	beq.n	80076c8 <_svfiprintf_r+0x130>
 800773c:	9105      	str	r1, [sp, #20]
 800773e:	e7c3      	b.n	80076c8 <_svfiprintf_r+0x130>
 8007740:	4604      	mov	r4, r0
 8007742:	2301      	movs	r3, #1
 8007744:	fb0c 2101 	mla	r1, ip, r1, r2
 8007748:	e7f0      	b.n	800772c <_svfiprintf_r+0x194>
 800774a:	ab03      	add	r3, sp, #12
 800774c:	9300      	str	r3, [sp, #0]
 800774e:	462a      	mov	r2, r5
 8007750:	4638      	mov	r0, r7
 8007752:	4b0f      	ldr	r3, [pc, #60]	; (8007790 <_svfiprintf_r+0x1f8>)
 8007754:	a904      	add	r1, sp, #16
 8007756:	f3af 8000 	nop.w
 800775a:	1c42      	adds	r2, r0, #1
 800775c:	4606      	mov	r6, r0
 800775e:	d1d6      	bne.n	800770e <_svfiprintf_r+0x176>
 8007760:	89ab      	ldrh	r3, [r5, #12]
 8007762:	065b      	lsls	r3, r3, #25
 8007764:	f53f af2c 	bmi.w	80075c0 <_svfiprintf_r+0x28>
 8007768:	9809      	ldr	r0, [sp, #36]	; 0x24
 800776a:	b01d      	add	sp, #116	; 0x74
 800776c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007770:	ab03      	add	r3, sp, #12
 8007772:	9300      	str	r3, [sp, #0]
 8007774:	462a      	mov	r2, r5
 8007776:	4638      	mov	r0, r7
 8007778:	4b05      	ldr	r3, [pc, #20]	; (8007790 <_svfiprintf_r+0x1f8>)
 800777a:	a904      	add	r1, sp, #16
 800777c:	f000 f87c 	bl	8007878 <_printf_i>
 8007780:	e7eb      	b.n	800775a <_svfiprintf_r+0x1c2>
 8007782:	bf00      	nop
 8007784:	08008298 	.word	0x08008298
 8007788:	080082a2 	.word	0x080082a2
 800778c:	00000000 	.word	0x00000000
 8007790:	080074e1 	.word	0x080074e1
 8007794:	0800829e 	.word	0x0800829e

08007798 <_printf_common>:
 8007798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800779c:	4616      	mov	r6, r2
 800779e:	4699      	mov	r9, r3
 80077a0:	688a      	ldr	r2, [r1, #8]
 80077a2:	690b      	ldr	r3, [r1, #16]
 80077a4:	4607      	mov	r7, r0
 80077a6:	4293      	cmp	r3, r2
 80077a8:	bfb8      	it	lt
 80077aa:	4613      	movlt	r3, r2
 80077ac:	6033      	str	r3, [r6, #0]
 80077ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80077b2:	460c      	mov	r4, r1
 80077b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80077b8:	b10a      	cbz	r2, 80077be <_printf_common+0x26>
 80077ba:	3301      	adds	r3, #1
 80077bc:	6033      	str	r3, [r6, #0]
 80077be:	6823      	ldr	r3, [r4, #0]
 80077c0:	0699      	lsls	r1, r3, #26
 80077c2:	bf42      	ittt	mi
 80077c4:	6833      	ldrmi	r3, [r6, #0]
 80077c6:	3302      	addmi	r3, #2
 80077c8:	6033      	strmi	r3, [r6, #0]
 80077ca:	6825      	ldr	r5, [r4, #0]
 80077cc:	f015 0506 	ands.w	r5, r5, #6
 80077d0:	d106      	bne.n	80077e0 <_printf_common+0x48>
 80077d2:	f104 0a19 	add.w	sl, r4, #25
 80077d6:	68e3      	ldr	r3, [r4, #12]
 80077d8:	6832      	ldr	r2, [r6, #0]
 80077da:	1a9b      	subs	r3, r3, r2
 80077dc:	42ab      	cmp	r3, r5
 80077de:	dc28      	bgt.n	8007832 <_printf_common+0x9a>
 80077e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80077e4:	1e13      	subs	r3, r2, #0
 80077e6:	6822      	ldr	r2, [r4, #0]
 80077e8:	bf18      	it	ne
 80077ea:	2301      	movne	r3, #1
 80077ec:	0692      	lsls	r2, r2, #26
 80077ee:	d42d      	bmi.n	800784c <_printf_common+0xb4>
 80077f0:	4649      	mov	r1, r9
 80077f2:	4638      	mov	r0, r7
 80077f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80077f8:	47c0      	blx	r8
 80077fa:	3001      	adds	r0, #1
 80077fc:	d020      	beq.n	8007840 <_printf_common+0xa8>
 80077fe:	6823      	ldr	r3, [r4, #0]
 8007800:	68e5      	ldr	r5, [r4, #12]
 8007802:	f003 0306 	and.w	r3, r3, #6
 8007806:	2b04      	cmp	r3, #4
 8007808:	bf18      	it	ne
 800780a:	2500      	movne	r5, #0
 800780c:	6832      	ldr	r2, [r6, #0]
 800780e:	f04f 0600 	mov.w	r6, #0
 8007812:	68a3      	ldr	r3, [r4, #8]
 8007814:	bf08      	it	eq
 8007816:	1aad      	subeq	r5, r5, r2
 8007818:	6922      	ldr	r2, [r4, #16]
 800781a:	bf08      	it	eq
 800781c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007820:	4293      	cmp	r3, r2
 8007822:	bfc4      	itt	gt
 8007824:	1a9b      	subgt	r3, r3, r2
 8007826:	18ed      	addgt	r5, r5, r3
 8007828:	341a      	adds	r4, #26
 800782a:	42b5      	cmp	r5, r6
 800782c:	d11a      	bne.n	8007864 <_printf_common+0xcc>
 800782e:	2000      	movs	r0, #0
 8007830:	e008      	b.n	8007844 <_printf_common+0xac>
 8007832:	2301      	movs	r3, #1
 8007834:	4652      	mov	r2, sl
 8007836:	4649      	mov	r1, r9
 8007838:	4638      	mov	r0, r7
 800783a:	47c0      	blx	r8
 800783c:	3001      	adds	r0, #1
 800783e:	d103      	bne.n	8007848 <_printf_common+0xb0>
 8007840:	f04f 30ff 	mov.w	r0, #4294967295
 8007844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007848:	3501      	adds	r5, #1
 800784a:	e7c4      	b.n	80077d6 <_printf_common+0x3e>
 800784c:	2030      	movs	r0, #48	; 0x30
 800784e:	18e1      	adds	r1, r4, r3
 8007850:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007854:	1c5a      	adds	r2, r3, #1
 8007856:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800785a:	4422      	add	r2, r4
 800785c:	3302      	adds	r3, #2
 800785e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007862:	e7c5      	b.n	80077f0 <_printf_common+0x58>
 8007864:	2301      	movs	r3, #1
 8007866:	4622      	mov	r2, r4
 8007868:	4649      	mov	r1, r9
 800786a:	4638      	mov	r0, r7
 800786c:	47c0      	blx	r8
 800786e:	3001      	adds	r0, #1
 8007870:	d0e6      	beq.n	8007840 <_printf_common+0xa8>
 8007872:	3601      	adds	r6, #1
 8007874:	e7d9      	b.n	800782a <_printf_common+0x92>
	...

08007878 <_printf_i>:
 8007878:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800787c:	460c      	mov	r4, r1
 800787e:	7e27      	ldrb	r7, [r4, #24]
 8007880:	4691      	mov	r9, r2
 8007882:	2f78      	cmp	r7, #120	; 0x78
 8007884:	4680      	mov	r8, r0
 8007886:	469a      	mov	sl, r3
 8007888:	990c      	ldr	r1, [sp, #48]	; 0x30
 800788a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800788e:	d807      	bhi.n	80078a0 <_printf_i+0x28>
 8007890:	2f62      	cmp	r7, #98	; 0x62
 8007892:	d80a      	bhi.n	80078aa <_printf_i+0x32>
 8007894:	2f00      	cmp	r7, #0
 8007896:	f000 80d9 	beq.w	8007a4c <_printf_i+0x1d4>
 800789a:	2f58      	cmp	r7, #88	; 0x58
 800789c:	f000 80a4 	beq.w	80079e8 <_printf_i+0x170>
 80078a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80078a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80078a8:	e03a      	b.n	8007920 <_printf_i+0xa8>
 80078aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80078ae:	2b15      	cmp	r3, #21
 80078b0:	d8f6      	bhi.n	80078a0 <_printf_i+0x28>
 80078b2:	a001      	add	r0, pc, #4	; (adr r0, 80078b8 <_printf_i+0x40>)
 80078b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80078b8:	08007911 	.word	0x08007911
 80078bc:	08007925 	.word	0x08007925
 80078c0:	080078a1 	.word	0x080078a1
 80078c4:	080078a1 	.word	0x080078a1
 80078c8:	080078a1 	.word	0x080078a1
 80078cc:	080078a1 	.word	0x080078a1
 80078d0:	08007925 	.word	0x08007925
 80078d4:	080078a1 	.word	0x080078a1
 80078d8:	080078a1 	.word	0x080078a1
 80078dc:	080078a1 	.word	0x080078a1
 80078e0:	080078a1 	.word	0x080078a1
 80078e4:	08007a33 	.word	0x08007a33
 80078e8:	08007955 	.word	0x08007955
 80078ec:	08007a15 	.word	0x08007a15
 80078f0:	080078a1 	.word	0x080078a1
 80078f4:	080078a1 	.word	0x080078a1
 80078f8:	08007a55 	.word	0x08007a55
 80078fc:	080078a1 	.word	0x080078a1
 8007900:	08007955 	.word	0x08007955
 8007904:	080078a1 	.word	0x080078a1
 8007908:	080078a1 	.word	0x080078a1
 800790c:	08007a1d 	.word	0x08007a1d
 8007910:	680b      	ldr	r3, [r1, #0]
 8007912:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007916:	1d1a      	adds	r2, r3, #4
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	600a      	str	r2, [r1, #0]
 800791c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007920:	2301      	movs	r3, #1
 8007922:	e0a4      	b.n	8007a6e <_printf_i+0x1f6>
 8007924:	6825      	ldr	r5, [r4, #0]
 8007926:	6808      	ldr	r0, [r1, #0]
 8007928:	062e      	lsls	r6, r5, #24
 800792a:	f100 0304 	add.w	r3, r0, #4
 800792e:	d50a      	bpl.n	8007946 <_printf_i+0xce>
 8007930:	6805      	ldr	r5, [r0, #0]
 8007932:	600b      	str	r3, [r1, #0]
 8007934:	2d00      	cmp	r5, #0
 8007936:	da03      	bge.n	8007940 <_printf_i+0xc8>
 8007938:	232d      	movs	r3, #45	; 0x2d
 800793a:	426d      	negs	r5, r5
 800793c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007940:	230a      	movs	r3, #10
 8007942:	485e      	ldr	r0, [pc, #376]	; (8007abc <_printf_i+0x244>)
 8007944:	e019      	b.n	800797a <_printf_i+0x102>
 8007946:	f015 0f40 	tst.w	r5, #64	; 0x40
 800794a:	6805      	ldr	r5, [r0, #0]
 800794c:	600b      	str	r3, [r1, #0]
 800794e:	bf18      	it	ne
 8007950:	b22d      	sxthne	r5, r5
 8007952:	e7ef      	b.n	8007934 <_printf_i+0xbc>
 8007954:	680b      	ldr	r3, [r1, #0]
 8007956:	6825      	ldr	r5, [r4, #0]
 8007958:	1d18      	adds	r0, r3, #4
 800795a:	6008      	str	r0, [r1, #0]
 800795c:	0628      	lsls	r0, r5, #24
 800795e:	d501      	bpl.n	8007964 <_printf_i+0xec>
 8007960:	681d      	ldr	r5, [r3, #0]
 8007962:	e002      	b.n	800796a <_printf_i+0xf2>
 8007964:	0669      	lsls	r1, r5, #25
 8007966:	d5fb      	bpl.n	8007960 <_printf_i+0xe8>
 8007968:	881d      	ldrh	r5, [r3, #0]
 800796a:	2f6f      	cmp	r7, #111	; 0x6f
 800796c:	bf0c      	ite	eq
 800796e:	2308      	moveq	r3, #8
 8007970:	230a      	movne	r3, #10
 8007972:	4852      	ldr	r0, [pc, #328]	; (8007abc <_printf_i+0x244>)
 8007974:	2100      	movs	r1, #0
 8007976:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800797a:	6866      	ldr	r6, [r4, #4]
 800797c:	2e00      	cmp	r6, #0
 800797e:	bfa8      	it	ge
 8007980:	6821      	ldrge	r1, [r4, #0]
 8007982:	60a6      	str	r6, [r4, #8]
 8007984:	bfa4      	itt	ge
 8007986:	f021 0104 	bicge.w	r1, r1, #4
 800798a:	6021      	strge	r1, [r4, #0]
 800798c:	b90d      	cbnz	r5, 8007992 <_printf_i+0x11a>
 800798e:	2e00      	cmp	r6, #0
 8007990:	d04d      	beq.n	8007a2e <_printf_i+0x1b6>
 8007992:	4616      	mov	r6, r2
 8007994:	fbb5 f1f3 	udiv	r1, r5, r3
 8007998:	fb03 5711 	mls	r7, r3, r1, r5
 800799c:	5dc7      	ldrb	r7, [r0, r7]
 800799e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80079a2:	462f      	mov	r7, r5
 80079a4:	42bb      	cmp	r3, r7
 80079a6:	460d      	mov	r5, r1
 80079a8:	d9f4      	bls.n	8007994 <_printf_i+0x11c>
 80079aa:	2b08      	cmp	r3, #8
 80079ac:	d10b      	bne.n	80079c6 <_printf_i+0x14e>
 80079ae:	6823      	ldr	r3, [r4, #0]
 80079b0:	07df      	lsls	r7, r3, #31
 80079b2:	d508      	bpl.n	80079c6 <_printf_i+0x14e>
 80079b4:	6923      	ldr	r3, [r4, #16]
 80079b6:	6861      	ldr	r1, [r4, #4]
 80079b8:	4299      	cmp	r1, r3
 80079ba:	bfde      	ittt	le
 80079bc:	2330      	movle	r3, #48	; 0x30
 80079be:	f806 3c01 	strble.w	r3, [r6, #-1]
 80079c2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80079c6:	1b92      	subs	r2, r2, r6
 80079c8:	6122      	str	r2, [r4, #16]
 80079ca:	464b      	mov	r3, r9
 80079cc:	4621      	mov	r1, r4
 80079ce:	4640      	mov	r0, r8
 80079d0:	f8cd a000 	str.w	sl, [sp]
 80079d4:	aa03      	add	r2, sp, #12
 80079d6:	f7ff fedf 	bl	8007798 <_printf_common>
 80079da:	3001      	adds	r0, #1
 80079dc:	d14c      	bne.n	8007a78 <_printf_i+0x200>
 80079de:	f04f 30ff 	mov.w	r0, #4294967295
 80079e2:	b004      	add	sp, #16
 80079e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079e8:	4834      	ldr	r0, [pc, #208]	; (8007abc <_printf_i+0x244>)
 80079ea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80079ee:	680e      	ldr	r6, [r1, #0]
 80079f0:	6823      	ldr	r3, [r4, #0]
 80079f2:	f856 5b04 	ldr.w	r5, [r6], #4
 80079f6:	061f      	lsls	r7, r3, #24
 80079f8:	600e      	str	r6, [r1, #0]
 80079fa:	d514      	bpl.n	8007a26 <_printf_i+0x1ae>
 80079fc:	07d9      	lsls	r1, r3, #31
 80079fe:	bf44      	itt	mi
 8007a00:	f043 0320 	orrmi.w	r3, r3, #32
 8007a04:	6023      	strmi	r3, [r4, #0]
 8007a06:	b91d      	cbnz	r5, 8007a10 <_printf_i+0x198>
 8007a08:	6823      	ldr	r3, [r4, #0]
 8007a0a:	f023 0320 	bic.w	r3, r3, #32
 8007a0e:	6023      	str	r3, [r4, #0]
 8007a10:	2310      	movs	r3, #16
 8007a12:	e7af      	b.n	8007974 <_printf_i+0xfc>
 8007a14:	6823      	ldr	r3, [r4, #0]
 8007a16:	f043 0320 	orr.w	r3, r3, #32
 8007a1a:	6023      	str	r3, [r4, #0]
 8007a1c:	2378      	movs	r3, #120	; 0x78
 8007a1e:	4828      	ldr	r0, [pc, #160]	; (8007ac0 <_printf_i+0x248>)
 8007a20:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007a24:	e7e3      	b.n	80079ee <_printf_i+0x176>
 8007a26:	065e      	lsls	r6, r3, #25
 8007a28:	bf48      	it	mi
 8007a2a:	b2ad      	uxthmi	r5, r5
 8007a2c:	e7e6      	b.n	80079fc <_printf_i+0x184>
 8007a2e:	4616      	mov	r6, r2
 8007a30:	e7bb      	b.n	80079aa <_printf_i+0x132>
 8007a32:	680b      	ldr	r3, [r1, #0]
 8007a34:	6826      	ldr	r6, [r4, #0]
 8007a36:	1d1d      	adds	r5, r3, #4
 8007a38:	6960      	ldr	r0, [r4, #20]
 8007a3a:	600d      	str	r5, [r1, #0]
 8007a3c:	0635      	lsls	r5, r6, #24
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	d501      	bpl.n	8007a46 <_printf_i+0x1ce>
 8007a42:	6018      	str	r0, [r3, #0]
 8007a44:	e002      	b.n	8007a4c <_printf_i+0x1d4>
 8007a46:	0671      	lsls	r1, r6, #25
 8007a48:	d5fb      	bpl.n	8007a42 <_printf_i+0x1ca>
 8007a4a:	8018      	strh	r0, [r3, #0]
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	4616      	mov	r6, r2
 8007a50:	6123      	str	r3, [r4, #16]
 8007a52:	e7ba      	b.n	80079ca <_printf_i+0x152>
 8007a54:	680b      	ldr	r3, [r1, #0]
 8007a56:	1d1a      	adds	r2, r3, #4
 8007a58:	600a      	str	r2, [r1, #0]
 8007a5a:	681e      	ldr	r6, [r3, #0]
 8007a5c:	2100      	movs	r1, #0
 8007a5e:	4630      	mov	r0, r6
 8007a60:	6862      	ldr	r2, [r4, #4]
 8007a62:	f000 f831 	bl	8007ac8 <memchr>
 8007a66:	b108      	cbz	r0, 8007a6c <_printf_i+0x1f4>
 8007a68:	1b80      	subs	r0, r0, r6
 8007a6a:	6060      	str	r0, [r4, #4]
 8007a6c:	6863      	ldr	r3, [r4, #4]
 8007a6e:	6123      	str	r3, [r4, #16]
 8007a70:	2300      	movs	r3, #0
 8007a72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a76:	e7a8      	b.n	80079ca <_printf_i+0x152>
 8007a78:	4632      	mov	r2, r6
 8007a7a:	4649      	mov	r1, r9
 8007a7c:	4640      	mov	r0, r8
 8007a7e:	6923      	ldr	r3, [r4, #16]
 8007a80:	47d0      	blx	sl
 8007a82:	3001      	adds	r0, #1
 8007a84:	d0ab      	beq.n	80079de <_printf_i+0x166>
 8007a86:	6823      	ldr	r3, [r4, #0]
 8007a88:	079b      	lsls	r3, r3, #30
 8007a8a:	d413      	bmi.n	8007ab4 <_printf_i+0x23c>
 8007a8c:	68e0      	ldr	r0, [r4, #12]
 8007a8e:	9b03      	ldr	r3, [sp, #12]
 8007a90:	4298      	cmp	r0, r3
 8007a92:	bfb8      	it	lt
 8007a94:	4618      	movlt	r0, r3
 8007a96:	e7a4      	b.n	80079e2 <_printf_i+0x16a>
 8007a98:	2301      	movs	r3, #1
 8007a9a:	4632      	mov	r2, r6
 8007a9c:	4649      	mov	r1, r9
 8007a9e:	4640      	mov	r0, r8
 8007aa0:	47d0      	blx	sl
 8007aa2:	3001      	adds	r0, #1
 8007aa4:	d09b      	beq.n	80079de <_printf_i+0x166>
 8007aa6:	3501      	adds	r5, #1
 8007aa8:	68e3      	ldr	r3, [r4, #12]
 8007aaa:	9903      	ldr	r1, [sp, #12]
 8007aac:	1a5b      	subs	r3, r3, r1
 8007aae:	42ab      	cmp	r3, r5
 8007ab0:	dcf2      	bgt.n	8007a98 <_printf_i+0x220>
 8007ab2:	e7eb      	b.n	8007a8c <_printf_i+0x214>
 8007ab4:	2500      	movs	r5, #0
 8007ab6:	f104 0619 	add.w	r6, r4, #25
 8007aba:	e7f5      	b.n	8007aa8 <_printf_i+0x230>
 8007abc:	080082a9 	.word	0x080082a9
 8007ac0:	080082ba 	.word	0x080082ba

08007ac4 <__retarget_lock_acquire_recursive>:
 8007ac4:	4770      	bx	lr

08007ac6 <__retarget_lock_release_recursive>:
 8007ac6:	4770      	bx	lr

08007ac8 <memchr>:
 8007ac8:	4603      	mov	r3, r0
 8007aca:	b510      	push	{r4, lr}
 8007acc:	b2c9      	uxtb	r1, r1
 8007ace:	4402      	add	r2, r0
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	d101      	bne.n	8007ada <memchr+0x12>
 8007ad6:	2000      	movs	r0, #0
 8007ad8:	e003      	b.n	8007ae2 <memchr+0x1a>
 8007ada:	7804      	ldrb	r4, [r0, #0]
 8007adc:	3301      	adds	r3, #1
 8007ade:	428c      	cmp	r4, r1
 8007ae0:	d1f6      	bne.n	8007ad0 <memchr+0x8>
 8007ae2:	bd10      	pop	{r4, pc}

08007ae4 <memmove>:
 8007ae4:	4288      	cmp	r0, r1
 8007ae6:	b510      	push	{r4, lr}
 8007ae8:	eb01 0402 	add.w	r4, r1, r2
 8007aec:	d902      	bls.n	8007af4 <memmove+0x10>
 8007aee:	4284      	cmp	r4, r0
 8007af0:	4623      	mov	r3, r4
 8007af2:	d807      	bhi.n	8007b04 <memmove+0x20>
 8007af4:	1e43      	subs	r3, r0, #1
 8007af6:	42a1      	cmp	r1, r4
 8007af8:	d008      	beq.n	8007b0c <memmove+0x28>
 8007afa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007afe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007b02:	e7f8      	b.n	8007af6 <memmove+0x12>
 8007b04:	4601      	mov	r1, r0
 8007b06:	4402      	add	r2, r0
 8007b08:	428a      	cmp	r2, r1
 8007b0a:	d100      	bne.n	8007b0e <memmove+0x2a>
 8007b0c:	bd10      	pop	{r4, pc}
 8007b0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007b16:	e7f7      	b.n	8007b08 <memmove+0x24>

08007b18 <_realloc_r>:
 8007b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b1a:	4607      	mov	r7, r0
 8007b1c:	4614      	mov	r4, r2
 8007b1e:	460e      	mov	r6, r1
 8007b20:	b921      	cbnz	r1, 8007b2c <_realloc_r+0x14>
 8007b22:	4611      	mov	r1, r2
 8007b24:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007b28:	f7ff bc44 	b.w	80073b4 <_malloc_r>
 8007b2c:	b922      	cbnz	r2, 8007b38 <_realloc_r+0x20>
 8007b2e:	f7ff fbf5 	bl	800731c <_free_r>
 8007b32:	4625      	mov	r5, r4
 8007b34:	4628      	mov	r0, r5
 8007b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b38:	f000 f814 	bl	8007b64 <_malloc_usable_size_r>
 8007b3c:	42a0      	cmp	r0, r4
 8007b3e:	d20f      	bcs.n	8007b60 <_realloc_r+0x48>
 8007b40:	4621      	mov	r1, r4
 8007b42:	4638      	mov	r0, r7
 8007b44:	f7ff fc36 	bl	80073b4 <_malloc_r>
 8007b48:	4605      	mov	r5, r0
 8007b4a:	2800      	cmp	r0, #0
 8007b4c:	d0f2      	beq.n	8007b34 <_realloc_r+0x1c>
 8007b4e:	4631      	mov	r1, r6
 8007b50:	4622      	mov	r2, r4
 8007b52:	f7ff fbcd 	bl	80072f0 <memcpy>
 8007b56:	4631      	mov	r1, r6
 8007b58:	4638      	mov	r0, r7
 8007b5a:	f7ff fbdf 	bl	800731c <_free_r>
 8007b5e:	e7e9      	b.n	8007b34 <_realloc_r+0x1c>
 8007b60:	4635      	mov	r5, r6
 8007b62:	e7e7      	b.n	8007b34 <_realloc_r+0x1c>

08007b64 <_malloc_usable_size_r>:
 8007b64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b68:	1f18      	subs	r0, r3, #4
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	bfbc      	itt	lt
 8007b6e:	580b      	ldrlt	r3, [r1, r0]
 8007b70:	18c0      	addlt	r0, r0, r3
 8007b72:	4770      	bx	lr

08007b74 <logf>:
 8007b74:	b538      	push	{r3, r4, r5, lr}
 8007b76:	4604      	mov	r4, r0
 8007b78:	f000 f82c 	bl	8007bd4 <__ieee754_logf>
 8007b7c:	4b12      	ldr	r3, [pc, #72]	; (8007bc8 <logf+0x54>)
 8007b7e:	4605      	mov	r5, r0
 8007b80:	f993 3000 	ldrsb.w	r3, [r3]
 8007b84:	3301      	adds	r3, #1
 8007b86:	d013      	beq.n	8007bb0 <logf+0x3c>
 8007b88:	4621      	mov	r1, r4
 8007b8a:	4620      	mov	r0, r4
 8007b8c:	f7f9 f9fa 	bl	8000f84 <__aeabi_fcmpun>
 8007b90:	b970      	cbnz	r0, 8007bb0 <logf+0x3c>
 8007b92:	2100      	movs	r1, #0
 8007b94:	4620      	mov	r0, r4
 8007b96:	f7f9 f9eb 	bl	8000f70 <__aeabi_fcmpgt>
 8007b9a:	b948      	cbnz	r0, 8007bb0 <logf+0x3c>
 8007b9c:	2100      	movs	r1, #0
 8007b9e:	4620      	mov	r0, r4
 8007ba0:	f7f9 f9be 	bl	8000f20 <__aeabi_fcmpeq>
 8007ba4:	b130      	cbz	r0, 8007bb4 <logf+0x40>
 8007ba6:	f7ff fb79 	bl	800729c <__errno>
 8007baa:	2322      	movs	r3, #34	; 0x22
 8007bac:	4d07      	ldr	r5, [pc, #28]	; (8007bcc <logf+0x58>)
 8007bae:	6003      	str	r3, [r0, #0]
 8007bb0:	4628      	mov	r0, r5
 8007bb2:	bd38      	pop	{r3, r4, r5, pc}
 8007bb4:	f7ff fb72 	bl	800729c <__errno>
 8007bb8:	2321      	movs	r3, #33	; 0x21
 8007bba:	6003      	str	r3, [r0, #0]
 8007bbc:	4804      	ldr	r0, [pc, #16]	; (8007bd0 <logf+0x5c>)
 8007bbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bc2:	f000 b92b 	b.w	8007e1c <nanf>
 8007bc6:	bf00      	nop
 8007bc8:	20000078 	.word	0x20000078
 8007bcc:	ff800000 	.word	0xff800000
 8007bd0:	0800829d 	.word	0x0800829d

08007bd4 <__ieee754_logf>:
 8007bd4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8007bd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bdc:	4601      	mov	r1, r0
 8007bde:	4603      	mov	r3, r0
 8007be0:	d106      	bne.n	8007bf0 <__ieee754_logf+0x1c>
 8007be2:	2100      	movs	r1, #0
 8007be4:	f04f 404c 	mov.w	r0, #3422552064	; 0xcc000000
 8007be8:	f7f9 f8ba 	bl	8000d60 <__aeabi_fdiv>
 8007bec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bf0:	2800      	cmp	r0, #0
 8007bf2:	da03      	bge.n	8007bfc <__ieee754_logf+0x28>
 8007bf4:	f7f8 fef6 	bl	80009e4 <__aeabi_fsub>
 8007bf8:	2100      	movs	r1, #0
 8007bfa:	e7f5      	b.n	8007be8 <__ieee754_logf+0x14>
 8007bfc:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8007c00:	db02      	blt.n	8007c08 <__ieee754_logf+0x34>
 8007c02:	f7f8 fef1 	bl	80009e8 <__addsf3>
 8007c06:	e7f1      	b.n	8007bec <__ieee754_logf+0x18>
 8007c08:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8007c0c:	da35      	bge.n	8007c7a <__ieee754_logf+0xa6>
 8007c0e:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8007c12:	f7f8 fff1 	bl	8000bf8 <__aeabi_fmul>
 8007c16:	f06f 0218 	mvn.w	r2, #24
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	f3c3 0416 	ubfx	r4, r3, #0, #23
 8007c20:	15de      	asrs	r6, r3, #23
 8007c22:	4b71      	ldr	r3, [pc, #452]	; (8007de8 <__ieee754_logf+0x214>)
 8007c24:	3e7f      	subs	r6, #127	; 0x7f
 8007c26:	4423      	add	r3, r4
 8007c28:	f403 0000 	and.w	r0, r3, #8388608	; 0x800000
 8007c2c:	f080 507e 	eor.w	r0, r0, #1065353216	; 0x3f800000
 8007c30:	4416      	add	r6, r2
 8007c32:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8007c36:	4320      	orrs	r0, r4
 8007c38:	eb06 56d3 	add.w	r6, r6, r3, lsr #23
 8007c3c:	f7f8 fed2 	bl	80009e4 <__aeabi_fsub>
 8007c40:	4b6a      	ldr	r3, [pc, #424]	; (8007dec <__ieee754_logf+0x218>)
 8007c42:	f104 020f 	add.w	r2, r4, #15
 8007c46:	4013      	ands	r3, r2
 8007c48:	4605      	mov	r5, r0
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d13a      	bne.n	8007cc4 <__ieee754_logf+0xf0>
 8007c4e:	2100      	movs	r1, #0
 8007c50:	f7f9 f966 	bl	8000f20 <__aeabi_fcmpeq>
 8007c54:	b198      	cbz	r0, 8007c7e <__ieee754_logf+0xaa>
 8007c56:	2e00      	cmp	r6, #0
 8007c58:	f000 80c4 	beq.w	8007de4 <__ieee754_logf+0x210>
 8007c5c:	4630      	mov	r0, r6
 8007c5e:	f7f8 ff77 	bl	8000b50 <__aeabi_i2f>
 8007c62:	4963      	ldr	r1, [pc, #396]	; (8007df0 <__ieee754_logf+0x21c>)
 8007c64:	4605      	mov	r5, r0
 8007c66:	f7f8 ffc7 	bl	8000bf8 <__aeabi_fmul>
 8007c6a:	4962      	ldr	r1, [pc, #392]	; (8007df4 <__ieee754_logf+0x220>)
 8007c6c:	4604      	mov	r4, r0
 8007c6e:	4628      	mov	r0, r5
 8007c70:	f7f8 ffc2 	bl	8000bf8 <__aeabi_fmul>
 8007c74:	4601      	mov	r1, r0
 8007c76:	4620      	mov	r0, r4
 8007c78:	e7c3      	b.n	8007c02 <__ieee754_logf+0x2e>
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	e7ce      	b.n	8007c1c <__ieee754_logf+0x48>
 8007c7e:	495e      	ldr	r1, [pc, #376]	; (8007df8 <__ieee754_logf+0x224>)
 8007c80:	4628      	mov	r0, r5
 8007c82:	f7f8 ffb9 	bl	8000bf8 <__aeabi_fmul>
 8007c86:	4601      	mov	r1, r0
 8007c88:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8007c8c:	f7f8 feaa 	bl	80009e4 <__aeabi_fsub>
 8007c90:	4629      	mov	r1, r5
 8007c92:	4604      	mov	r4, r0
 8007c94:	4628      	mov	r0, r5
 8007c96:	f7f8 ffaf 	bl	8000bf8 <__aeabi_fmul>
 8007c9a:	4601      	mov	r1, r0
 8007c9c:	4620      	mov	r0, r4
 8007c9e:	f7f8 ffab 	bl	8000bf8 <__aeabi_fmul>
 8007ca2:	4604      	mov	r4, r0
 8007ca4:	b90e      	cbnz	r6, 8007caa <__ieee754_logf+0xd6>
 8007ca6:	4621      	mov	r1, r4
 8007ca8:	e06f      	b.n	8007d8a <__ieee754_logf+0x1b6>
 8007caa:	4630      	mov	r0, r6
 8007cac:	f7f8 ff50 	bl	8000b50 <__aeabi_i2f>
 8007cb0:	494f      	ldr	r1, [pc, #316]	; (8007df0 <__ieee754_logf+0x21c>)
 8007cb2:	4607      	mov	r7, r0
 8007cb4:	f7f8 ffa0 	bl	8000bf8 <__aeabi_fmul>
 8007cb8:	4606      	mov	r6, r0
 8007cba:	4638      	mov	r0, r7
 8007cbc:	494d      	ldr	r1, [pc, #308]	; (8007df4 <__ieee754_logf+0x220>)
 8007cbe:	f7f8 ff9b 	bl	8000bf8 <__aeabi_fmul>
 8007cc2:	e072      	b.n	8007daa <__ieee754_logf+0x1d6>
 8007cc4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007cc8:	f7f8 fe8e 	bl	80009e8 <__addsf3>
 8007ccc:	4601      	mov	r1, r0
 8007cce:	4628      	mov	r0, r5
 8007cd0:	f7f9 f846 	bl	8000d60 <__aeabi_fdiv>
 8007cd4:	4681      	mov	r9, r0
 8007cd6:	4630      	mov	r0, r6
 8007cd8:	f7f8 ff3a 	bl	8000b50 <__aeabi_i2f>
 8007cdc:	4649      	mov	r1, r9
 8007cde:	4680      	mov	r8, r0
 8007ce0:	4648      	mov	r0, r9
 8007ce2:	f7f8 ff89 	bl	8000bf8 <__aeabi_fmul>
 8007ce6:	4601      	mov	r1, r0
 8007ce8:	4683      	mov	fp, r0
 8007cea:	f7f8 ff85 	bl	8000bf8 <__aeabi_fmul>
 8007cee:	4607      	mov	r7, r0
 8007cf0:	4942      	ldr	r1, [pc, #264]	; (8007dfc <__ieee754_logf+0x228>)
 8007cf2:	f7f8 ff81 	bl	8000bf8 <__aeabi_fmul>
 8007cf6:	4942      	ldr	r1, [pc, #264]	; (8007e00 <__ieee754_logf+0x22c>)
 8007cf8:	f7f8 fe76 	bl	80009e8 <__addsf3>
 8007cfc:	4639      	mov	r1, r7
 8007cfe:	f7f8 ff7b 	bl	8000bf8 <__aeabi_fmul>
 8007d02:	4940      	ldr	r1, [pc, #256]	; (8007e04 <__ieee754_logf+0x230>)
 8007d04:	f7f8 fe70 	bl	80009e8 <__addsf3>
 8007d08:	4639      	mov	r1, r7
 8007d0a:	f7f8 ff75 	bl	8000bf8 <__aeabi_fmul>
 8007d0e:	493e      	ldr	r1, [pc, #248]	; (8007e08 <__ieee754_logf+0x234>)
 8007d10:	f7f8 fe6a 	bl	80009e8 <__addsf3>
 8007d14:	4659      	mov	r1, fp
 8007d16:	f7f8 ff6f 	bl	8000bf8 <__aeabi_fmul>
 8007d1a:	493c      	ldr	r1, [pc, #240]	; (8007e0c <__ieee754_logf+0x238>)
 8007d1c:	4683      	mov	fp, r0
 8007d1e:	4638      	mov	r0, r7
 8007d20:	f7f8 ff6a 	bl	8000bf8 <__aeabi_fmul>
 8007d24:	493a      	ldr	r1, [pc, #232]	; (8007e10 <__ieee754_logf+0x23c>)
 8007d26:	f7f8 fe5f 	bl	80009e8 <__addsf3>
 8007d2a:	4639      	mov	r1, r7
 8007d2c:	f7f8 ff64 	bl	8000bf8 <__aeabi_fmul>
 8007d30:	4938      	ldr	r1, [pc, #224]	; (8007e14 <__ieee754_logf+0x240>)
 8007d32:	f7f8 fe59 	bl	80009e8 <__addsf3>
 8007d36:	4639      	mov	r1, r7
 8007d38:	f7f8 ff5e 	bl	8000bf8 <__aeabi_fmul>
 8007d3c:	4601      	mov	r1, r0
 8007d3e:	4658      	mov	r0, fp
 8007d40:	f7f8 fe52 	bl	80009e8 <__addsf3>
 8007d44:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 8007e18 <__ieee754_logf+0x244>
 8007d48:	f5c4 1357 	rsb	r3, r4, #3522560	; 0x35c000
 8007d4c:	44a2      	add	sl, r4
 8007d4e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8007d52:	ea43 030a 	orr.w	r3, r3, sl
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	4607      	mov	r7, r0
 8007d5a:	dd30      	ble.n	8007dbe <__ieee754_logf+0x1ea>
 8007d5c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8007d60:	4628      	mov	r0, r5
 8007d62:	f7f8 ff49 	bl	8000bf8 <__aeabi_fmul>
 8007d66:	4629      	mov	r1, r5
 8007d68:	f7f8 ff46 	bl	8000bf8 <__aeabi_fmul>
 8007d6c:	4601      	mov	r1, r0
 8007d6e:	4604      	mov	r4, r0
 8007d70:	4638      	mov	r0, r7
 8007d72:	f7f8 fe39 	bl	80009e8 <__addsf3>
 8007d76:	4649      	mov	r1, r9
 8007d78:	f7f8 ff3e 	bl	8000bf8 <__aeabi_fmul>
 8007d7c:	4607      	mov	r7, r0
 8007d7e:	b946      	cbnz	r6, 8007d92 <__ieee754_logf+0x1be>
 8007d80:	4601      	mov	r1, r0
 8007d82:	4620      	mov	r0, r4
 8007d84:	f7f8 fe2e 	bl	80009e4 <__aeabi_fsub>
 8007d88:	4601      	mov	r1, r0
 8007d8a:	4628      	mov	r0, r5
 8007d8c:	f7f8 fe2a 	bl	80009e4 <__aeabi_fsub>
 8007d90:	e72c      	b.n	8007bec <__ieee754_logf+0x18>
 8007d92:	4917      	ldr	r1, [pc, #92]	; (8007df0 <__ieee754_logf+0x21c>)
 8007d94:	4640      	mov	r0, r8
 8007d96:	f7f8 ff2f 	bl	8000bf8 <__aeabi_fmul>
 8007d9a:	4916      	ldr	r1, [pc, #88]	; (8007df4 <__ieee754_logf+0x220>)
 8007d9c:	4606      	mov	r6, r0
 8007d9e:	4640      	mov	r0, r8
 8007da0:	f7f8 ff2a 	bl	8000bf8 <__aeabi_fmul>
 8007da4:	4639      	mov	r1, r7
 8007da6:	f7f8 fe1f 	bl	80009e8 <__addsf3>
 8007daa:	4601      	mov	r1, r0
 8007dac:	4620      	mov	r0, r4
 8007dae:	f7f8 fe19 	bl	80009e4 <__aeabi_fsub>
 8007db2:	4629      	mov	r1, r5
 8007db4:	f7f8 fe16 	bl	80009e4 <__aeabi_fsub>
 8007db8:	4601      	mov	r1, r0
 8007dba:	4630      	mov	r0, r6
 8007dbc:	e7e6      	b.n	8007d8c <__ieee754_logf+0x1b8>
 8007dbe:	4601      	mov	r1, r0
 8007dc0:	4628      	mov	r0, r5
 8007dc2:	f7f8 fe0f 	bl	80009e4 <__aeabi_fsub>
 8007dc6:	4649      	mov	r1, r9
 8007dc8:	f7f8 ff16 	bl	8000bf8 <__aeabi_fmul>
 8007dcc:	4604      	mov	r4, r0
 8007dce:	2e00      	cmp	r6, #0
 8007dd0:	f43f af69 	beq.w	8007ca6 <__ieee754_logf+0xd2>
 8007dd4:	4906      	ldr	r1, [pc, #24]	; (8007df0 <__ieee754_logf+0x21c>)
 8007dd6:	4640      	mov	r0, r8
 8007dd8:	f7f8 ff0e 	bl	8000bf8 <__aeabi_fmul>
 8007ddc:	4905      	ldr	r1, [pc, #20]	; (8007df4 <__ieee754_logf+0x220>)
 8007dde:	4606      	mov	r6, r0
 8007de0:	4640      	mov	r0, r8
 8007de2:	e76c      	b.n	8007cbe <__ieee754_logf+0xea>
 8007de4:	2000      	movs	r0, #0
 8007de6:	e701      	b.n	8007bec <__ieee754_logf+0x18>
 8007de8:	004afb20 	.word	0x004afb20
 8007dec:	007ffff0 	.word	0x007ffff0
 8007df0:	3f317180 	.word	0x3f317180
 8007df4:	3717f7d1 	.word	0x3717f7d1
 8007df8:	3eaaaaab 	.word	0x3eaaaaab
 8007dfc:	3e178897 	.word	0x3e178897
 8007e00:	3e3a3325 	.word	0x3e3a3325
 8007e04:	3e924925 	.word	0x3e924925
 8007e08:	3f2aaaab 	.word	0x3f2aaaab
 8007e0c:	3e1cd04f 	.word	0x3e1cd04f
 8007e10:	3e638e29 	.word	0x3e638e29
 8007e14:	3ecccccd 	.word	0x3ecccccd
 8007e18:	ffcf5c30 	.word	0xffcf5c30

08007e1c <nanf>:
 8007e1c:	4800      	ldr	r0, [pc, #0]	; (8007e20 <nanf+0x4>)
 8007e1e:	4770      	bx	lr
 8007e20:	7fc00000 	.word	0x7fc00000

08007e24 <_init>:
 8007e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e26:	bf00      	nop
 8007e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e2a:	bc08      	pop	{r3}
 8007e2c:	469e      	mov	lr, r3
 8007e2e:	4770      	bx	lr

08007e30 <_fini>:
 8007e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e32:	bf00      	nop
 8007e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e36:	bc08      	pop	{r3}
 8007e38:	469e      	mov	lr, r3
 8007e3a:	4770      	bx	lr
